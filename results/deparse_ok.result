
-------BEGIN-------
Method: abort
SQL: ABORT;
Fingerprint: a46081a556fda027
Fingerprint Deparse: a46081a556fda027
Deparse SQL: ROLLBACK
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_ROLLBACK, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>]>
--------END-------

-------BEGIN-------
Method: alter_aggregate
SQL: ALTER AGGREGATE myavg(integer) RENAME TO my_average;
Fingerprint: 49d4713f4a3c1def
Fingerprint Deparse: 49d4713f4a3c1def
Deparse SQL: ALTER AGGREGATE myavg(int) RENAME TO my_average
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_AGGREGATE, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "myavg">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 22>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 22>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, subname: "", newname: "my_average", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 51>]>
--------END-------

-------BEGIN-------
Method: alter_aggregate
SQL: ALTER AGGREGATE myavg(integer) OWNER TO joe;
Fingerprint: 510972be85ebb885
Fingerprint Deparse: 510972be85ebb885
Deparse SQL: ALTER AGGREGATE myavg(int) OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_AGGREGATE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "myavg">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 22>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 22>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 40>>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: alter_aggregate
SQL: ALTER AGGREGATE mypercentile(float8 ORDER BY integer) SET SCHEMA myschema;
Fingerprint: 71035bed376bd955
Fingerprint Deparse: 71035bed376bd955
Deparse SQL: ALTER AGGREGATE mypercentile(float8, int) SET SCHEMA myschema
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_AGGREGATE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "mypercentile">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 29>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 45>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 29>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 45>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newschema: "myschema", missing_ok: false>>, stmt_location: 0, stmt_len: 73>]>
--------END-------

-------BEGIN-------
Method: alter_aggregate
SQL: ALTER AGGREGATE mypercentile(float8, integer) SET SCHEMA myschema;
Fingerprint: 71035bed376bd955
Fingerprint Deparse: 71035bed376bd955
Deparse SQL: ALTER AGGREGATE mypercentile(float8, int) SET SCHEMA myschema
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_AGGREGATE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "mypercentile">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 29>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 29>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newschema: "myschema", missing_ok: false>>, stmt_location: 0, stmt_len: 65>]>
--------END-------

-------BEGIN-------
Method: alter_collation
SQL: SELECT pg_describe_object(refclassid, refobjid, refobjsubid) AS "Collation",
       pg_describe_object(classid, objid, objsubid) AS "Object"
  FROM pg_depend d JOIN pg_collation c
       ON refclassid = 'pg_collation'::regclass AND refobjid = c.oid
  WHERE c.collversion <> pg_collation_actual_version(c.oid)
  ORDER BY 1, 2;
Fingerprint: 4ea96dcb4cba5142
Fingerprint Deparse: 4ea96dcb4cba5142
Deparse SQL: SELECT pg_describe_object(refclassid, refobjid, refobjsubid) AS "Collation", pg_describe_object(classid, objid, objsubid) AS "Object" FROM pg_depend d JOIN pg_collation c ON refclassid = 'pg_collation'::regclass AND refobjid = c.oid WHERE c.collversion <> pg_collation_actual_version(c.oid) ORDER BY 1, 2
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "Collation", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_describe_object">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "refclassid">>], location: 26>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "refobjid">>], location: 38>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "refobjsubid">>], location: 48>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 7>>, location: 7>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "Object", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_describe_object">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "classid">>], location: 103>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "objid">>], location: 112>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "objsubid">>], location: 119>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 84>>, location: 84>>], from_clause: [<PgQuery::Node: join_expr: <PgQuery::JoinExpr: jointype: :JOIN_INNER, is_natural: false, larg: <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "pg_depend", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "d", colnames: []>, location: 148>>, rarg: <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "pg_collation", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "c", colnames: []>, location: 165>>, using_clause: [], quals: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "refclassid">>], location: 190>>, rexpr: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 203, sval: <PgQuery::String: sval: "pg_collation">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "regclass">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 219>, location: 217>>, location: 201>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "refobjid">>], location: 232>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "c">>, <PgQuery::Node: string: <PgQuery::String: sval: "oid">>], location: 243>>, location: 241>>], location: 228>>, rtindex: 0>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "<>">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "c">>, <PgQuery::Node: string: <PgQuery::String: sval: "collversion">>], location: 257>>, rexpr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_collation_actual_version">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "c">>, <PgQuery::Node: string: <PgQuery::String: sval: "oid">>], location: 302>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 274>>, location: 271>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [<PgQuery::Node: sort_by: <PgQuery::SortBy: node: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 320, ival: <PgQuery::Integer: ival: 1>>>, sortby_dir: :SORTBY_DEFAULT, sortby_nulls: :SORTBY_NULLS_DEFAULT, use_op: [], location: -1>>, <PgQuery::Node: sort_by: <PgQuery::SortBy: node: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 323, ival: <PgQuery::Integer: ival: 2>>>, sortby_dir: :SORTBY_DEFAULT, sortby_nulls: :SORTBY_NULLS_DEFAULT, use_op: [], location: -1>>], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 324>]>
--------END-------

-------BEGIN-------
Method: alter_collation
SQL: ALTER COLLATION "de_DE" RENAME TO german;
Fingerprint: a59cb06c95cea4fb
Fingerprint Deparse: a59cb06c95cea4fb
Deparse SQL: ALTER COLLATION "de_DE" RENAME TO german
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_COLLATION, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "de_DE">>]>>, subname: "", newname: "german", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 40>]>
--------END-------

-------BEGIN-------
Method: alter_collation
SQL: ALTER COLLATION "en_US" OWNER TO joe;
Fingerprint: e26a38751c6ed41a
Fingerprint Deparse: e26a38751c6ed41a
Deparse SQL: ALTER COLLATION "en_US" OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_COLLATION, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "en_US">>]>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 33>>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: alter_conversion
SQL: ALTER CONVERSION iso_8859_1_to_utf8 RENAME TO latin1_to_unicode;
Fingerprint: a22a58da0cc74d15
Fingerprint Deparse: a22a58da0cc74d15
Deparse SQL: ALTER CONVERSION iso_8859_1_to_utf8 RENAME TO latin1_to_unicode
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_CONVERSION, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "iso_8859_1_to_utf8">>]>>, subname: "", newname: "latin1_to_unicode", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 63>]>
--------END-------

-------BEGIN-------
Method: alter_conversion
SQL: ALTER CONVERSION iso_8859_1_to_utf8 OWNER TO joe;
Fingerprint: 588c7a52a2b39826
Fingerprint Deparse: 588c7a52a2b39826
Deparse SQL: ALTER CONVERSION iso_8859_1_to_utf8 OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_CONVERSION, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "iso_8859_1_to_utf8">>]>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 45>>>, stmt_location: 0, stmt_len: 48>]>
--------END-------

-------BEGIN-------
Method: alter_database
SQL: ALTER DATABASE test SET enable_indexscan TO off;
Fingerprint: fa9cab8a70b889ed
Fingerprint Deparse: fa9cab8a70b889ed
Deparse SQL: ALTER DATABASE test SET enable_indexscan TO OFF
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_database_set_stmt: <PgQuery::AlterDatabaseSetStmt: dbname: "test", setstmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "enable_indexscan", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 44, sval: <PgQuery::String: sval: "off">>>], is_local: false>>>, stmt_location: 0, stmt_len: 47>]>
--------END-------

-------BEGIN-------
Method: alter_default_privileges
SQL: ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT SELECT ON TABLES TO PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT INSERT ON TABLES TO webuser;
Fingerprint: a83b3a3acdc1e48e
Fingerprint Deparse: a83b3a3acdc1e48e
Deparse SQL: ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT select ON TABLES TO public; ALTER DEFAULT PRIVILEGES IN SCHEMA myschema GRANT insert ON TABLES TO webuser
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_default_privileges_stmt: <PgQuery::AlterDefaultPrivilegesStmt: options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "schemas", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "myschema">>]>>, defaction: :DEFELEM_UNSPEC, location: 25>>], action: <PgQuery::GrantStmt: is_grant: true, targtype: :ACL_TARGET_DEFAULTS, objtype: :OBJECT_TABLE, objects: [], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "select", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_PUBLIC, rolename: "", location: 70>>], grant_option: false, behavior: :DROP_RESTRICT>>>, stmt_location: 0, stmt_len: 76>, <PgQuery::RawStmt: stmt: <PgQuery::Node: alter_default_privileges_stmt: <PgQuery::AlterDefaultPrivilegesStmt: options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "schemas", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "myschema">>]>>, defaction: :DEFELEM_UNSPEC, location: 103>>], action: <PgQuery::GrantStmt: is_grant: true, targtype: :ACL_TARGET_DEFAULTS, objtype: :OBJECT_TABLE, objects: [], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "insert", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "webuser", location: 148>>], grant_option: false, behavior: :DROP_RESTRICT>>>, stmt_location: 77, stmt_len: 78>]>
--------END-------

-------BEGIN-------
Method: alter_default_privileges
SQL: ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE SELECT ON TABLES FROM PUBLIC;
ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE INSERT ON TABLES FROM webuser;
Fingerprint: 5f454d826f218ec3
Fingerprint Deparse: 5f454d826f218ec3
Deparse SQL: ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE select ON TABLES FROM public; ALTER DEFAULT PRIVILEGES IN SCHEMA myschema REVOKE insert ON TABLES FROM webuser
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_default_privileges_stmt: <PgQuery::AlterDefaultPrivilegesStmt: options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "schemas", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "myschema">>]>>, defaction: :DEFELEM_UNSPEC, location: 25>>], action: <PgQuery::GrantStmt: is_grant: false, targtype: :ACL_TARGET_DEFAULTS, objtype: :OBJECT_TABLE, objects: [], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "select", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_PUBLIC, rolename: "", location: 73>>], grant_option: false, behavior: :DROP_RESTRICT>>>, stmt_location: 0, stmt_len: 79>, <PgQuery::RawStmt: stmt: <PgQuery::Node: alter_default_privileges_stmt: <PgQuery::AlterDefaultPrivilegesStmt: options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "schemas", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "myschema">>]>>, defaction: :DEFELEM_UNSPEC, location: 106>>], action: <PgQuery::GrantStmt: is_grant: false, targtype: :ACL_TARGET_DEFAULTS, objtype: :OBJECT_TABLE, objects: [], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "insert", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "webuser", location: 154>>], grant_option: false, behavior: :DROP_RESTRICT>>>, stmt_location: 80, stmt_len: 81>]>
--------END-------

-------BEGIN-------
Method: alter_default_privileges
SQL: ALTER DEFAULT PRIVILEGES FOR ROLE admin REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;
Fingerprint: 5c6381c8b579025b
Fingerprint Deparse: 5c6381c8b579025b
Deparse SQL: ALTER DEFAULT PRIVILEGES FOR ROLE admin REVOKE execute ON FUNCTIONS FROM public
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_default_privileges_stmt: <PgQuery::AlterDefaultPrivilegesStmt: options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "roles", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "admin", location: 34>>]>>, defaction: :DEFELEM_UNSPEC, location: 25>>], action: <PgQuery::GrantStmt: is_grant: false, targtype: :ACL_TARGET_DEFAULTS, objtype: :OBJECT_FUNCTION, objects: [], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "execute", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_PUBLIC, rolename: "", location: 73>>], grant_option: false, behavior: :DROP_RESTRICT>>>, stmt_location: 0, stmt_len: 79>]>
--------END-------

-------BEGIN-------
Method: alter_domain
SQL: ALTER DOMAIN zipcode SET NOT NULL;
Fingerprint: c75f5cf0ff428c83
Fingerprint Deparse: c75f5cf0ff428c83
Deparse SQL: ALTER DOMAIN zipcode SET NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_domain_stmt: <PgQuery::AlterDomainStmt: subtype: "O", type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], name: "", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 33>]>
--------END-------

-------BEGIN-------
Method: alter_domain
SQL: ALTER DOMAIN zipcode DROP NOT NULL;
Fingerprint: 3698a2a52c99368b
Fingerprint Deparse: 3698a2a52c99368b
Deparse SQL: ALTER DOMAIN zipcode DROP NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_domain_stmt: <PgQuery::AlterDomainStmt: subtype: "N", type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], name: "", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: alter_domain
SQL: ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(VALUE) = 5);
Fingerprint: 8d1daee1320f058e
Fingerprint Deparse: 8d1daee1320f058e
Deparse SQL: ALTER DOMAIN zipcode ADD CONSTRAINT zipchk CHECK (char_length(value) = 5)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_domain_stmt: <PgQuery::AlterDomainStmt: subtype: "C", type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], name: "", def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "zipchk", deferrable: false, initdeferred: false, location: 25, is_no_inherit: false, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "char_length">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "value">>], location: 62>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 50>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 71, ival: <PgQuery::Integer: ival: 5>>>, location: 69>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>, behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 73>]>
--------END-------

-------BEGIN-------
Method: alter_domain
SQL: ALTER DOMAIN zipcode DROP CONSTRAINT zipchk;
Fingerprint: fb633c162ec6705f
Fingerprint Deparse: fb633c162ec6705f
Deparse SQL: ALTER DOMAIN zipcode DROP CONSTRAINT zipchk
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_domain_stmt: <PgQuery::AlterDomainStmt: subtype: "X", type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], name: "zipchk", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: alter_domain
SQL: ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check;
Fingerprint: 7a8b2588bdb3dd08
Fingerprint Deparse: 7a8b2588bdb3dd08
Deparse SQL: ALTER DOMAIN zipcode RENAME CONSTRAINT zipchk TO zip_check
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_DOMCONSTRAINT, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>]>>, subname: "zipchk", newname: "zip_check", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 58>]>
--------END-------

-------BEGIN-------
Method: alter_domain
SQL: ALTER DOMAIN zipcode SET SCHEMA customers;
Fingerprint: fc7b1c746ba4b1e8
Fingerprint Deparse: fc7b1c746ba4b1e8
Deparse SQL: ALTER DOMAIN zipcode SET SCHEMA customers
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_DOMAIN, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>]>>, newschema: "customers", missing_ok: false>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: alter_extension
SQL: ALTER EXTENSION hstore UPDATE TO '2.0';
Fingerprint: 33abb74554de22bd
Fingerprint Deparse: 33abb74554de22bd
Deparse SQL: ALTER EXTENSION hstore UPDATE TO "2.0"
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_extension_stmt: <PgQuery::AlterExtensionStmt: extname: "hstore", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "new_version", arg: <PgQuery::Node: string: <PgQuery::String: sval: "2.0">>, defaction: :DEFELEM_UNSPEC, location: 30>>]>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: alter_extension
SQL: ALTER EXTENSION hstore SET SCHEMA utils;
Fingerprint: 18fcc2f9a5a1d01e
Fingerprint Deparse: 18fcc2f9a5a1d01e
Deparse SQL: ALTER EXTENSION hstore SET SCHEMA utils
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_EXTENSION, object: <PgQuery::Node: string: <PgQuery::String: sval: "hstore">>, newschema: "utils", missing_ok: false>>, stmt_location: 0, stmt_len: 39>]>
--------END-------

-------BEGIN-------
Method: alter_extension
SQL: ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore);
Fingerprint: 51ae9eb4100cb2f7
Fingerprint Deparse: 51ae9eb4100cb2f7
Deparse SQL: ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_extension_contents_stmt: <PgQuery::AlterExtensionContentsStmt: extname: "hstore", action: 1, objtype: :OBJECT_FUNCTION, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "populate_record">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "anyelement">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 52>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 64>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "anyelement">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 52>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 64>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>>>, stmt_location: 0, stmt_len: 71>]>
--------END-------

-------BEGIN-------
Method: alter_foreign_data_wrapper
SQL: ALTER FOREIGN DATA WRAPPER dbi OPTIONS (ADD foo '1', DROP 'bar');
Fingerprint: 1c459de79f75b6cd
Fingerprint Deparse: 1c459de79f75b6cd
Deparse SQL: ALTER FOREIGN DATA WRAPPER dbi OPTIONS (ADD foo '1', drop 'bar')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_fdw_stmt: <PgQuery::AlterFdwStmt: fdwname: "dbi", func_options: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "foo", arg: <PgQuery::Node: string: <PgQuery::String: sval: "1">>, defaction: :DEFELEM_ADD, location: 44>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "drop", arg: <PgQuery::Node: string: <PgQuery::String: sval: "bar">>, defaction: :DEFELEM_UNSPEC, location: 53>>]>>, stmt_location: 0, stmt_len: 64>]>
--------END-------

-------BEGIN-------
Method: alter_foreign_data_wrapper
SQL: ALTER FOREIGN DATA WRAPPER dbi VALIDATOR bob.myvalidator;
Fingerprint: 8af8e7d35609f69e
Fingerprint Deparse: 8af8e7d35609f69e
Deparse SQL: ALTER FOREIGN DATA WRAPPER dbi VALIDATOR bob.myvalidator
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_fdw_stmt: <PgQuery::AlterFdwStmt: fdwname: "dbi", func_options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "validator", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "bob">>, <PgQuery::Node: string: <PgQuery::String: sval: "myvalidator">>]>>, defaction: :DEFELEM_UNSPEC, location: 31>>], options: []>>, stmt_location: 0, stmt_len: 56>]>
--------END-------

-------BEGIN-------
Method: alter_foreign_table
SQL: ALTER FOREIGN TABLE distributors ALTER COLUMN street SET NOT NULL;
Fingerprint: 5a14456f150583c3
Fingerprint Deparse: 5a14456f150583c3
Deparse SQL: ALTER FOREIGN TABLE distributors ALTER COLUMN street SET NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 20>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_SetNotNull, name: "street", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_FOREIGN_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 65>]>
--------END-------

-------BEGIN-------
Method: alter_function
SQL: ALTER FUNCTION sqrt(integer) RENAME TO square_root;
Fingerprint: f26aa85c6a1e9b4b
Fingerprint Deparse: f26aa85c6a1e9b4b
Deparse SQL: ALTER FUNCTION sqrt(int) RENAME TO square_root
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_FUNCTION, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, subname: "", newname: "square_root", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 50>]>
--------END-------

-------BEGIN-------
Method: alter_function
SQL: ALTER FUNCTION sqrt(integer) OWNER TO joe;
Fingerprint: 009e24eaee18c160
Fingerprint Deparse: 009e24eaee18c160
Deparse SQL: ALTER FUNCTION sqrt(int) OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_FUNCTION, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 38>>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: alter_function
SQL: ALTER FUNCTION sqrt(integer) SET SCHEMA maths;
Fingerprint: 46a69487bf3fe4fb
Fingerprint Deparse: 46a69487bf3fe4fb
Deparse SQL: ALTER FUNCTION sqrt(int) SET SCHEMA maths
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_FUNCTION, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newschema: "maths", missing_ok: false>>, stmt_location: 0, stmt_len: 45>]>
--------END-------

-------BEGIN-------
Method: alter_function
SQL: ALTER FUNCTION sqrt(integer) DEPENDS ON EXTENSION mathlib;
Fingerprint: 8bb38a1d658d6799
Fingerprint Deparse: 8bb38a1d658d6799
Deparse SQL: ALTER FUNCTION sqrt(int) DEPENDS ON EXTENSION mathlib
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_depends_stmt: <PgQuery::AlterObjectDependsStmt: object_type: :OBJECT_FUNCTION, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, extname: <PgQuery::String: sval: "mathlib">, remove: false>>, stmt_location: 0, stmt_len: 57>]>
--------END-------

-------BEGIN-------
Method: alter_function
SQL: ALTER FUNCTION check_password(text) SET search_path = admin, pg_temp;
Fingerprint: 51bf7801f5ca4f12
Fingerprint Deparse: 51bf7801f5ca4f12
Deparse SQL: ALTER FUNCTION check_password(text) SET search_path TO admin, pg_temp
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_function_stmt: <PgQuery::AlterFunctionStmt: objtype: :OBJECT_FUNCTION, func: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_password">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 30>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 30>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>, actions: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "set", arg: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "search_path", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 54, sval: <PgQuery::String: sval: "admin">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 61, sval: <PgQuery::String: sval: "pg_temp">>>], is_local: false>>, defaction: :DEFELEM_UNSPEC, location: 36>>]>>, stmt_location: 0, stmt_len: 68>]>
--------END-------

-------BEGIN-------
Method: alter_function
SQL: ALTER FUNCTION check_password(text) RESET search_path;
Fingerprint: f6a56333383e9763
Fingerprint Deparse: f6a56333383e9763
Deparse SQL: ALTER FUNCTION check_password(text) RESET search_path
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_function_stmt: <PgQuery::AlterFunctionStmt: objtype: :OBJECT_FUNCTION, func: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_password">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 30>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 30>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>, actions: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "set", arg: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_RESET, name: "search_path", args: [], is_local: false>>, defaction: :DEFELEM_UNSPEC, location: 36>>]>>, stmt_location: 0, stmt_len: 53>]>
--------END-------

-------BEGIN-------
Method: alter_group
SQL: ALTER GROUP staff ADD USER karl, john;
Fingerprint: 38b36e06e5e6db87
Fingerprint Deparse: 38b36e06e5e6db87
Deparse SQL: ALTER GROUP staff ADD USER karl, john
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "staff", location: 12>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "rolemembers", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "karl", location: 27>>, <PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "john", location: 33>>]>>, defaction: :DEFELEM_UNSPEC, location: 27>>], action: 1>>, stmt_location: 0, stmt_len: 37>]>
--------END-------

-------BEGIN-------
Method: alter_group
SQL: ALTER GROUP workers DROP USER beth;
Fingerprint: 798150bcf5cddeb9
Fingerprint Deparse: 798150bcf5cddeb9
Deparse SQL: ALTER GROUP workers DROP USER beth
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "workers", location: 12>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "rolemembers", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "beth", location: 30>>]>>, defaction: :DEFELEM_UNSPEC, location: 30>>], action: -1>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: alter_index
SQL: ALTER INDEX distributors RENAME TO suppliers;
Fingerprint: 2cf17a3786844bb1
Fingerprint Deparse: 2cf17a3786844bb1
Deparse SQL: ALTER INDEX distributors RENAME TO suppliers
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_INDEX, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, subname: "", newname: "suppliers", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 44>]>
--------END-------

-------BEGIN-------
Method: alter_index
SQL: ALTER INDEX distributors SET TABLESPACE fasttablespace;
Fingerprint: faea38b349cee1f8
Fingerprint Deparse: faea38b349cee1f8
Deparse SQL: ALTER INDEX distributors SET TABLESPACE fasttablespace
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_SetTableSpace, name: "fasttablespace", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_INDEX, missing_ok: false>>, stmt_location: 0, stmt_len: 54>]>
--------END-------

-------BEGIN-------
Method: alter_index
SQL: ALTER INDEX distributors SET (fillfactor = 75);
REINDEX INDEX distributors;
Fingerprint: 1ee421df4bb1f536
Fingerprint Deparse: 1ee421df4bb1f536
Deparse SQL: ALTER INDEX distributors SET (fillfactor=75); REINDEX INDEX distributors
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_SetRelOptions, name: "", num: 0, def: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "fillfactor", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 75>>, defaction: :DEFELEM_UNSPEC, location: 30>>]>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_INDEX, missing_ok: false>>, stmt_location: 0, stmt_len: 46>, <PgQuery::RawStmt: stmt: <PgQuery::Node: reindex_stmt: <PgQuery::ReindexStmt: kind: :REINDEX_OBJECT_INDEX, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 62>, name: "", params: []>>, stmt_location: 47, stmt_len: 27>]>
--------END-------

-------BEGIN-------
Method: alter_index
SQL: CREATE INDEX coord_idx ON measured (x, y, (z + t));
ALTER INDEX coord_idx ALTER COLUMN 3 SET STATISTICS 1000;
Fingerprint: 6a3ef050b70240ee
Fingerprint Deparse: 6a3ef050b70240ee
Deparse SQL: CREATE INDEX coord_idx ON measured USING btree (x, y, (z + t)); ALTER INDEX coord_idx ALTER COLUMN 3 SET STATISTICS 1000
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "coord_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measured", inh: true, relpersistence: "p", location: 26>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "x", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>, <PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "y", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>, <PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "", expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "z">>], location: 43>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "t">>], location: 47>>, location: 45>>, indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 50>, <PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "coord_idx", inh: true, relpersistence: "p", location: 64>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_SetStatistics, name: "", num: 3, def: <PgQuery::Node: integer: <PgQuery::Integer: ival: 1000>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_INDEX, missing_ok: false>>, stmt_location: 51, stmt_len: 57>]>
--------END-------

-------BEGIN-------
Method: alter_materialized_view
SQL: ALTER MATERIALIZED VIEW foo RENAME TO bar;
Fingerprint: 2cec4b181ae42936
Fingerprint Deparse: 2cec4b181ae42936
Deparse SQL: ALTER MATERIALIZED VIEW foo RENAME TO bar
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_MATVIEW, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "foo", inh: true, relpersistence: "p", location: 24>, subname: "", newname: "bar", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: alter_operator
SQL: ALTER OPERATOR @@ (text, text) OWNER TO joe;
Fingerprint: 05cf7cbea9ffc35f
Fingerprint Deparse: 05cf7cbea9ffc35f
Deparse SQL: ALTER OPERATOR @@(text, text) OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_OPERATOR, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "@@">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 25>>], objfuncargs: [], args_unspecified: false>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 40>>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: alter_opfamily
SQL: ALTER OPERATOR FAMILY integer_ops USING btree DROP

  -- int4 vs int2
  OPERATOR 1 (int4, int2) ,
  OPERATOR 2 (int4, int2) ,
  OPERATOR 3 (int4, int2) ,
  OPERATOR 4 (int4, int2) ,
  OPERATOR 5 (int4, int2) ,
  FUNCTION 1 (int4, int2) ,

  -- int2 vs int4
  OPERATOR 1 (int2, int4) ,
  OPERATOR 2 (int2, int4) ,
  OPERATOR 3 (int2, int4) ,
  OPERATOR 4 (int2, int4) ,
  OPERATOR 5 (int2, int4) ,
  FUNCTION 1 (int2, int4) ;
Fingerprint: 14a852c25d12ea93
Fingerprint Deparse: 14a852c25d12ea93
Deparse SQL: ALTER OPERATOR FAMILY integer_ops USING btree DROP OPERATOR 1 (int4, int2), OPERATOR 2 (int4, int2), OPERATOR 3 (int4, int2), OPERATOR 4 (int4, int2), OPERATOR 5 (int4, int2), FUNCTION 1 (int4, int2), OPERATOR 1 (int2, int4), OPERATOR 2 (int2, int4), OPERATOR 3 (int2, int4), OPERATOR 4 (int2, int4), OPERATOR 5 (int2, int4), FUNCTION 1 (int2, int4)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_op_family_stmt: <PgQuery::AlterOpFamilyStmt: opfamilyname: [<PgQuery::Node: string: <PgQuery::String: sval: "integer_ops">>], amname: "btree", is_drop: true, items: [<PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 1, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 84>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 90>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 2, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 112>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 118>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 3, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 140>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 146>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 4, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 168>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 174>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 5, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 196>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 202>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 2, number: 1, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 224>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 230>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 1, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 271>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 277>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 2, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 299>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 305>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 3, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 327>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 333>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 4, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 355>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 361>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 1, number: 5, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 383>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 389>>]>>, <PgQuery::Node: create_op_class_item: <PgQuery::CreateOpClassItem: itemtype: 2, number: 1, order_family: [], class_args: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int2">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 411>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 417>>]>>]>>, stmt_location: 0, stmt_len: 423>]>
--------END-------

-------BEGIN-------
Method: alter_procedure
SQL: ALTER PROCEDURE insert_data(integer, integer) RENAME TO insert_record;
Fingerprint: 8d4e89cf957d297b
Fingerprint Deparse: 8d4e89cf957d297b
Deparse SQL: ALTER PROCEDURE insert_data(int, int) RENAME TO insert_record
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_PROCEDURE, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_data">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, subname: "", newname: "insert_record", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: alter_procedure
SQL: ALTER PROCEDURE insert_data(integer, integer) OWNER TO joe;
Fingerprint: 4722e877f0f31969
Fingerprint Deparse: 4722e877f0f31969
Deparse SQL: ALTER PROCEDURE insert_data(int, int) OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_PROCEDURE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_data">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 55>>>, stmt_location: 0, stmt_len: 58>]>
--------END-------

-------BEGIN-------
Method: alter_procedure
SQL: ALTER PROCEDURE insert_data(integer, integer) SET SCHEMA accounting;
Fingerprint: 53c4fc60fbe95ac7
Fingerprint Deparse: 53c4fc60fbe95ac7
Deparse SQL: ALTER PROCEDURE insert_data(int, int) SET SCHEMA accounting
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_PROCEDURE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_data">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, newschema: "accounting", missing_ok: false>>, stmt_location: 0, stmt_len: 67>]>
--------END-------

-------BEGIN-------
Method: alter_procedure
SQL: ALTER PROCEDURE insert_data(integer, integer) DEPENDS ON EXTENSION myext;
Fingerprint: f7765e2dc9519047
Fingerprint Deparse: f7765e2dc9519047
Deparse SQL: ALTER PROCEDURE insert_data(int, int) DEPENDS ON EXTENSION myext
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_depends_stmt: <PgQuery::AlterObjectDependsStmt: object_type: :OBJECT_PROCEDURE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_data">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, extname: <PgQuery::String: sval: "myext">, remove: false>>, stmt_location: 0, stmt_len: 72>]>
--------END-------

-------BEGIN-------
Method: alter_procedure
SQL: ALTER PROCEDURE check_password(text) SET search_path = admin, pg_temp;
Fingerprint: 2c015017f82bc9bb
Fingerprint Deparse: 2c015017f82bc9bb
Deparse SQL: ALTER PROCEDURE check_password(text) SET search_path TO admin, pg_temp
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_function_stmt: <PgQuery::AlterFunctionStmt: objtype: :OBJECT_PROCEDURE, func: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_password">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>, actions: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "set", arg: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "search_path", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, sval: <PgQuery::String: sval: "admin">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 62, sval: <PgQuery::String: sval: "pg_temp">>>], is_local: false>>, defaction: :DEFELEM_UNSPEC, location: 37>>]>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: alter_procedure
SQL: ALTER PROCEDURE check_password(text) RESET search_path;
Fingerprint: ceb9fcd185af583e
Fingerprint Deparse: ceb9fcd185af583e
Deparse SQL: ALTER PROCEDURE check_password(text) RESET search_path
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_function_stmt: <PgQuery::AlterFunctionStmt: objtype: :OBJECT_PROCEDURE, func: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_password">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>, actions: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "set", arg: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_RESET, name: "search_path", args: [], is_local: false>>, defaction: :DEFELEM_UNSPEC, location: 37>>]>>, stmt_location: 0, stmt_len: 54>]>
--------END-------

-------BEGIN-------
Method: alter_publication
SQL: ALTER PUBLICATION noinsert SET (publish = 'update, delete');
Fingerprint: d638686999f33409
Fingerprint Deparse: d638686999f33409
Deparse SQL: ALTER PUBLICATION noinsert SET (publish = 'update, delete')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_publication_stmt: <PgQuery::AlterPublicationStmt: pubname: "noinsert", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "publish", arg: <PgQuery::Node: string: <PgQuery::String: sval: "update, delete">>, defaction: :DEFELEM_UNSPEC, location: 32>>], pubobjects: [], for_all_tables: false, action: :AP_AddObjects>>, stmt_location: 0, stmt_len: 59>]>
--------END-------

-------BEGIN-------
Method: alter_publication
SQL: ALTER PUBLICATION mypublication ADD TABLE users, departments;
Fingerprint: f4bc23c4ac8d4971
Fingerprint Deparse: f4bc23c4ac8d4971
Deparse SQL: ALTER PUBLICATION mypublication ADD TABLE users, TABLE departments
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_publication_stmt: <PgQuery::AlterPublicationStmt: pubname: "mypublication", options: [], pubobjects: [<PgQuery::Node: publication_obj_spec: <PgQuery::PublicationObjSpec: pubobjtype: :PUBLICATIONOBJ_TABLE, name: "", pubtable: <PgQuery::PublicationTable: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "users", inh: true, relpersistence: "p", location: 42>, columns: []>, location: 0>>, <PgQuery::Node: publication_obj_spec: <PgQuery::PublicationObjSpec: pubobjtype: :PUBLICATIONOBJ_TABLE, name: "", pubtable: <PgQuery::PublicationTable: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "departments", inh: true, relpersistence: "p", location: 49>, columns: []>, location: 49>>], for_all_tables: false, action: :AP_AddObjects>>, stmt_location: 0, stmt_len: 60>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE davide WITH PASSWORD 'hu8jmn3';
Fingerprint: 828113fe532f3c5e
Fingerprint Deparse: 828113fe532f3c5e
Deparse SQL: ALTER ROLE davide WITH PASSWORD 'hu8jmn3'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "davide", location: 11>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "password", arg: <PgQuery::Node: string: <PgQuery::String: sval: "hu8jmn3">>, defaction: :DEFELEM_UNSPEC, location: 23>>], action: 1>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE davide WITH PASSWORD NULL;
Fingerprint: 76efe7749f9e7568
Fingerprint Deparse: 76efe7749f9e7568
Deparse SQL: ALTER ROLE davide WITH PASSWORD NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "davide", location: 11>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "password", defaction: :DEFELEM_UNSPEC, location: 23>>], action: 1>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE chris VALID UNTIL 'May 4 12:00:00 2015 +1';
Fingerprint: 5de28bf749c55d0a
Fingerprint Deparse: 5de28bf749c55d0a
Deparse SQL: ALTER ROLE chris WITH VALID UNTIL 'May 4 12:00:00 2015 +1'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "chris", location: 11>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "validUntil", arg: <PgQuery::Node: string: <PgQuery::String: sval: "May 4 12:00:00 2015 +1">>, defaction: :DEFELEM_UNSPEC, location: 17>>], action: 1>>, stmt_location: 0, stmt_len: 53>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE fred VALID UNTIL 'infinity';
Fingerprint: becff1bde68212c1
Fingerprint Deparse: becff1bde68212c1
Deparse SQL: ALTER ROLE fred WITH VALID UNTIL 'infinity'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "fred", location: 11>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "validUntil", arg: <PgQuery::Node: string: <PgQuery::String: sval: "infinity">>, defaction: :DEFELEM_UNSPEC, location: 16>>], action: 1>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE miriam CREATEROLE CREATEDB;
Fingerprint: fc3d67e5618ed0b9
Fingerprint Deparse: fc3d67e5618ed0b9
Deparse SQL: ALTER ROLE miriam WITH CREATEROLE CREATEDB
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_stmt: <PgQuery::AlterRoleStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "miriam", location: 11>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "createrole", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 18>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "createdb", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 29>>], action: 1>>, stmt_location: 0, stmt_len: 37>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE worker_bee SET maintenance_work_mem = 100000;
Fingerprint: d9d14a9416fb4185
Fingerprint Deparse: d9d14a9416fb4185
Deparse SQL: ALTER ROLE worker_bee SET maintenance_work_mem TO 100000
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_set_stmt: <PgQuery::AlterRoleSetStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "worker_bee", location: 11>, database: "", setstmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "maintenance_work_mem", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 49, ival: <PgQuery::Integer: ival: 100000>>>], is_local: false>>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: alter_role
SQL: ALTER ROLE fred IN DATABASE devel SET client_min_messages = DEBUG;
Fingerprint: 169d675ba7f648e2
Fingerprint Deparse: 169d675ba7f648e2
Deparse SQL: ALTER ROLE fred IN DATABASE devel SET client_min_messages TO debug
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_role_set_stmt: <PgQuery::AlterRoleSetStmt: role: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "fred", location: 11>, database: "devel", setstmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "client_min_messages", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 60, sval: <PgQuery::String: sval: "debug">>>], is_local: false>>>, stmt_location: 0, stmt_len: 65>]>
--------END-------

-------BEGIN-------
Method: alter_routine
SQL: ALTER ROUTINE foo(integer) RENAME TO foobar;
Fingerprint: 8d9dbb831739e112
Fingerprint Deparse: 8d9dbb831739e112
Deparse SQL: ALTER ROUTINE foo(int) RENAME TO foobar
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_ROUTINE, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "foo">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 18>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 18>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, subname: "", newname: "foobar", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: alter_rule
SQL: ALTER RULE notify_all ON emp RENAME TO notify_me;
Fingerprint: cdf0829c0d106067
Fingerprint Deparse: cdf0829c0d106067
Deparse SQL: ALTER RULE notify_all ON emp RENAME TO notify_me
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_RULE, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "emp", inh: true, relpersistence: "p", location: 25>, subname: "notify_all", newname: "notify_me", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 48>]>
--------END-------

-------BEGIN-------
Method: alter_sequence
SQL: ALTER SEQUENCE serial RESTART WITH 105;
Fingerprint: 49ee183e7a0bcdf4
Fingerprint Deparse: 49ee183e7a0bcdf4
Deparse SQL: ALTER SEQUENCE serial RESTART 105
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_seq_stmt: <PgQuery::AlterSeqStmt: sequence: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "serial", inh: true, relpersistence: "p", location: 15>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "restart", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 105>>, defaction: :DEFELEM_UNSPEC, location: 22>>], for_identity: false, missing_ok: false>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: alter_server
SQL: ALTER SERVER foo OPTIONS (host 'foo', dbname 'foodb');
Fingerprint: f7dc9e78ce5426e3
Fingerprint Deparse: f7dc9e78ce5426e3
Deparse SQL: ALTER SERVER foo OPTIONS (host 'foo', dbname 'foodb')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_foreign_server_stmt: <PgQuery::AlterForeignServerStmt: servername: "foo", version: "", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "host", arg: <PgQuery::Node: string: <PgQuery::String: sval: "foo">>, defaction: :DEFELEM_UNSPEC, location: 26>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "dbname", arg: <PgQuery::Node: string: <PgQuery::String: sval: "foodb">>, defaction: :DEFELEM_UNSPEC, location: 38>>], has_version: false>>, stmt_location: 0, stmt_len: 53>]>
--------END-------

-------BEGIN-------
Method: alter_server
SQL: ALTER SERVER foo VERSION '8.4' OPTIONS (SET host 'baz');
Fingerprint: 56897bd18d7ebe8d
Fingerprint Deparse: 56897bd18d7ebe8d
Deparse SQL: ALTER SERVER foo VERSION '8.4' OPTIONS (SET host 'baz')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_foreign_server_stmt: <PgQuery::AlterForeignServerStmt: servername: "foo", version: "8.4", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "host", arg: <PgQuery::Node: string: <PgQuery::String: sval: "baz">>, defaction: :DEFELEM_SET, location: 44>>], has_version: true>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: alter_subscription
SQL: ALTER SUBSCRIPTION mysub SET PUBLICATION insert_only;
Fingerprint: 88dba445ee3e5a89
Fingerprint Deparse: 88dba445ee3e5a89
Deparse SQL: ALTER SUBSCRIPTION mysub SET PUBLICATION insert_only
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_subscription_stmt: <PgQuery::AlterSubscriptionStmt: kind: :ALTER_SUBSCRIPTION_SET_PUBLICATION, subname: "mysub", conninfo: "", publication: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_only">>], options: []>>, stmt_location: 0, stmt_len: 52>]>
--------END-------

-------BEGIN-------
Method: alter_subscription
SQL: ALTER SUBSCRIPTION mysub DISABLE;
Fingerprint: 67768c83318737c4
Fingerprint Deparse: 67768c83318737c4
Deparse SQL: ALTER SUBSCRIPTION mysub  DISABLE
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_subscription_stmt: <PgQuery::AlterSubscriptionStmt: kind: :ALTER_SUBSCRIPTION_ENABLED, subname: "mysub", conninfo: "", publication: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "enabled", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: false>>, defaction: :DEFELEM_UNSPEC, location: 0>>]>>, stmt_location: 0, stmt_len: 32>]>
--------END-------

-------BEGIN-------
Method: alter_system
SQL: ALTER SYSTEM SET wal_level = replica;
Fingerprint: 89164b8132281c1f
Fingerprint Deparse: 89164b8132281c1f
Deparse SQL: ALTER SYSTEM SET wal_level TO replica
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_system_stmt: <PgQuery::AlterSystemStmt: setstmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "wal_level", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 29, sval: <PgQuery::String: sval: "replica">>>], is_local: false>>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: alter_system
SQL: ALTER SYSTEM RESET wal_level;
Fingerprint: 15a9559ff644b7d1
Fingerprint Deparse: 15a9559ff644b7d1
Deparse SQL: ALTER SYSTEM RESET wal_level
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_system_stmt: <PgQuery::AlterSystemStmt: setstmt: <PgQuery::VariableSetStmt: kind: :VAR_RESET, name: "wal_level", args: [], is_local: false>>>, stmt_location: 0, stmt_len: 28>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD COLUMN address varchar(30);
Fingerprint: 3e5c54fda140b80c
Fingerprint Deparse: 3e5c54fda140b80c
Deparse SQL: ALTER TABLE distributors ADD COLUMN address varchar(30)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddColumn, name: "", num: 0, def: <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "address", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 52, ival: <PgQuery::Integer: ival: 30>>>], typemod: -1, array_bounds: [], location: 44>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 36>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors DROP COLUMN address RESTRICT;
Fingerprint: cee59f7e17906427
Fingerprint Deparse: cee59f7e17906427
Deparse SQL: ALTER TABLE distributors DROP address
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_DropColumn, name: "address", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 53>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors
    ALTER COLUMN address TYPE varchar(80),
    ALTER COLUMN name TYPE varchar(100);
Fingerprint: ca08bd737134755d
Fingerprint Deparse: ca08bd737134755d
Deparse SQL: ALTER TABLE distributors ALTER COLUMN address TYPE varchar(80), ALTER COLUMN name TYPE varchar(100)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AlterColumnType, name: "address", num: 0, def: <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 63, ival: <PgQuery::Integer: ival: 80>>>], typemod: -1, array_bounds: [], location: 55>, compression: "", inhcount: 0, is_local: false, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 42>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>, <PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AlterColumnType, name: "name", num: 0, def: <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 103, ival: <PgQuery::Integer: ival: 100>>>], typemod: -1, array_bounds: [], location: 95>, compression: "", inhcount: 0, is_local: false, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 85>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 107>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE foo
    ALTER COLUMN foo_timestamp SET DATA TYPE timestamp with time zone
    USING
        timestamp with time zone 'epoch' + foo_timestamp * interval '1 second';
Fingerprint: 5ef1f9f2278797c6
Fingerprint Deparse: 5ef1f9f2278797c6
Deparse SQL: ALTER TABLE foo ALTER COLUMN foo_timestamp TYPE timestamp with time zone USING 'epoch'::timestamp with time zone + (foo_timestamp * '1 second'::interval)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "foo", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AlterColumnType, name: "foo_timestamp", num: 0, def: <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamptz">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: false, is_not_null: false, is_from_type: false, storage: "", raw_default: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 129, sval: <PgQuery::String: sval: "epoch">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamptz">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 104>, location: -1>>, rexpr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "*">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "foo_timestamp">>], location: 139>>, rexpr: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 164, sval: <PgQuery::String: sval: "1 second">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "interval">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 155>, location: -1>>, location: 153>>, location: 137>>, identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 33>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 174>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE foo
    ALTER COLUMN foo_timestamp DROP DEFAULT,
    ALTER COLUMN foo_timestamp TYPE timestamp with time zone
    USING
        timestamp with time zone 'epoch' + foo_timestamp * interval '1 second',
    ALTER COLUMN foo_timestamp SET DEFAULT now();
Fingerprint: f310bda51ca27898
Fingerprint Deparse: f310bda51ca27898
Deparse SQL: ALTER TABLE foo ALTER COLUMN foo_timestamp DROP DEFAULT, ALTER COLUMN foo_timestamp TYPE timestamp with time zone USING 'epoch'::timestamp with time zone + (foo_timestamp * '1 second'::interval), ALTER COLUMN foo_timestamp SET DEFAULT now()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "foo", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_ColumnDefault, name: "foo_timestamp", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>, <PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AlterColumnType, name: "foo_timestamp", num: 0, def: <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamptz">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 97>, compression: "", inhcount: 0, is_local: false, is_not_null: false, is_from_type: false, storage: "", raw_default: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 165, sval: <PgQuery::String: sval: "epoch">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamptz">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 140>, location: -1>>, rexpr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "*">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "foo_timestamp">>], location: 175>>, rexpr: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 200, sval: <PgQuery::String: sval: "1 second">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "interval">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 191>, location: -1>>, location: 189>>, location: 173>>, identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 78>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>, <PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_ColumnDefault, name: "foo_timestamp", num: 0, def: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "now">>], args: [], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 255>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 260>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors RENAME COLUMN address TO city;
Fingerprint: 2f6cb70f7a68f5b2
Fingerprint Deparse: 2f6cb70f7a68f5b2
Deparse SQL: ALTER TABLE distributors RENAME COLUMN address TO city
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_COLUMN, relation_type: :OBJECT_TABLE, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, subname: "address", newname: "city", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 54>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors RENAME TO suppliers;
Fingerprint: 65eda56d250dff04
Fingerprint Deparse: 65eda56d250dff04
Deparse SQL: ALTER TABLE distributors RENAME TO suppliers
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_TABLE, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, subname: "", newname: "suppliers", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 44>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors RENAME CONSTRAINT zipchk TO zip_check;
Fingerprint: 0cdbdb6957efa506
Fingerprint Deparse: 0cdbdb6957efa506
Deparse SQL: ALTER TABLE distributors RENAME CONSTRAINT zipchk TO zip_check
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_TABCONSTRAINT, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, subname: "zipchk", newname: "zip_check", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 62>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ALTER COLUMN street SET NOT NULL;
Fingerprint: be0caf65f3b40743
Fingerprint Deparse: be0caf65f3b40743
Deparse SQL: ALTER TABLE distributors ALTER COLUMN street SET NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_SetNotNull, name: "street", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 57>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL;
Fingerprint: f64e09fcfdcb5af6
Fingerprint Deparse: f64e09fcfdcb5af6
Deparse SQL: ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_DropNotNull, name: "street", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 58>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5);
Fingerprint: c49ecfc8fc08b276
Fingerprint Deparse: c49ecfc8fc08b276
Deparse SQL: ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "zipchk", deferrable: false, initdeferred: false, location: 29, is_no_inherit: false, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "char_length">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], location: 66>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 54>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 77, ival: <PgQuery::Integer: ival: 5>>>, location: 75>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 79>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5) NO INHERIT;
Fingerprint: 0b6e7bd561eddabf
Fingerprint Deparse: 0b6e7bd561eddabf
Deparse SQL: ALTER TABLE distributors ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5) NO INHERIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "zipchk", deferrable: false, initdeferred: false, location: 29, is_no_inherit: true, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "char_length">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], location: 66>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 54>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 77, ival: <PgQuery::Integer: ival: 5>>>, location: 75>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 90>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors DROP CONSTRAINT zipchk;
Fingerprint: 027dcd4fc9c0cea0
Fingerprint Deparse: 027dcd4fc9c0cea0
Deparse SQL: ALTER TABLE distributors DROP CONSTRAINT zipchk
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_DropConstraint, name: "zipchk", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 47>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE ONLY distributors DROP CONSTRAINT zipchk;
Fingerprint: a8a7a0249fb78d85
Fingerprint Deparse: a8a7a0249fb78d85
Deparse SQL: ALTER TABLE ONLY distributors DROP CONSTRAINT zipchk
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: false, relpersistence: "p", location: 17>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_DropConstraint, name: "zipchk", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 52>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address);
Fingerprint: 411315cb8b07f62a
Fingerprint Deparse: 411315cb8b07f62a
Deparse SQL: ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_FOREIGN, conname: "distfk", deferrable: false, initdeferred: false, location: 29, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", pktable: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "addresses", inh: true, relpersistence: "p", location: 80>, fk_attrs: [<PgQuery::Node: string: <PgQuery::String: sval: "address">>], pk_attrs: [<PgQuery::Node: string: <PgQuery::String: sval: "address">>], fk_matchtype: "s", fk_upd_action: "a", fk_del_action: "a", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 99>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) NOT VALID;
ALTER TABLE distributors VALIDATE CONSTRAINT distfk;
Fingerprint: 886a871fadf4d123
Fingerprint Deparse: 886a871fadf4d123
Deparse SQL: ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses (address) NOT VALID; ALTER TABLE distributors VALIDATE CONSTRAINT distfk
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_FOREIGN, conname: "distfk", deferrable: false, initdeferred: false, location: 29, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", pktable: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "addresses", inh: true, relpersistence: "p", location: 80>, fk_attrs: [<PgQuery::Node: string: <PgQuery::String: sval: "address">>], pk_attrs: [<PgQuery::Node: string: <PgQuery::String: sval: "address">>], fk_matchtype: "s", fk_upd_action: "a", fk_del_action: "a", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: true, initially_valid: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 109>, <PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 123>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_ValidateConstraint, name: "distfk", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 110, stmt_len: 52>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode);
Fingerprint: 2bb6bedd480ec00c
Fingerprint Deparse: 2bb6bedd480ec00c
Deparse SQL: ALTER TABLE distributors ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_UNIQUE, conname: "dist_id_zipcode_key", deferrable: false, initdeferred: false, location: 29, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "dist_id">>, <PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 85>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors ADD PRIMARY KEY (dist_id);
Fingerprint: dae1660cf43d9a62
Fingerprint Deparse: dae1660cf43d9a62
Deparse SQL: ALTER TABLE distributors ADD PRIMARY KEY (dist_id)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "", deferrable: false, initdeferred: false, location: 29, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "dist_id">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 50>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE distributors SET TABLESPACE fasttablespace;
Fingerprint: d0740a18ad6963aa
Fingerprint Deparse: d0740a18ad6963aa
Deparse SQL: ALTER TABLE distributors SET TABLESPACE fasttablespace
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_SetTableSpace, name: "fasttablespace", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 54>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE myschema.distributors SET SCHEMA yourschema;
Fingerprint: 1babe10d204a4d8f
Fingerprint Deparse: 1babe10d204a4d8f
Deparse SQL: ALTER TABLE myschema.distributors SET SCHEMA yourschema
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_TABLE, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "myschema", relname: "distributors", inh: true, relpersistence: "p", location: 12>, newschema: "yourschema", missing_ok: false>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: CREATE UNIQUE INDEX CONCURRENTLY dist_id_temp_idx ON distributors (dist_id);
ALTER TABLE distributors DROP CONSTRAINT distributors_pkey,
    ADD CONSTRAINT distributors_pkey PRIMARY KEY USING INDEX dist_id_temp_idx;
Fingerprint: a150c63601fcb13f
Fingerprint Deparse: a150c63601fcb13f
Deparse SQL: CREATE UNIQUE INDEX CONCURRENTLY dist_id_temp_idx ON distributors USING btree (dist_id); ALTER TABLE distributors DROP CONSTRAINT distributors_pkey, ADD CONSTRAINT distributors_pkey PRIMARY KEY USING INDEX dist_id_temp_idx
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "dist_id_temp_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 53>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "dist_id", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: true, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: true, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 75>, <PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 89>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_DropConstraint, name: "distributors_pkey", num: 0, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>, <PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddConstraint, name: "", num: 0, def: <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "distributors_pkey", deferrable: false, initdeferred: false, location: 145, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "dist_id_temp_idx", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 76, stmt_len: 138>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE measurement
    ATTACH PARTITION measurement_y2016m07 FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
Fingerprint: f14001e0785669f2
Fingerprint Deparse: f14001e0785669f2
Deparse SQL: ALTER TABLE measurement ATTACH PARTITION measurement_y2016m07 FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AttachPartition, name: "", num: 0, def: <PgQuery::Node: partition_cmd: <PgQuery::PartitionCmd: name: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_y2016m07", inh: true, relpersistence: "p", location: 45>, bound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 83, sval: <PgQuery::String: sval: "2016-07-01">>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 101, sval: <PgQuery::String: sval: "2016-08-01">>>], location: 77>, concurrent: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 114>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE cities
    ATTACH PARTITION cities_ab FOR VALUES IN ('a', 'b');
Fingerprint: 2321cc5f3588ef1d
Fingerprint Deparse: 2321cc5f3588ef1d
Deparse SQL: ALTER TABLE cities ATTACH PARTITION cities_ab FOR VALUES IN ('a', 'b')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AttachPartition, name: "", num: 0, def: <PgQuery::Node: partition_cmd: <PgQuery::PartitionCmd: name: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_ab", inh: true, relpersistence: "p", location: 40>, bound: <PgQuery::PartitionBoundSpec: strategy: "l", is_default: false, modulus: 0, remainder: 0, listdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 65, sval: <PgQuery::String: sval: "a">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 70, sval: <PgQuery::String: sval: "b">>>], lowerdatums: [], upperdatums: [], location: 61>, concurrent: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 74>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE orders
    ATTACH PARTITION orders_p4 FOR VALUES WITH (MODULUS 4, REMAINDER 3);
Fingerprint: 664c5cfb9b137548
Fingerprint Deparse: 664c5cfb9b137548
Deparse SQL: ALTER TABLE orders ATTACH PARTITION orders_p4 FOR VALUES WITH (MODULUS 4, REMAINDER 3)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AttachPartition, name: "", num: 0, def: <PgQuery::Node: partition_cmd: <PgQuery::PartitionCmd: name: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders_p4", inh: true, relpersistence: "p", location: 40>, bound: <PgQuery::PartitionBoundSpec: strategy: "h", is_default: false, modulus: 4, remainder: 3, listdatums: [], lowerdatums: [], upperdatums: [], location: 61>, concurrent: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 90>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE cities
    ATTACH PARTITION cities_partdef DEFAULT;
Fingerprint: 7ad4deac73bca376
Fingerprint Deparse: 7ad4deac73bca376
Deparse SQL: ALTER TABLE cities ATTACH PARTITION cities_partdef DEFAULT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AttachPartition, name: "", num: 0, def: <PgQuery::Node: partition_cmd: <PgQuery::PartitionCmd: name: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_partdef", inh: true, relpersistence: "p", location: 40>, bound: <PgQuery::PartitionBoundSpec: strategy: "", is_default: true, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [], upperdatums: [], location: 55>, concurrent: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 62>]>
--------END-------

-------BEGIN-------
Method: alter_table
SQL: ALTER TABLE measurement
    DETACH PARTITION measurement_y2015m12;
Fingerprint: 91d894e17a7993d0
Fingerprint Deparse: 91d894e17a7993d0
Deparse SQL: ALTER TABLE measurement DETACH PARTITION measurement_y2015m12
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement", inh: true, relpersistence: "p", location: 12>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_DetachPartition, name: "", num: 0, def: <PgQuery::Node: partition_cmd: <PgQuery::PartitionCmd: name: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_y2015m12", inh: true, relpersistence: "p", location: 45>, concurrent: false>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TABLE, missing_ok: false>>, stmt_location: 0, stmt_len: 65>]>
--------END-------

-------BEGIN-------
Method: alter_tablespace
SQL: ALTER TABLESPACE index_space RENAME TO fast_raid;
Fingerprint: 2db9b65ea839426b
Fingerprint Deparse: 2db9b65ea839426b
Deparse SQL: ALTER TABLESPACE index_space RENAME TO fast_raid
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_TABLESPACE, relation_type: :OBJECT_ACCESS_METHOD, subname: "index_space", newname: "fast_raid", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 48>]>
--------END-------

-------BEGIN-------
Method: alter_tablespace
SQL: ALTER TABLESPACE index_space OWNER TO mary;
Fingerprint: bbee9daf42b69b5c
Fingerprint Deparse: bbee9daf42b69b5c
Deparse SQL: ALTER TABLESPACE index_space OWNER TO mary
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_TABLESPACE, object: <PgQuery::Node: string: <PgQuery::String: sval: "index_space">>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "mary", location: 38>>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: alter_trigger
SQL: ALTER TRIGGER emp_stamp ON emp RENAME TO emp_track_chgs;
Fingerprint: 5d057dbdaf9fae94
Fingerprint Deparse: 5d057dbdaf9fae94
Deparse SQL: ALTER TRIGGER emp_stamp ON emp RENAME TO emp_track_chgs
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_TRIGGER, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "emp", inh: true, relpersistence: "p", location: 27>, subname: "emp_stamp", newname: "emp_track_chgs", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: alter_trigger
SQL: ALTER TRIGGER emp_stamp ON emp DEPENDS ON EXTENSION emplib;
Fingerprint: bfe4ea5e57ebd0d3
Fingerprint Deparse: bfe4ea5e57ebd0d3
Deparse SQL: ALTER TRIGGER emp_stamp ON emp DEPENDS ON EXTENSION emplib
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_depends_stmt: <PgQuery::AlterObjectDependsStmt: object_type: :OBJECT_TRIGGER, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "emp", inh: true, relpersistence: "p", location: 27>, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "emp_stamp">>]>>, extname: <PgQuery::String: sval: "emplib">, remove: false>>, stmt_location: 0, stmt_len: 58>]>
--------END-------

-------BEGIN-------
Method: alter_tsconfig
SQL: ALTER TEXT SEARCH CONFIGURATION my_config
  ALTER MAPPING REPLACE english WITH swedish;
Fingerprint: 3b2dfbb8fe001d98
Fingerprint Deparse: 3b2dfbb8fe001d98
Deparse SQL: ALTER TEXT SEARCH CONFIGURATION my_config ALTER MAPPING REPLACE english WITH swedish
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_tsconfiguration_stmt: <PgQuery::AlterTSConfigurationStmt: kind: :ALTER_TSCONFIG_REPLACE_DICT, cfgname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_config">>], tokentype: [], dicts: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "english">>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "swedish">>]>>], override: false, replace: true, missing_ok: false>>, stmt_location: 0, stmt_len: 86>]>
--------END-------

-------BEGIN-------
Method: alter_tsdictionary
SQL: ALTER TEXT SEARCH DICTIONARY my_dict ( StopWords = newrussian );
Fingerprint: 2d7d9e662c07c271
Fingerprint Deparse: 2d7d9e662c07c271
Deparse SQL: ALTER TEXT SEARCH DICTIONARY my_dict (stopwords = newrussian)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_tsdictionary_stmt: <PgQuery::AlterTSDictionaryStmt: dictname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_dict">>], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "stopwords", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "newrussian">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 51>>, defaction: :DEFELEM_UNSPEC, location: 39>>]>>, stmt_location: 0, stmt_len: 63>]>
--------END-------

-------BEGIN-------
Method: alter_tsdictionary
SQL: ALTER TEXT SEARCH DICTIONARY my_dict ( language = dutch, StopWords );
Fingerprint: f9569fedfa87caea
Fingerprint Deparse: f9569fedfa87caea
Deparse SQL: ALTER TEXT SEARCH DICTIONARY my_dict (language = dutch, stopwords)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_tsdictionary_stmt: <PgQuery::AlterTSDictionaryStmt: dictname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_dict">>], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "dutch">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 50>>, defaction: :DEFELEM_UNSPEC, location: 39>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "stopwords", defaction: :DEFELEM_UNSPEC, location: 57>>]>>, stmt_location: 0, stmt_len: 68>]>
--------END-------

-------BEGIN-------
Method: alter_tsdictionary
SQL: ALTER TEXT SEARCH DICTIONARY my_dict ( dummy );
Fingerprint: a4d4d933c8a36526
Fingerprint Deparse: a4d4d933c8a36526
Deparse SQL: ALTER TEXT SEARCH DICTIONARY my_dict (dummy)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_tsdictionary_stmt: <PgQuery::AlterTSDictionaryStmt: dictname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_dict">>], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "dummy", defaction: :DEFELEM_UNSPEC, location: 39>>]>>, stmt_location: 0, stmt_len: 46>]>
--------END-------

-------BEGIN-------
Method: alter_type
SQL: ALTER TYPE electronic_mail RENAME TO email;
Fingerprint: 4ef93b4ed875cc15
Fingerprint Deparse: 4ef93b4ed875cc15
Deparse SQL: ALTER TYPE electronic_mail RENAME TO email
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_TYPE, relation_type: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "electronic_mail">>]>>, subname: "", newname: "email", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: alter_type
SQL: ALTER TYPE email OWNER TO joe;
Fingerprint: a82d7d5e9bf4a230
Fingerprint Deparse: a82d7d5e9bf4a230
Deparse SQL: ALTER TYPE email OWNER TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_owner_stmt: <PgQuery::AlterOwnerStmt: object_type: :OBJECT_TYPE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "email">>]>>, newowner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 26>>>, stmt_location: 0, stmt_len: 29>]>
--------END-------

-------BEGIN-------
Method: alter_type
SQL: ALTER TYPE email SET SCHEMA customers;
Fingerprint: ac961de45d1a0641
Fingerprint Deparse: ac961de45d1a0641
Deparse SQL: ALTER TYPE email SET SCHEMA customers
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_object_schema_stmt: <PgQuery::AlterObjectSchemaStmt: object_type: :OBJECT_TYPE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "email">>]>>, newschema: "customers", missing_ok: false>>, stmt_location: 0, stmt_len: 37>]>
--------END-------

-------BEGIN-------
Method: alter_type
SQL: ALTER TYPE compfoo ADD ATTRIBUTE f3 int;
Fingerprint: 7c83383f7976eab9
Fingerprint Deparse: 7c83383f7976eab9
Deparse SQL: ALTER TYPE compfoo ADD ATTRIBUTE f3 int
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "compfoo", inh: false, relpersistence: "p", location: 11>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_AddColumn, name: "", num: 0, def: <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "f3", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 36>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 33>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_TYPE, missing_ok: false>>, stmt_location: 0, stmt_len: 39>]>
--------END-------

-------BEGIN-------
Method: alter_type
SQL: ALTER TYPE colors ADD VALUE 'orange' AFTER 'red';
Fingerprint: 339ef756e2bd51c4
Fingerprint Deparse: 339ef756e2bd51c4
Deparse SQL: ALTER TYPE colors ADD VALUE 'orange' AFTER 'red'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_enum_stmt: <PgQuery::AlterEnumStmt: type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "colors">>], old_val: "", new_val: "orange", new_val_neighbor: "red", new_val_is_after: true, skip_if_new_val_exists: false>>, stmt_location: 0, stmt_len: 48>]>
--------END-------

-------BEGIN-------
Method: alter_type
SQL: ALTER TYPE colors RENAME VALUE 'purple' TO 'mauve';
Fingerprint: 752baa98b2407fdf
Fingerprint Deparse: 752baa98b2407fdf
Deparse SQL: ALTER TYPE colors RENAME VALUE 'purple' TO 'mauve'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_enum_stmt: <PgQuery::AlterEnumStmt: type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "colors">>], old_val: "purple", new_val: "mauve", new_val_neighbor: "", new_val_is_after: false, skip_if_new_val_exists: false>>, stmt_location: 0, stmt_len: 50>]>
--------END-------

-------BEGIN-------
Method: alter_user_mapping
SQL: ALTER USER MAPPING FOR bob SERVER foo OPTIONS (SET password 'public');
Fingerprint: f4f14ebf3e21f946
Fingerprint Deparse: f4f14ebf3e21f946
Deparse SQL: ALTER USER MAPPING FOR bob SERVER foo OPTIONS (SET password 'public')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: alter_user_mapping_stmt: <PgQuery::AlterUserMappingStmt: user: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "bob", location: 23>, servername: "foo", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "password", arg: <PgQuery::Node: string: <PgQuery::String: sval: "public">>, defaction: :DEFELEM_SET, location: 51>>]>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: alter_view
SQL: ALTER VIEW foo RENAME TO bar;
Fingerprint: c366670b9e3124de
Fingerprint Deparse: c366670b9e3124de
Deparse SQL: ALTER VIEW foo RENAME TO bar
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rename_stmt: <PgQuery::RenameStmt: rename_type: :OBJECT_VIEW, relation_type: :OBJECT_ACCESS_METHOD, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "foo", inh: true, relpersistence: "p", location: 11>, subname: "", newname: "bar", behavior: :DROP_RESTRICT, missing_ok: false>>, stmt_location: 0, stmt_len: 28>]>
--------END-------

-------BEGIN-------
Method: alter_view
SQL: CREATE TABLE base_table (id int, ts timestamptz);
CREATE VIEW a_view AS SELECT * FROM base_table;
ALTER VIEW a_view ALTER COLUMN ts SET DEFAULT now();
INSERT INTO base_table(id) VALUES(1);  -- ts will receive a NULL
INSERT INTO a_view(id) VALUES(2);  -- ts will receive the current time
Fingerprint: 75b950af2bd5e7d8
Fingerprint Deparse: 75b950af2bd5e7d8
Deparse SQL: CREATE TABLE base_table (id int, ts timestamptz); CREATE VIEW a_view AS SELECT * FROM base_table; ALTER VIEW a_view ALTER COLUMN ts SET DEFAULT now(); INSERT INTO base_table (id) VALUES (1); INSERT INTO a_view (id) VALUES (2)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "base_table", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 25>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "ts", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "timestamptz">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 36>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 33>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 48>, <PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "a_view", inh: true, relpersistence: "p", location: 62>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 79>>, location: 79>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "base_table", inh: true, relpersistence: "p", location: 86>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>, stmt_location: 49, stmt_len: 47>, <PgQuery::RawStmt: stmt: <PgQuery::Node: alter_table_stmt: <PgQuery::AlterTableStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "a_view", inh: true, relpersistence: "p", location: 109>, cmds: [<PgQuery::Node: alter_table_cmd: <PgQuery::AlterTableCmd: subtype: :AT_ColumnDefault, name: "ts", num: 0, def: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "now">>], args: [], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 144>>, behavior: :DROP_RESTRICT, missing_ok: false, recurse: false>>], objtype: :OBJECT_VIEW, missing_ok: false>>, stmt_location: 97, stmt_len: 52>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "base_table", inh: true, relpersistence: "p", location: 163>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "id", indirection: [], location: 174>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 185, ival: <PgQuery::Integer: ival: 1>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 150, stmt_len: 37>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "a_view", inh: true, relpersistence: "p", location: 228>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "id", indirection: [], location: 235>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 246, ival: <PgQuery::Integer: ival: 2>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 188, stmt_len: 60>]>
--------END-------

-------BEGIN-------
Method: begin
SQL: BEGIN;
Fingerprint: b16b431979fc3e05
Fingerprint Deparse: b16b431979fc3e05
Deparse SQL: BEGIN
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>]>
--------END-------

-------BEGIN-------
Method: call
SQL: CALL do_db_maintenance();
Fingerprint: b21795f05f17e9c6
Fingerprint Deparse: b21795f05f17e9c6
Deparse SQL: CALL do_db_maintenance()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: call_stmt: <PgQuery::CallStmt: funccall: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "do_db_maintenance">>], args: [], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 5>, outargs: []>>, stmt_location: 0, stmt_len: 24>]>
--------END-------

-------BEGIN-------
Method: close
SQL: CLOSE liahona;
Fingerprint: 2c7963684fc2bad9
Fingerprint Deparse: 2c7963684fc2bad9
Deparse SQL: CLOSE liahona
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: close_portal_stmt: <PgQuery::ClosePortalStmt: portalname: "liahona">>, stmt_location: 0, stmt_len: 13>]>
--------END-------

-------BEGIN-------
Method: cluster
SQL: CLUSTER employees USING employees_ind;
Fingerprint: 1ee6c1c8083f9f7c
Fingerprint Deparse: 1ee6c1c8083f9f7c
Deparse SQL: CLUSTER employees USING employees_ind
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: cluster_stmt: <PgQuery::ClusterStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 8>, indexname: "employees_ind", params: []>>, stmt_location: 0, stmt_len: 37>]>
--------END-------

-------BEGIN-------
Method: cluster
SQL: CLUSTER employees;
Fingerprint: a63f99d295e23f0f
Fingerprint Deparse: a63f99d295e23f0f
Deparse SQL: CLUSTER employees
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: cluster_stmt: <PgQuery::ClusterStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 8>, indexname: "", params: []>>, stmt_location: 0, stmt_len: 17>]>
--------END-------

-------BEGIN-------
Method: cluster
SQL: CLUSTER;
Fingerprint: 48f850775d6c7e26
Fingerprint Deparse: 48f850775d6c7e26
Deparse SQL: CLUSTER
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: cluster_stmt: <PgQuery::ClusterStmt: indexname: "", params: []>>, stmt_location: 0, stmt_len: 7>]>
--------END-------

-------BEGIN-------
Method: comment
SQL: COMMENT ON TABLE mytable IS 'This is my table.';
Fingerprint: 19bd7923c3b0236c
Fingerprint Deparse: 19bd7923c3b0236c
Deparse SQL: COMMENT ON TABLE mytable IS 'This is my table.'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TABLE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "mytable">>]>>, comment: "This is my table.">>, stmt_location: 0, stmt_len: 47>]>
--------END-------

-------BEGIN-------
Method: comment
SQL: COMMENT ON TABLE mytable IS NULL;
Fingerprint: 71bdc091d4dad7eb
Fingerprint Deparse: 71bdc091d4dad7eb
Deparse SQL: COMMENT ON TABLE mytable IS NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TABLE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "mytable">>]>>, comment: "">>, stmt_location: 0, stmt_len: 32>]>
--------END-------

-------BEGIN-------
Method: comment
SQL: COMMENT ON ACCESS METHOD rtree IS 'R-Tree access method';
COMMENT ON AGGREGATE my_aggregate (double precision) IS 'Computes sample variance';
COMMENT ON CAST (text AS int4) IS 'Allow casts from text to int4';
COMMENT ON COLLATION "fr_CA" IS 'Canadian French';
COMMENT ON COLUMN my_table.my_column IS 'Employee ID number';
COMMENT ON CONVERSION my_conv IS 'Conversion to UTF8';
COMMENT ON CONSTRAINT bar_col_cons ON bar IS 'Constrains column col';
COMMENT ON CONSTRAINT dom_col_constr ON DOMAIN dom IS 'Constrains col of domain';
COMMENT ON DATABASE my_database IS 'Development Database';
COMMENT ON DOMAIN my_domain IS 'Email Address Domain';
COMMENT ON EXTENSION hstore IS 'implements the hstore data type';
COMMENT ON FOREIGN DATA WRAPPER mywrapper IS 'my foreign data wrapper';
COMMENT ON FOREIGN TABLE my_foreign_table IS 'Employee Information in other database';
COMMENT ON FUNCTION my_function (timestamp) IS 'Returns Roman Numeral';
COMMENT ON INDEX my_index IS 'Enforces uniqueness on employee ID';
COMMENT ON LANGUAGE plpython IS 'Python support for stored procedures';
COMMENT ON LARGE OBJECT 346344 IS 'Planning document';
COMMENT ON MATERIALIZED VIEW my_matview IS 'Summary of order history';
COMMENT ON OPERATOR ^ (text, text) IS 'Performs intersection of two texts';
COMMENT ON OPERATOR - (NONE, integer) IS 'Unary minus';
COMMENT ON OPERATOR CLASS int4ops USING btree IS '4 byte integer operators for btrees';
COMMENT ON OPERATOR FAMILY integer_ops USING btree IS 'all integer operators for btrees';
COMMENT ON POLICY my_policy ON mytable IS 'Filter rows by users';
COMMENT ON PROCEDURE my_proc (integer, integer) IS 'Runs a report';
COMMENT ON ROLE my_role IS 'Administration group for finance tables';
COMMENT ON RULE my_rule ON my_table IS 'Logs updates of employee records';
COMMENT ON SCHEMA my_schema IS 'Departmental data';
COMMENT ON SEQUENCE my_sequence IS 'Used to generate primary keys';
COMMENT ON SERVER myserver IS 'my foreign server';
COMMENT ON STATISTICS my_statistics IS 'Improves planner row estimations';
COMMENT ON TABLE my_schema.my_table IS 'Employee Information';
COMMENT ON TABLESPACE my_tablespace IS 'Tablespace for indexes';
COMMENT ON TEXT SEARCH CONFIGURATION my_config IS 'Special word filtering';
COMMENT ON TEXT SEARCH DICTIONARY swedish IS 'Snowball stemmer for Swedish language';
COMMENT ON TEXT SEARCH PARSER my_parser IS 'Splits text into words';
COMMENT ON TEXT SEARCH TEMPLATE snowball IS 'Snowball stemmer';
COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS 'Transform between hstore and Python dict';
COMMENT ON TRIGGER my_trigger ON my_table IS 'Used for RI';
COMMENT ON TYPE complex IS 'Complex number data type';
COMMENT ON VIEW my_view IS 'View of departmental costs';
Fingerprint: 1a897fea2b64ff11
Fingerprint Deparse: 1a897fea2b64ff11
Deparse SQL: COMMENT ON ACCESS METHOD rtree IS 'R-Tree access method'; COMMENT ON AGGREGATE my_aggregate(double precision) IS 'Computes sample variance'; COMMENT ON CAST (text AS int4) IS 'Allow casts from text to int4'; COMMENT ON COLLATION "fr_CA" IS 'Canadian French'; COMMENT ON COLUMN my_table.my_column IS 'Employee ID number'; COMMENT ON CONVERSION my_conv IS 'Conversion to UTF8'; COMMENT ON CONSTRAINT bar_col_cons ON bar IS 'Constrains column col'; COMMENT ON CONSTRAINT dom_col_constr ON DOMAIN dom IS 'Constrains col of domain'; COMMENT ON DATABASE my_database IS 'Development Database'; COMMENT ON DOMAIN my_domain IS 'Email Address Domain'; COMMENT ON EXTENSION hstore IS 'implements the hstore data type'; COMMENT ON FOREIGN DATA WRAPPER mywrapper IS 'my foreign data wrapper'; COMMENT ON FOREIGN TABLE my_foreign_table IS 'Employee Information in other database'; COMMENT ON FUNCTION my_function(timestamp) IS 'Returns Roman Numeral'; COMMENT ON INDEX my_index IS 'Enforces uniqueness on employee ID'; COMMENT ON LANGUAGE plpython IS 'Python support for stored procedures'; COMMENT ON LARGE OBJECT 346344 IS 'Planning document'; COMMENT ON MATERIALIZED VIEW my_matview IS 'Summary of order history'; COMMENT ON OPERATOR ^(text, text) IS 'Performs intersection of two texts'; COMMENT ON OPERATOR -(NONE, int) IS 'Unary minus'; COMMENT ON OPERATOR CLASS int4ops USING btree IS '4 byte integer operators for btrees'; COMMENT ON OPERATOR FAMILY integer_ops USING btree IS 'all integer operators for btrees'; COMMENT ON POLICY my_policy ON mytable IS 'Filter rows by users'; COMMENT ON PROCEDURE my_proc(int, int) IS 'Runs a report'; COMMENT ON ROLE my_role IS 'Administration group for finance tables'; COMMENT ON RULE my_rule ON my_table IS 'Logs updates of employee records'; COMMENT ON SCHEMA my_schema IS 'Departmental data'; COMMENT ON SEQUENCE my_sequence IS 'Used to generate primary keys'; COMMENT ON SERVER myserver IS 'my foreign server'; COMMENT ON STATISTICS my_statistics IS 'Improves planner row estimations'; COMMENT ON TABLE my_schema.my_table IS 'Employee Information'; COMMENT ON TABLESPACE my_tablespace IS 'Tablespace for indexes'; COMMENT ON TEXT SEARCH CONFIGURATION my_config IS 'Special word filtering'; COMMENT ON TEXT SEARCH DICTIONARY swedish IS 'Snowball stemmer for Swedish language'; COMMENT ON TEXT SEARCH PARSER my_parser IS 'Splits text into words'; COMMENT ON TEXT SEARCH TEMPLATE snowball IS 'Snowball stemmer'; COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS 'Transform between hstore and Python dict'; COMMENT ON TRIGGER my_trigger ON my_table IS 'Used for RI'; COMMENT ON TYPE complex IS 'Complex number data type'; COMMENT ON VIEW my_view IS 'View of departmental costs'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_ACCESS_METHOD, object: <PgQuery::Node: string: <PgQuery::String: sval: "rtree">>, comment: "R-Tree access method">>, stmt_location: 0, stmt_len: 56>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_AGGREGATE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_aggregate">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 93>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 93>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, comment: "Computes sample variance">>, stmt_location: 57, stmt_len: 83>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_CAST, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 159>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 167>>]>>, comment: "Allow casts from text to int4">>, stmt_location: 141, stmt_len: 66>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_COLLATION, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "fr_CA">>]>>, comment: "Canadian French">>, stmt_location: 208, stmt_len: 50>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_COLUMN, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_table">>, <PgQuery::Node: string: <PgQuery::String: sval: "my_column">>]>>, comment: "Employee ID number">>, stmt_location: 259, stmt_len: 61>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_CONVERSION, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_conv">>]>>, comment: "Conversion to UTF8">>, stmt_location: 321, stmt_len: 54>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TABCONSTRAINT, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "bar">>, <PgQuery::Node: string: <PgQuery::String: sval: "bar_col_cons">>]>>, comment: "Constrains column col">>, stmt_location: 376, stmt_len: 69>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_DOMCONSTRAINT, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "dom">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: -1>>, <PgQuery::Node: string: <PgQuery::String: sval: "dom_col_constr">>]>>, comment: "Constrains col of domain">>, stmt_location: 446, stmt_len: 81>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_DATABASE, object: <PgQuery::Node: string: <PgQuery::String: sval: "my_database">>, comment: "Development Database">>, stmt_location: 528, stmt_len: 58>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_DOMAIN, object: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "my_domain">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 606>>, comment: "Email Address Domain">>, stmt_location: 587, stmt_len: 54>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_EXTENSION, object: <PgQuery::Node: string: <PgQuery::String: sval: "hstore">>, comment: "implements the hstore data type">>, stmt_location: 642, stmt_len: 65>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_FDW, object: <PgQuery::Node: string: <PgQuery::String: sval: "mywrapper">>, comment: "my foreign data wrapper">>, stmt_location: 708, stmt_len: 71>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_FOREIGN_TABLE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_foreign_table">>]>>, comment: "Employee Information in other database">>, stmt_location: 780, stmt_len: 86>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_FUNCTION, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_function">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamp">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 901>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamp">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 901>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, comment: "Returns Roman Numeral">>, stmt_location: 867, stmt_len: 71>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_INDEX, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_index">>]>>, comment: "Enforces uniqueness on employee ID">>, stmt_location: 939, stmt_len: 66>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_LANGUAGE, object: <PgQuery::Node: string: <PgQuery::String: sval: "plpython">>, comment: "Python support for stored procedures">>, stmt_location: 1006, stmt_len: 71>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_LARGEOBJECT, object: <PgQuery::Node: integer: <PgQuery::Integer: ival: 346344>>, comment: "Planning document">>, stmt_location: 1078, stmt_len: 54>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_MATVIEW, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_matview">>]>>, comment: "Summary of order history">>, stmt_location: 1133, stmt_len: 70>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_OPERATOR, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "^">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1228>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1234>>], objfuncargs: [], args_unspecified: false>>, comment: "Performs intersection of two texts">>, stmt_location: 1204, stmt_len: 75>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_OPERATOR, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "-">>], objargs: [<PgQuery::Node: >, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1310>>], objfuncargs: [], args_unspecified: false>>, comment: "Unary minus">>, stmt_location: 1280, stmt_len: 55>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_OPCLASS, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "btree">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4ops">>]>>, comment: "4 byte integer operators for btrees">>, stmt_location: 1336, stmt_len: 87>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_OPFAMILY, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "btree">>, <PgQuery::Node: string: <PgQuery::String: sval: "integer_ops">>]>>, comment: "all integer operators for btrees">>, stmt_location: 1424, stmt_len: 89>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_POLICY, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "mytable">>, <PgQuery::Node: string: <PgQuery::String: sval: "my_policy">>]>>, comment: "Filter rows by users">>, stmt_location: 1514, stmt_len: 65>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_PROCEDURE, object: <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "my_proc">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1611>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1620>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1611>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 1620>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, comment: "Runs a report">>, stmt_location: 1580, stmt_len: 67>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_ROLE, object: <PgQuery::Node: string: <PgQuery::String: sval: "my_role">>, comment: "Administration group for finance tables">>, stmt_location: 1648, stmt_len: 69>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_RULE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_table">>, <PgQuery::Node: string: <PgQuery::String: sval: "my_rule">>]>>, comment: "Logs updates of employee records">>, stmt_location: 1718, stmt_len: 74>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_SCHEMA, object: <PgQuery::Node: string: <PgQuery::String: sval: "my_schema">>, comment: "Departmental data">>, stmt_location: 1793, stmt_len: 51>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_SEQUENCE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_sequence">>]>>, comment: "Used to generate primary keys">>, stmt_location: 1845, stmt_len: 67>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_FOREIGN_SERVER, object: <PgQuery::Node: string: <PgQuery::String: sval: "myserver">>, comment: "my foreign server">>, stmt_location: 1913, stmt_len: 50>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_STATISTIC_EXT, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_statistics">>]>>, comment: "Improves planner row estimations">>, stmt_location: 1964, stmt_len: 74>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TABLE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_schema">>, <PgQuery::Node: string: <PgQuery::String: sval: "my_table">>]>>, comment: "Employee Information">>, stmt_location: 2039, stmt_len: 62>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TABLESPACE, object: <PgQuery::Node: string: <PgQuery::String: sval: "my_tablespace">>, comment: "Tablespace for indexes">>, stmt_location: 2102, stmt_len: 64>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TSCONFIGURATION, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_config">>]>>, comment: "Special word filtering">>, stmt_location: 2167, stmt_len: 75>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TSDICTIONARY, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "swedish">>]>>, comment: "Snowball stemmer for Swedish language">>, stmt_location: 2243, stmt_len: 85>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TSPARSER, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_parser">>]>>, comment: "Splits text into words">>, stmt_location: 2329, stmt_len: 68>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TSTEMPLATE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "snowball">>]>>, comment: "Snowball stemmer">>, stmt_location: 2398, stmt_len: 63>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TRANSFORM, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 2488>>, <PgQuery::Node: string: <PgQuery::String: sval: "plpythonu">>]>>, comment: "Transform between hstore and Python dict">>, stmt_location: 2462, stmt_len: 97>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TRIGGER, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_table">>, <PgQuery::Node: string: <PgQuery::String: sval: "my_trigger">>]>>, comment: "Used for RI">>, stmt_location: 2560, stmt_len: 59>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_TYPE, object: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "complex">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 2637>>, comment: "Complex number data type">>, stmt_location: 2620, stmt_len: 54>, <PgQuery::RawStmt: stmt: <PgQuery::Node: comment_stmt: <PgQuery::CommentStmt: objtype: :OBJECT_VIEW, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_view">>]>>, comment: "View of departmental costs">>, stmt_location: 2675, stmt_len: 56>]>
--------END-------

-------BEGIN-------
Method: commit
SQL: COMMIT;
Fingerprint: 7bbcde9cfab6c79c
Fingerprint Deparse: 7bbcde9cfab6c79c
Deparse SQL: COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 6>]>
--------END-------

-------BEGIN-------
Method: commit_prepared
SQL: COMMIT PREPARED 'foobar';
Fingerprint: cc4872a4cb05ed79
Fingerprint Deparse: cc4872a4cb05ed79
Deparse SQL: COMMIT PREPARED 'foobar'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT_PREPARED, options: [], savepoint_name: "", gid: "foobar", chain: false>>, stmt_location: 0, stmt_len: 24>]>
--------END-------

-------BEGIN-------
Method: copy
SQL: COPY country TO STDOUT (DELIMITER '|');
Fingerprint: 95073779b007d6a6
Fingerprint Deparse: 95073779b007d6a6
Deparse SQL: COPY country TO STDOUT WITH (DELIMITER '|')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: copy_stmt: <PgQuery::CopyStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "country", inh: true, relpersistence: "p", location: 5>, attlist: [], is_from: false, is_program: false, filename: "", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "delimiter", arg: <PgQuery::Node: string: <PgQuery::String: sval: "|">>, defaction: :DEFELEM_UNSPEC, location: 24>>]>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: copy
SQL: COPY country FROM '/usr1/proj/bray/sql/country_data';
Fingerprint: a4a38d5fa0d3894c
Fingerprint Deparse: a4a38d5fa0d3894c
Deparse SQL: COPY country FROM '/usr1/proj/bray/sql/country_data'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: copy_stmt: <PgQuery::CopyStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "country", inh: true, relpersistence: "p", location: 5>, attlist: [], is_from: true, is_program: false, filename: "/usr1/proj/bray/sql/country_data", options: []>>, stmt_location: 0, stmt_len: 52>]>
--------END-------

-------BEGIN-------
Method: copy
SQL: COPY (SELECT * FROM country WHERE country_name LIKE 'A%') TO '/usr1/proj/bray/sql/a_list_countries.copy';
Fingerprint: 3849bb4f6937b0d1
Fingerprint Deparse: 3849bb4f6937b0d1
Deparse SQL: COPY (SELECT * FROM country WHERE country_name LIKE 'A%') TO '/usr1/proj/bray/sql/a_list_countries.copy'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: copy_stmt: <PgQuery::CopyStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 13>>, location: 13>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "country", inh: true, relpersistence: "p", location: 20>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_LIKE, name: [<PgQuery::Node: string: <PgQuery::String: sval: "~~">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "country_name">>], location: 34>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 52, sval: <PgQuery::String: sval: "A%">>>, location: 47>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, attlist: [], is_from: false, is_program: false, filename: "/usr1/proj/bray/sql/a_list_countries.copy", options: []>>, stmt_location: 0, stmt_len: 104>]>
--------END-------

-------BEGIN-------
Method: copy
SQL: COPY country TO PROGRAM 'gzip > /usr1/proj/bray/sql/country_data.gz';
Fingerprint: cb57a5434475c6d3
Fingerprint Deparse: cb57a5434475c6d3
Deparse SQL: COPY country TO PROGRAM 'gzip > /usr1/proj/bray/sql/country_data.gz'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: copy_stmt: <PgQuery::CopyStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "country", inh: true, relpersistence: "p", location: 5>, attlist: [], is_from: false, is_program: true, filename: "gzip > /usr1/proj/bray/sql/country_data.gz", options: []>>, stmt_location: 0, stmt_len: 68>]>
--------END-------

-------BEGIN-------
Method: create_access_method
SQL: CREATE ACCESS METHOD heptree TYPE INDEX HANDLER heptree_handler;
Fingerprint: 529d802653b9b8c1
Fingerprint Deparse: 529d802653b9b8c1
Deparse SQL: CREATE ACCESS METHOD heptree TYPE INDEX HANDLER heptree_handler
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_am_stmt: <PgQuery::CreateAmStmt: amname: "heptree", handler_name: [<PgQuery::Node: string: <PgQuery::String: sval: "heptree_handler">>], amtype: "i">>, stmt_location: 0, stmt_len: 63>]>
--------END-------

-------BEGIN-------
Method: create_aggregate
SQL: SELECT agg(col) FROM tab;
Fingerprint: 1626aa4ac331aa55
Fingerprint Deparse: 1626aa4ac331aa55
Deparse SQL: SELECT agg(col) FROM tab
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "agg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "col">>], location: 11>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tab", inh: true, relpersistence: "p", location: 21>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 24>]>
--------END-------

-------BEGIN-------
Method: create_cast
SQL: SELECT CAST(42 AS float8);
Fingerprint: 50fde20626009aba
Fingerprint Deparse: 50fde20626009aba
Deparse SQL: SELECT 42::float8
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 12, ival: <PgQuery::Integer: ival: 42>>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 18>, location: 7>>, location: 7>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 25>]>
--------END-------

-------BEGIN-------
Method: create_cast
SQL: INSERT INTO foo (f1) VALUES (42);
Fingerprint: 34683d88934e2fd8
Fingerprint Deparse: 34683d88934e2fd8
Deparse SQL: INSERT INTO foo (f1) VALUES (42)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "foo", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "f1", indirection: [], location: 17>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 29, ival: <PgQuery::Integer: ival: 42>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 32>]>
--------END-------

-------BEGIN-------
Method: create_cast
SQL: SELECT 2 + 4.0;
Fingerprint: 9c0866b3d00afc7b
Fingerprint Deparse: 9c0866b3d00afc7b
Deparse SQL: SELECT 2 + 4.0
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 7, ival: <PgQuery::Integer: ival: 2>>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 11, fval: <PgQuery::Float: fval: "4.0">>>, location: 9>>, location: 7>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 14>]>
--------END-------

-------BEGIN-------
Method: create_cast
SQL: SELECT CAST ( 2 AS numeric ) + 4.0;
Fingerprint: 9c0866b3d00afc7b
Fingerprint Deparse: 9c0866b3d00afc7b
Deparse SQL: SELECT 2::numeric + 4.0
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 14, ival: <PgQuery::Integer: ival: 2>>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "numeric">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>, location: 7>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 31, fval: <PgQuery::Float: fval: "4.0">>>, location: 29>>, location: 7>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: create_cast
SQL: CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT;
Fingerprint: 73ce941bd226a276
Fingerprint Deparse: 73ce941bd226a276
Deparse SQL: CREATE CAST (bigint AS int4) WITH FUNCTION int4(bigint) AS ASSIGNMENT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_cast_stmt: <PgQuery::CreateCastStmt: sourcetype: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 13>, targettype: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 23>, func: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "int4">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 48>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 48>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>, context: :COERCION_ASSIGNMENT, inout: false>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: create_collation
SQL: CREATE COLLATION french (locale = 'fr_FR.utf8');
Fingerprint: d9ace0b0ac2d31b4
Fingerprint Deparse: d9ace0b0ac2d31b4
Deparse SQL: CREATE COLLATION french (locale = 'fr_FR.utf8')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_COLLATION, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "french">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "locale", arg: <PgQuery::Node: string: <PgQuery::String: sval: "fr_FR.utf8">>, defaction: :DEFELEM_UNSPEC, location: 25>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 47>]>
--------END-------

-------BEGIN-------
Method: create_collation
SQL: CREATE COLLATION german_phonebook (provider = icu, locale = 'de-u-co-phonebk');
Fingerprint: d1d007581bf4a3a3
Fingerprint Deparse: d1d007581bf4a3a3
Deparse SQL: CREATE COLLATION german_phonebook (provider = icu, locale = 'de-u-co-phonebk')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_COLLATION, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "german_phonebook">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "provider", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "icu">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 46>>, defaction: :DEFELEM_UNSPEC, location: 35>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "locale", arg: <PgQuery::Node: string: <PgQuery::String: sval: "de-u-co-phonebk">>, defaction: :DEFELEM_UNSPEC, location: 51>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 78>]>
--------END-------

-------BEGIN-------
Method: create_collation
SQL: CREATE COLLATION german FROM "de_DE";
Fingerprint: 4f32cfd06f568a72
Fingerprint Deparse: 4f32cfd06f568a72
Deparse SQL: CREATE COLLATION german FROM "de_DE"
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_COLLATION, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "german">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "from", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "de_DE">>]>>, defaction: :DEFELEM_UNSPEC, location: 29>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: create_conversion
SQL: CREATE CONVERSION myconv FOR 'UTF8' TO 'LATIN1' FROM myfunc;
Fingerprint: b4433f4507e3384b
Fingerprint Deparse: b4433f4507e3384b
Deparse SQL: CREATE CONVERSION myconv FOR 'UTF8' TO 'LATIN1'FROM myfunc
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_conversion_stmt: <PgQuery::CreateConversionStmt: conversion_name: [<PgQuery::Node: string: <PgQuery::String: sval: "myconv">>], for_encoding_name: "UTF8", to_encoding_name: "LATIN1", func_name: [<PgQuery::Node: string: <PgQuery::String: sval: "myfunc">>], def: false>>, stmt_location: 0, stmt_len: 59>]>
--------END-------

-------BEGIN-------
Method: create_database
SQL: CREATE DATABASE lusiadas;
Fingerprint: e3554ae095450a76
Fingerprint Deparse: e3554ae095450a76
Deparse SQL: CREATE DATABASE lusiadas
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: createdb_stmt: <PgQuery::CreatedbStmt: dbname: "lusiadas", options: []>>, stmt_location: 0, stmt_len: 24>]>
--------END-------

-------BEGIN-------
Method: create_database
SQL: CREATE DATABASE sales OWNER salesapp TABLESPACE salesspace;
Fingerprint: 2c0b24cb5c057190
Fingerprint Deparse: 2c0b24cb5c057190
Deparse SQL: CREATE DATABASE sales OWNER salesapp TABLESPACE salesspace
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: createdb_stmt: <PgQuery::CreatedbStmt: dbname: "sales", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "owner", arg: <PgQuery::Node: string: <PgQuery::String: sval: "salesapp">>, defaction: :DEFELEM_UNSPEC, location: 22>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "tablespace", arg: <PgQuery::Node: string: <PgQuery::String: sval: "salesspace">>, defaction: :DEFELEM_UNSPEC, location: 37>>]>>, stmt_location: 0, stmt_len: 58>]>
--------END-------

-------BEGIN-------
Method: create_database
SQL: CREATE DATABASE music
    LOCALE 'sv_SE.utf8'
    TEMPLATE template0;
Fingerprint: ec5770bedea1ff72
Fingerprint Deparse: ec5770bedea1ff72
Deparse SQL: CREATE DATABASE music LOCALE "sv_SE.utf8" TEMPLATE template0
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: createdb_stmt: <PgQuery::CreatedbStmt: dbname: "music", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "locale", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sv_SE.utf8">>, defaction: :DEFELEM_UNSPEC, location: 26>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "template", arg: <PgQuery::Node: string: <PgQuery::String: sval: "template0">>, defaction: :DEFELEM_UNSPEC, location: 50>>]>>, stmt_location: 0, stmt_len: 68>]>
--------END-------

-------BEGIN-------
Method: create_database
SQL: CREATE DATABASE music2
    LOCALE 'sv_SE.iso885915'
    ENCODING LATIN9
    TEMPLATE template0;
Fingerprint: 34d4b6732d519440
Fingerprint Deparse: 34d4b6732d519440
Deparse SQL: CREATE DATABASE music2 LOCALE "sv_SE.iso885915" ENCODING latin9 TEMPLATE template0
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: createdb_stmt: <PgQuery::CreatedbStmt: dbname: "music2", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "locale", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sv_SE.iso885915">>, defaction: :DEFELEM_UNSPEC, location: 27>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "encoding", arg: <PgQuery::Node: string: <PgQuery::String: sval: "latin9">>, defaction: :DEFELEM_UNSPEC, location: 56>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "template", arg: <PgQuery::Node: string: <PgQuery::String: sval: "template0">>, defaction: :DEFELEM_UNSPEC, location: 76>>]>>, stmt_location: 0, stmt_len: 94>]>
--------END-------

-------BEGIN-------
Method: create_domain
SQL: INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false));
Fingerprint: 6a99321bc8993edd
Fingerprint Deparse: 6a99321bc8993edd
Deparse SQL: INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tab", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "domcol", indirection: [], location: 17>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "domcol">>], location: 41>>, location: 41>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tab", inh: true, relpersistence: "p", location: 53>>], where_clause: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 63, boolval: <PgQuery::Boolean: boolval: false>>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 33>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 70>]>
--------END-------

-------BEGIN-------
Method: create_domain
SQL: CREATE DOMAIN us_postal_code AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE us_snail_addy (
  address_id SERIAL PRIMARY KEY,
  street1 TEXT NOT NULL,
  street2 TEXT,
  street3 TEXT,
  city TEXT NOT NULL,
  postal us_postal_code NOT NULL
);
Fingerprint: 0ff6a04812a326c2
Fingerprint Deparse: 0ff6a04812a326c2
Deparse SQL: CREATE DOMAIN us_postal_code AS text CHECK (value ~ E'^\\d{5}$' OR value ~ E'^\\d{5}-\\d{4}$'); CREATE TABLE us_snail_addy (address_id serial PRIMARY KEY, street1 text NOT NULL, street2 text, street3 text, city text NOT NULL, postal us_postal_code NOT NULL)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_domain_stmt: <PgQuery::CreateDomainStmt: domainname: [<PgQuery::Node: string: <PgQuery::String: sval: "us_postal_code">>], type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 32>, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "", deferrable: false, initdeferred: false, location: 37, is_no_inherit: false, raw_expr: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :OR_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "~">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "value">>], location: 47>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, sval: <PgQuery::String: sval: "^\d{5}$">>>, location: 53>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "~">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "value">>], location: 68>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 76, sval: <PgQuery::String: sval: "^\d{5}-\d{4}$">>>, location: 74>>], location: 65>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>]>>, stmt_location: 0, stmt_len: 93>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "us_snail_addy", inh: true, relpersistence: "p", location: 109>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "address_id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "serial">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 138>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "", deferrable: false, initdeferred: false, location: 145, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 127>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "street1", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 168>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 173, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 160>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "street2", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 193>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 185>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "street3", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 209>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 201>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "city", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 222>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 227, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 217>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "postal", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "us_postal_code">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 246>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 261, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 239>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 94, stmt_len: 177>]>
--------END-------

-------BEGIN-------
Method: create_event_trigger
SQL: CREATE OR REPLACE FUNCTION abort_any_command()
  RETURNS event_trigger
 LANGUAGE plpgsql
  AS $$
BEGIN
  RAISE EXCEPTION 'command % is disabled', tg_tag;
END;
$$;

CREATE EVENT TRIGGER abort_ddl ON ddl_command_start
   EXECUTE FUNCTION abort_any_command();
Fingerprint: 7e10c566289822d6
Fingerprint Deparse: 7e10c566289822d6
Deparse SQL: CREATE OR REPLACE FUNCTION abort_any_command() RETURNS event_trigger LANGUAGE plpgsql AS $$
BEGIN
  RAISE EXCEPTION 'command % is disabled', tg_tag;
END;
$$; CREATE EVENT TRIGGER abort_ddl ON ddl_command_start EXECUTE FUNCTION abort_any_command()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: true, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "abort_any_command">>], parameters: [], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "event_trigger">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 57>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "plpgsql">>, defaction: :DEFELEM_UNSPEC, location: 72>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "
BEGIN
  RAISE EXCEPTION 'command % is disabled', tg_tag;
END;
">>]>>, defaction: :DEFELEM_UNSPEC, location: 91>>]>>, stmt_location: 0, stmt_len: 161>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_event_trig_stmt: <PgQuery::CreateEventTrigStmt: trigname: "abort_ddl", eventname: "ddl_command_start", whenclause: [], funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "abort_any_command">>]>>, stmt_location: 162, stmt_len: 93>]>
--------END-------

-------BEGIN-------
Method: create_extension
SQL: CREATE EXTENSION hstore;
Fingerprint: fc13f60c105e1915
Fingerprint Deparse: fc13f60c105e1915
Deparse SQL: CREATE EXTENSION hstore
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_extension_stmt: <PgQuery::CreateExtensionStmt: extname: "hstore", if_not_exists: false, options: []>>, stmt_location: 0, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: create_foreign_data_wrapper
SQL: CREATE FOREIGN DATA WRAPPER dummy;
Fingerprint: 40ac5677ed9d61c7
Fingerprint Deparse: 40ac5677ed9d61c7
Deparse SQL: CREATE FOREIGN DATA WRAPPER dummy
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_fdw_stmt: <PgQuery::CreateFdwStmt: fdwname: "dummy", func_options: [], options: []>>, stmt_location: 0, stmt_len: 33>]>
--------END-------

-------BEGIN-------
Method: create_foreign_data_wrapper
SQL: CREATE FOREIGN DATA WRAPPER file HANDLER file_fdw_handler;
Fingerprint: c4af25b74015eeec
Fingerprint Deparse: c4af25b74015eeec
Deparse SQL: CREATE FOREIGN DATA WRAPPER file HANDLER file_fdw_handler
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_fdw_stmt: <PgQuery::CreateFdwStmt: fdwname: "file", func_options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "handler", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "file_fdw_handler">>]>>, defaction: :DEFELEM_UNSPEC, location: 33>>], options: []>>, stmt_location: 0, stmt_len: 57>]>
--------END-------

-------BEGIN-------
Method: create_foreign_data_wrapper
SQL: CREATE FOREIGN DATA WRAPPER mywrapper
    OPTIONS (debug 'true');
Fingerprint: c0092cd5693b3b97
Fingerprint Deparse: c0092cd5693b3b97
Deparse SQL: CREATE FOREIGN DATA WRAPPER mywrapper OPTIONS (debug 'true')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_fdw_stmt: <PgQuery::CreateFdwStmt: fdwname: "mywrapper", func_options: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "debug", arg: <PgQuery::Node: string: <PgQuery::String: sval: "true">>, defaction: :DEFELEM_UNSPEC, location: 51>>]>>, stmt_location: 0, stmt_len: 64>]>
--------END-------

-------BEGIN-------
Method: create_foreign_table
SQL: CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;
Fingerprint: 0ff02ebf727dbb0c
Fingerprint Deparse: 0ff02ebf727dbb0c
Deparse SQL: CREATE FOREIGN TABLE films (code char(5) NOT NULL, title varchar(40) NOT NULL, did int NOT NULL, date_prod date, kind varchar(10), len interval hour to minute) SERVER film_server
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_foreign_table_stmt: <PgQuery::CreateForeignTableStmt: base_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 21>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "code", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bpchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 50, ival: <PgQuery::Integer: ival: 5>>>], typemod: -1, array_bounds: [], location: 45>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 53, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 33>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "title", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 87, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 79>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 91, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 67>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 117>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 125, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 105>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "date_prod", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 151>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 139>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "kind", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 181, ival: <PgQuery::Integer: ival: 10>>>], typemod: -1, array_bounds: [], location: 173>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 161>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "len", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "interval">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 211, ival: <PgQuery::Integer: ival: 3072>>>], typemod: -1, array_bounds: [], location: 202>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 190>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>, servername: "film_server", options: []>>, stmt_location: 0, stmt_len: 246>]>
--------END-------

-------BEGIN-------
Method: create_foreign_table
SQL: CREATE FOREIGN TABLE measurement_y2016m07
    PARTITION OF measurement FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
    SERVER server_07;
Fingerprint: 22ebb02601cc6610
Fingerprint Deparse: 22ebb02601cc6610
Deparse SQL: CREATE FOREIGN TABLE measurement_y2016m07 PARTITION OF measurement FOR VALUES FROM ('2016-07-01') TO ('2016-08-01') SERVER server_07
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_foreign_table_stmt: <PgQuery::CreateForeignTableStmt: base_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_y2016m07", inh: true, relpersistence: "p", location: 21>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement", inh: true, relpersistence: "p", location: 59>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 88, sval: <PgQuery::String: sval: "2016-07-01">>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 106, sval: <PgQuery::String: sval: "2016-08-01">>>], location: 82>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>, servername: "server_07", options: []>>, stmt_location: 0, stmt_len: 140>]>
--------END-------

-------BEGIN-------
Method: create_function
SQL: CREATE FUNCTION add(integer, integer) RETURNS integer
    AS 'select $1 + $2;'
    LANGUAGE SQL
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;
Fingerprint: 9dd45afb539135ed
Fingerprint Deparse: 9dd45afb539135ed
Deparse SQL: CREATE FUNCTION add(int, int) RETURNS int AS $$select $1 + $2;$$ LANGUAGE sql IMMUTABLE RETURNS NULL ON NULL INPUT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "add">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 29>, mode: :FUNC_PARAM_DEFAULT>>], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 46>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "select $1 + $2;">>]>>, defaction: :DEFELEM_UNSPEC, location: 58>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sql">>, defaction: :DEFELEM_UNSPEC, location: 83>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "volatility", arg: <PgQuery::Node: string: <PgQuery::String: sval: "immutable">>, defaction: :DEFELEM_UNSPEC, location: 100>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "strict", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 114>>]>>, stmt_location: 0, stmt_len: 140>]>
--------END-------

-------BEGIN-------
Method: create_function
SQL: CREATE OR REPLACE FUNCTION increment(i integer) RETURNS integer AS $$
        BEGIN
                RETURN i + 1;
        END;
$$ LANGUAGE plpgsql;
Fingerprint: fc19d6812ce71a79
Fingerprint Deparse: fc19d6812ce71a79
Deparse SQL: CREATE OR REPLACE FUNCTION increment(i int) RETURNS int AS $$
        BEGIN
                RETURN i + 1;
        END;
$$ LANGUAGE plpgsql
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: true, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "increment">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "i", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 39>, mode: :FUNC_PARAM_DEFAULT>>], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 56>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "
        BEGIN
                RETURN i + 1;
        END;
">>]>>, defaction: :DEFELEM_UNSPEC, location: 64>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "plpgsql">>, defaction: :DEFELEM_UNSPEC, location: 130>>]>>, stmt_location: 0, stmt_len: 146>]>
--------END-------

-------BEGIN-------
Method: create_function
SQL: CREATE FUNCTION dup(in int, out f1 int, out f2 text)
    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$
    LANGUAGE SQL;

SELECT * FROM dup(42);
Fingerprint: af048513ed63eb1a
Fingerprint Deparse: af048513ed63eb1a
Deparse SQL: CREATE FUNCTION dup(IN int, OUT f1 int, OUT f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE sql; SELECT * FROM dup(42)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "dup">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 23>, mode: :FUNC_PARAM_IN>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "f1", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 35>, mode: :FUNC_PARAM_OUT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "f2", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 47>, mode: :FUNC_PARAM_OUT>>], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: " SELECT $1, CAST($1 AS text) || ' is text' ">>]>>, defaction: :DEFELEM_UNSPEC, location: 57>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sql">>, defaction: :DEFELEM_UNSPEC, location: 112>>]>>, stmt_location: 0, stmt_len: 124>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 134>>, location: 134>>], from_clause: [<PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: false, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "dup">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 145, ival: <PgQuery::Integer: ival: 42>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 141>>, <PgQuery::Node: >]>>], coldeflist: []>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 125, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: create_function
SQL: CREATE TYPE dup_result AS (f1 int, f2 text);

CREATE FUNCTION dup(int) RETURNS dup_result
    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$
    LANGUAGE SQL;

SELECT * FROM dup(42);
Fingerprint: 7b583015a6396740
Fingerprint Deparse: 7b583015a6396740
Deparse SQL: CREATE TYPE dup_result AS (f1 int, f2 text); CREATE FUNCTION dup(int) RETURNS dup_result AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE sql; SELECT * FROM dup(42)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: composite_type_stmt: <PgQuery::CompositeTypeStmt: typevar: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "dup_result", inh: false, relpersistence: "p", location: 12>, coldeflist: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "f1", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 30>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 27>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "f2", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 38>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 35>>]>>, stmt_location: 0, stmt_len: 43>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "dup">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 66>, mode: :FUNC_PARAM_DEFAULT>>], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "dup_result">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 79>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: " SELECT $1, CAST($1 AS text) || ' is text' ">>]>>, defaction: :DEFELEM_UNSPEC, location: 94>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sql">>, defaction: :DEFELEM_UNSPEC, location: 149>>]>>, stmt_location: 44, stmt_len: 117>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 171>>, location: 171>>], from_clause: [<PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: false, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "dup">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 182, ival: <PgQuery::Integer: ival: 42>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 178>>, <PgQuery::Node: >]>>], coldeflist: []>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 162, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: create_function
SQL: CREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text)
    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$
    LANGUAGE SQL;

SELECT * FROM dup(42);
Fingerprint: 5ae5d9c8ac8715bc
Fingerprint Deparse: 5ae5d9c8ac8715bc
Deparse SQL: CREATE FUNCTION dup(int) RETURNS TABLE (f1 int, f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE sql; SELECT * FROM dup(42)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "dup">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "f1", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 42>, mode: :FUNC_PARAM_TABLE>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "f2", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 50>, mode: :FUNC_PARAM_TABLE>>], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "record">>], type_oid: 0, setof: true, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 33>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: " SELECT $1, CAST($1 AS text) || ' is text' ">>]>>, defaction: :DEFELEM_UNSPEC, location: 60>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sql">>, defaction: :DEFELEM_UNSPEC, location: 115>>]>>, stmt_location: 0, stmt_len: 127>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 137>>, location: 137>>], from_clause: [<PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: false, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "dup">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 148, ival: <PgQuery::Integer: ival: 42>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 144>>, <PgQuery::Node: >]>>], coldeflist: []>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 128, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: create_function
SQL: CREATE FUNCTION check_password(uname TEXT, pass TEXT)
RETURNS BOOLEAN AS $$
DECLARE passed BOOLEAN;
BEGIN
        SELECT  (pwd = $2) INTO passed
        FROM    pwds
        WHERE   username = $1;

        RETURN passed;
END;
$$  LANGUAGE plpgsql
    SECURITY DEFINER
    -- Set a secure search_path: trusted schema(s), then 'pg_temp'.
    SET search_path = admin, pg_temp;
Fingerprint: bfe78d7bf1ef7ab7
Fingerprint Deparse: bfe78d7bf1ef7ab7
Deparse SQL: CREATE FUNCTION check_password(uname text, pass text) RETURNS boolean AS $$
DECLARE passed BOOLEAN;
BEGIN
        SELECT  (pwd = $2) INTO passed
        FROM    pwds
        WHERE   username = $1;

        RETURN passed;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path TO admin, pg_temp
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_password">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "uname", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "pass", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 48>, mode: :FUNC_PARAM_DEFAULT>>], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bool">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 62>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "
DECLARE passed BOOLEAN;
BEGIN
        SELECT  (pwd = $2) INTO passed
        FROM    pwds
        WHERE   username = $1;

        RETURN passed;
END;
">>]>>, defaction: :DEFELEM_UNSPEC, location: 70>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "plpgsql">>, defaction: :DEFELEM_UNSPEC, location: 230>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "security", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 251>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "set", arg: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "search_path", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 358, sval: <PgQuery::String: sval: "admin">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 365, sval: <PgQuery::String: sval: "pg_temp">>>], is_local: false>>, defaction: :DEFELEM_UNSPEC, location: 340>>]>>, stmt_location: 0, stmt_len: 372>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE UNIQUE INDEX title_idx ON films (title);
Fingerprint: 90986553183d7bc7
Fingerprint Deparse: 90986553183d7bc7
Deparse SQL: CREATE UNIQUE INDEX title_idx ON films USING btree (title)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "title_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 33>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "title", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: true, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 46>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE UNIQUE INDEX title_idx ON films (title) INCLUDE (director, rating);
Fingerprint: a96bc72350ee46bc
Fingerprint Deparse: a96bc72350ee46bc
Deparse SQL: CREATE UNIQUE INDEX title_idx ON films USING btree (title) INCLUDE (director, rating)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "title_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 33>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "title", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "director", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>, <PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "rating", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: true, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 73>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX ON films ((lower(title)));
Fingerprint: c7aa9ffd1645b622
Fingerprint Deparse: c7aa9ffd1645b622
Deparse SQL: CREATE INDEX ON films USING btree (lower(title))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 16>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "", expr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "lower">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "title">>], location: 30>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 24>>, indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX title_idx_german ON films (title COLLATE "de_DE");
Fingerprint: d8273962a3aef72a
Fingerprint Deparse: d8273962a3aef72a
Deparse SQL: CREATE INDEX title_idx_german ON films USING btree (title COLLATE "de_DE")
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "title_idx_german", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 33>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "title", indexcolname: "", collation: [<PgQuery::Node: string: <PgQuery::String: sval: "de_DE">>], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 62>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);
Fingerprint: 44defdfc94d1bcdd
Fingerprint Deparse: 44defdfc94d1bcdd
Deparse SQL: CREATE INDEX title_idx_nulls_low ON films USING btree (title NULLS FIRST)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "title_idx_nulls_low", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 36>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "title", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_FIRST>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 61>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE UNIQUE INDEX title_idx ON films (title) WITH (fillfactor = 70);
Fingerprint: 5c14dd6376abf3cb
Fingerprint Deparse: 5c14dd6376abf3cb
Deparse SQL: CREATE UNIQUE INDEX title_idx ON films USING btree (title) WITH (fillfactor=70)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "title_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 33>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "title", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "fillfactor", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 70>>, defaction: :DEFELEM_UNSPEC, location: 53>>], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: true, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX gin_idx ON documents_table USING GIN (locations) WITH (fastupdate = off);
Fingerprint: b92fcaf10a7ed165
Fingerprint Deparse: b92fcaf10a7ed165
Deparse SQL: CREATE INDEX gin_idx ON documents_table USING gin (locations) WITH (fastupdate=off)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "gin_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "documents_table", inh: true, relpersistence: "p", location: 24>, access_method: "gin", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "locations", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "fastupdate", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "off">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 81>>, defaction: :DEFELEM_UNSPEC, location: 68>>], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 85>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX code_idx ON films (code) TABLESPACE indexspace;
Fingerprint: 5d7da463e1a71a7b
Fingerprint Deparse: 5d7da463e1a71a7b
Deparse SQL: CREATE INDEX code_idx ON films USING btree (code) TABLESPACE indexspace
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "code_idx", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 25>, access_method: "btree", table_space: "indexspace", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "code", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 59>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX pointloc
    ON points USING gist (box(location,location));
SELECT * FROM points
    WHERE box(location,location)  '(0,0),(1,1)'::box;
Fingerprint: b2d60c9ee960a990
Fingerprint Deparse: b2d60c9ee960a990
Deparse SQL: CREATE INDEX pointloc ON points USING gist (box(location, location)); SELECT * FROM points WHERE '(0,0),(1,1)'::box(location, location)::box
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "pointloc", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "points", inh: true, relpersistence: "p", location: 29>, access_method: "gist", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "", expr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 52>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 61>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 48>>, indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: false, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 71>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 80>>, location: 80>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "points", inh: true, relpersistence: "p", location: 87>>], where_clause: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 128, sval: <PgQuery::String: sval: "(0,0),(1,1)">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 108>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 117>>], typemod: -1, array_bounds: [], location: 104>, location: -1>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 143>, location: 141>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 72, stmt_len: 74>]>
--------END-------

-------BEGIN-------
Method: create_index
SQL: CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table (quantity);
Fingerprint: eb34601cdd3b4176
Fingerprint Deparse: eb34601cdd3b4176
Deparse SQL: CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table USING btree (quantity)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: index_stmt: <PgQuery::IndexStmt: idxname: "sales_quantity_index", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "sales_table", inh: true, relpersistence: "p", location: 50>, access_method: "btree", table_space: "", index_params: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "quantity", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], index_including_params: [], options: [], exclude_op_names: [], idxcomment: "", index_oid: 0, old_node: 0, old_create_subid: 0, old_first_relfilenode_subid: 0, unique: false, nulls_not_distinct: false, primary: false, isconstraint: false, deferrable: false, initdeferred: false, transformed: false, concurrent: true, if_not_exists: false, reset_default_tblspc: false>>, stmt_location: 0, stmt_len: 72>]>
--------END-------

-------BEGIN-------
Method: create_language
SQL: CREATE LANGUAGE plperl;
Fingerprint: 26662ab9b7f67df7
Fingerprint Deparse: 26662ab9b7f67df7
Deparse SQL: CREATE EXTENSION plperl
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_extension_stmt: <PgQuery::CreateExtensionStmt: extname: "plperl", if_not_exists: false, options: []>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: create_language
SQL: CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
Fingerprint: 383f2bf7affd0c40
Fingerprint Deparse: 383f2bf7affd0c40
Deparse SQL: CREATE FUNCTION plsample_call_handler() RETURNS language_handler AS $$$libdir/plsample$$ LANGUAGE c; CREATE LANGUAGE plsample HANDLER plsample_call_handler
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "plsample_call_handler">>], parameters: [], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "language_handler">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 48>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "$libdir/plsample">>]>>, defaction: :DEFELEM_UNSPEC, location: 69>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "c">>, defaction: :DEFELEM_UNSPEC, location: 95>>]>>, stmt_location: 0, stmt_len: 105>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_plang_stmt: <PgQuery::CreatePLangStmt: replace: false, plname: "plsample", plhandler: [<PgQuery::Node: string: <PgQuery::String: sval: "plsample_call_handler">>], plinline: [], plvalidator: [], pltrusted: false>>, stmt_location: 106, stmt_len: 59>]>
--------END-------

-------BEGIN-------
Method: create_operator
SQL: CREATE OPERATOR === (
    LEFTARG = box,
    RIGHTARG = box,
    FUNCTION = area_equal_function,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = area_restriction_function,
    JOIN = area_join_function,
    HASHES, MERGES
);
Fingerprint: e5ea5b267ad3ddfa
Fingerprint Deparse: e5ea5b267ad3ddfa
Deparse SQL: CREATE OPERATOR === (leftarg = box, rightarg = box, function = area_equal_function, commutator = ===, negator = !==, restrict = area_restriction_function, "join" = area_join_function, hashes, merges)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_OPERATOR, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "===">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "leftarg", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 36>>, defaction: :DEFELEM_UNSPEC, location: 26>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "rightarg", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 56>>, defaction: :DEFELEM_UNSPEC, location: 45>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "function", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "area_equal_function">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 76>>, defaction: :DEFELEM_UNSPEC, location: 65>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "commutator", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "===">>]>>, defaction: :DEFELEM_UNSPEC, location: 101>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "negator", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "!==">>]>>, defaction: :DEFELEM_UNSPEC, location: 123>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "restrict", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "area_restriction_function">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 153>>, defaction: :DEFELEM_UNSPEC, location: 142>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "join", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "area_join_function">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 191>>, defaction: :DEFELEM_UNSPEC, location: 184>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "hashes", defaction: :DEFELEM_UNSPEC, location: 215>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "merges", defaction: :DEFELEM_UNSPEC, location: 223>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 231>]>
--------END-------

-------BEGIN-------
Method: create_procedure
SQL: CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$;

CALL insert_data(1, 2);
Fingerprint: e945360eb2f9fcc1
Fingerprint Deparse: e945360eb2f9fcc1
Deparse SQL: CREATE PROCEDURE insert_data(a int, b int) LANGUAGE sql AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$; CALL insert_data(1, 2)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: true, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_data">>], parameters: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "a", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>, mode: :FUNC_PARAM_DEFAULT>>, <PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "b", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 42>, mode: :FUNC_PARAM_DEFAULT>>], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sql">>, defaction: :DEFELEM_UNSPEC, location: 51>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
">>]>>, defaction: :DEFELEM_UNSPEC, location: 64>>]>>, stmt_location: 0, stmt_len: 128>, <PgQuery::RawStmt: stmt: <PgQuery::Node: call_stmt: <PgQuery::CallStmt: funccall: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_data">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 148, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 151, ival: <PgQuery::Integer: ival: 2>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 136>, outargs: []>>, stmt_location: 129, stmt_len: 24>]>
--------END-------

-------BEGIN-------
Method: create_publication
SQL: CREATE PUBLICATION mypublication FOR TABLE users, departments;
Fingerprint: 1deb4b2f571add86
Fingerprint Deparse: 1deb4b2f571add86
Deparse SQL: CREATE PUBLICATION mypublication FOR TABLE users, TABLE departments
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_publication_stmt: <PgQuery::CreatePublicationStmt: pubname: "mypublication", options: [], pubobjects: [<PgQuery::Node: publication_obj_spec: <PgQuery::PublicationObjSpec: pubobjtype: :PUBLICATIONOBJ_TABLE, name: "", pubtable: <PgQuery::PublicationTable: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "users", inh: true, relpersistence: "p", location: 43>, columns: []>, location: 0>>, <PgQuery::Node: publication_obj_spec: <PgQuery::PublicationObjSpec: pubobjtype: :PUBLICATIONOBJ_TABLE, name: "", pubtable: <PgQuery::PublicationTable: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "departments", inh: true, relpersistence: "p", location: 50>, columns: []>, location: 50>>], for_all_tables: false>>, stmt_location: 0, stmt_len: 61>]>
--------END-------

-------BEGIN-------
Method: create_publication
SQL: CREATE PUBLICATION alltables FOR ALL TABLES;
Fingerprint: 728f21b807fdfb9f
Fingerprint Deparse: 728f21b807fdfb9f
Deparse SQL: CREATE PUBLICATION alltables FOR ALL TABLES
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_publication_stmt: <PgQuery::CreatePublicationStmt: pubname: "alltables", options: [], pubobjects: [], for_all_tables: true>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: create_publication
SQL: CREATE PUBLICATION insert_only FOR TABLE mydata
    WITH (publish = 'insert');
Fingerprint: 1d6a8fc0bbbe2be9
Fingerprint Deparse: 1d6a8fc0bbbe2be9
Deparse SQL: CREATE PUBLICATION insert_only FOR TABLE mydata WITH (publish = 'insert')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_publication_stmt: <PgQuery::CreatePublicationStmt: pubname: "insert_only", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "publish", arg: <PgQuery::Node: string: <PgQuery::String: sval: "insert">>, defaction: :DEFELEM_UNSPEC, location: 58>>], pubobjects: [<PgQuery::Node: publication_obj_spec: <PgQuery::PublicationObjSpec: pubobjtype: :PUBLICATIONOBJ_TABLE, name: "", pubtable: <PgQuery::PublicationTable: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "mydata", inh: true, relpersistence: "p", location: 41>, columns: []>, location: 0>>], for_all_tables: false>>, stmt_location: 0, stmt_len: 77>]>
--------END-------

-------BEGIN-------
Method: create_role
SQL: CREATE ROLE jonathan LOGIN;
Fingerprint: 60752435c759c579
Fingerprint Deparse: 60752435c759c579
Deparse SQL: CREATE ROLE jonathan WITH LOGIN
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_role_stmt: <PgQuery::CreateRoleStmt: stmt_type: :ROLESTMT_ROLE, role: "jonathan", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "canlogin", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 21>>]>>, stmt_location: 0, stmt_len: 26>]>
--------END-------

-------BEGIN-------
Method: create_role
SQL: CREATE USER davide WITH PASSWORD 'jw8s0F4';
Fingerprint: 42a651e792df2f89
Fingerprint Deparse: 42a651e792df2f89
Deparse SQL: CREATE USER davide WITH PASSWORD 'jw8s0F4'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_role_stmt: <PgQuery::CreateRoleStmt: stmt_type: :ROLESTMT_USER, role: "davide", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "password", arg: <PgQuery::Node: string: <PgQuery::String: sval: "jw8s0F4">>, defaction: :DEFELEM_UNSPEC, location: 24>>]>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: create_role
SQL: CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01';
Fingerprint: 6b883fafb43d4061
Fingerprint Deparse: 6b883fafb43d4061
Deparse SQL: CREATE ROLE miriam WITH LOGIN PASSWORD 'jw8s0F4' VALID UNTIL '2005-01-01'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_role_stmt: <PgQuery::CreateRoleStmt: stmt_type: :ROLESTMT_ROLE, role: "miriam", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "canlogin", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 24>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "password", arg: <PgQuery::Node: string: <PgQuery::String: sval: "jw8s0F4">>, defaction: :DEFELEM_UNSPEC, location: 30>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "validUntil", arg: <PgQuery::Node: string: <PgQuery::String: sval: "2005-01-01">>, defaction: :DEFELEM_UNSPEC, location: 49>>]>>, stmt_location: 0, stmt_len: 73>]>
--------END-------

-------BEGIN-------
Method: create_role
SQL: CREATE ROLE admin WITH CREATEDB CREATEROLE;
Fingerprint: 5df72daa38b2175f
Fingerprint Deparse: 5df72daa38b2175f
Deparse SQL: CREATE ROLE admin WITH CREATEDB CREATEROLE
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_role_stmt: <PgQuery::CreateRoleStmt: stmt_type: :ROLESTMT_ROLE, role: "admin", options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "createdb", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 23>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "createrole", arg: <PgQuery::Node: boolean: <PgQuery::Boolean: boolval: true>>, defaction: :DEFELEM_UNSPEC, location: 32>>]>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: create_rule
SQL: CREATE RULE "_RETURN" AS
    ON SELECT TO t1
    DO INSTEAD
        SELECT * FROM t2;

CREATE RULE "_RETURN" AS
    ON SELECT TO t2
    DO INSTEAD
        SELECT * FROM t1;

SELECT * FROM t1;
Fingerprint: db1dd88839112346
Fingerprint Deparse: db1dd88839112346
Deparse SQL: CREATE RULE "_RETURN" AS ON SELECT TO t1 DO INSTEAD SELECT * FROM t2; CREATE RULE "_RETURN" AS ON SELECT TO t2 DO INSTEAD SELECT * FROM t1; SELECT * FROM t1
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rule_stmt: <PgQuery::RuleStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 42>, rulename: "_RETURN", event: :CMD_SELECT, instead: true, actions: [<PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 75>>, location: 75>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 82>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>], replace: false>>, stmt_location: 0, stmt_len: 84>, <PgQuery::RawStmt: stmt: <PgQuery::Node: rule_stmt: <PgQuery::RuleStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 129>, rulename: "_RETURN", event: :CMD_SELECT, instead: true, actions: [<PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 162>>, location: 162>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 169>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>], replace: false>>, stmt_location: 85, stmt_len: 86>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 181>>, location: 181>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 188>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 172, stmt_len: 18>]>
--------END-------

-------BEGIN-------
Method: create_rule
SQL: CREATE RULE notify_me AS ON UPDATE TO mytable DO ALSO NOTIFY mytable;

UPDATE mytable SET name = 'foo' WHERE id = 42;
Fingerprint: dab790a251dc09f3
Fingerprint Deparse: dab790a251dc09f3
Deparse SQL: CREATE RULE notify_me AS ON UPDATE TO mytable DO NOTIFY mytable; UPDATE mytable SET name = 'foo' WHERE id = 42
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: rule_stmt: <PgQuery::RuleStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "mytable", inh: true, relpersistence: "p", location: 38>, rulename: "notify_me", event: :CMD_UPDATE, instead: false, actions: [<PgQuery::Node: notify_stmt: <PgQuery::NotifyStmt: conditionname: "mytable", payload: "">>], replace: false>>, stmt_location: 0, stmt_len: 68>, <PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "mytable", inh: true, relpersistence: "p", location: 78>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "name", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 97, sval: <PgQuery::String: sval: "foo">>>, location: 90>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 109>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 114, ival: <PgQuery::Integer: ival: 42>>>, location: 112>>, from_clause: [], returning_list: []>>, stmt_location: 69, stmt_len: 47>]>
--------END-------

-------BEGIN-------
Method: create_schema
SQL: CREATE SCHEMA myschema;
Fingerprint: 666ef3bf1ed1b97e
Fingerprint Deparse: 666ef3bf1ed1b97e
Deparse SQL: CREATE SCHEMA myschema
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_schema_stmt: <PgQuery::CreateSchemaStmt: schemaname: "myschema", schema_elts: [], if_not_exists: false>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: create_schema
SQL: CREATE SCHEMA AUTHORIZATION joe;
Fingerprint: 56353d20c0d500a2
Fingerprint Deparse: 56353d20c0d500a2
Deparse SQL: CREATE SCHEMA AUTHORIZATION joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_schema_stmt: <PgQuery::CreateSchemaStmt: schemaname: "", authrole: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 28>, schema_elts: [], if_not_exists: false>>, stmt_location: 0, stmt_len: 31>]>
--------END-------

-------BEGIN-------
Method: create_schema
SQL: CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;
Fingerprint: 066c74fd3c5aa0a1
Fingerprint Deparse: 066c74fd3c5aa0a1
Deparse SQL: CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_schema_stmt: <PgQuery::CreateSchemaStmt: schemaname: "test", authrole: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 47>, schema_elts: [], if_not_exists: true>>, stmt_location: 0, stmt_len: 50>]>
--------END-------

-------BEGIN-------
Method: create_schema
SQL: CREATE SCHEMA hollywood
    CREATE TABLE films (title text, release date, awards text[])
    CREATE VIEW winners AS
        SELECT title, release FROM films WHERE awards IS NOT NULL;
Fingerprint: 66494479158f1cd6
Fingerprint Deparse: 66494479158f1cd6
Deparse SQL: CREATE SCHEMA hollywood CREATE TABLE films (title text, release date, awards text[]) CREATE VIEW winners AS SELECT title, release FROM films WHERE awards IS NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_schema_stmt: <PgQuery::CreateSchemaStmt: schemaname: "hollywood", schema_elts: [<PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 41>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "title", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 54>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 48>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "release", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 68>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 60>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "awards", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [<PgQuery::Node: integer: <PgQuery::Integer: ival: -1>>], location: 81>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 74>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "winners", inh: true, relpersistence: "p", location: 105>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "title">>], location: 131>>, location: 131>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "release">>], location: 138>>, location: 138>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 151>>], where_clause: <PgQuery::Node: null_test: <PgQuery::NullTest: arg: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "awards">>], location: 163>>, nulltesttype: :IS_NOT_NULL, argisrow: false, location: 170>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>], if_not_exists: false>>, stmt_location: 0, stmt_len: 181>]>
--------END-------

-------BEGIN-------
Method: create_schema
SQL: CREATE SCHEMA hollywood;
CREATE TABLE hollywood.films (title text, release date, awards text[]);
CREATE VIEW hollywood.winners AS
    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;
Fingerprint: 064bb6d676df5bc6
Fingerprint Deparse: 064bb6d676df5bc6
Deparse SQL: CREATE SCHEMA hollywood; CREATE TABLE hollywood.films (title text, release date, awards text[]); CREATE VIEW hollywood.winners AS SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_schema_stmt: <PgQuery::CreateSchemaStmt: schemaname: "hollywood", schema_elts: [], if_not_exists: false>>, stmt_location: 0, stmt_len: 23>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "hollywood", relname: "films", inh: true, relpersistence: "p", location: 38>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "title", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 55>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "release", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 75>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 67>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "awards", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [<PgQuery::Node: integer: <PgQuery::Integer: ival: -1>>], location: 88>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 81>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 24, stmt_len: 71>, <PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "hollywood", relname: "winners", inh: true, relpersistence: "p", location: 109>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "title">>], location: 141>>, location: 141>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "release">>], location: 148>>, location: 148>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "hollywood", relname: "films", inh: true, relpersistence: "p", location: 161>>], where_clause: <PgQuery::Node: null_test: <PgQuery::NullTest: arg: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "awards">>], location: 183>>, nulltesttype: :IS_NOT_NULL, argisrow: false, location: 190>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>, stmt_location: 96, stmt_len: 105>]>
--------END-------

-------BEGIN-------
Method: create_sequence
SQL: SELECT * FROM name;
Fingerprint: 160197502747d709
Fingerprint Deparse: 160197502747d709
Deparse SQL: SELECT * FROM name
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "name", inh: true, relpersistence: "p", location: 14>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 18>]>
--------END-------

-------BEGIN-------
Method: create_sequence
SQL: CREATE SEQUENCE serial START 101;
Fingerprint: 1f49a9389d358bb4
Fingerprint Deparse: 1f49a9389d358bb4
Deparse SQL: CREATE SEQUENCE serial START 101
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_seq_stmt: <PgQuery::CreateSeqStmt: sequence: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "serial", inh: true, relpersistence: "p", location: 16>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "start", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 101>>, defaction: :DEFELEM_UNSPEC, location: 23>>], owner_id: 0, for_identity: false, if_not_exists: false>>, stmt_location: 0, stmt_len: 32>]>
--------END-------

-------BEGIN-------
Method: create_sequence
SQL: INSERT INTO distributors VALUES (nextval('serial'), 'nothing');
Fingerprint: 4ca72b76fe5e2618
Fingerprint Deparse: 4ca72b76fe5e2618
Deparse SQL: INSERT INTO distributors VALUES (nextval('serial'), 'nothing')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "nextval">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 41, sval: <PgQuery::String: sval: "serial">>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 33>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 52, sval: <PgQuery::String: sval: "nothing">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 62>]>
--------END-------

-------BEGIN-------
Method: create_sequence
SQL: BEGIN;
COPY distributors FROM 'input_file';
SELECT setval('serial', max(id)) FROM distributors;
END;
Fingerprint: 092a9571f295a223
Fingerprint Deparse: 092a9571f295a223
Deparse SQL: BEGIN; COPY distributors FROM 'input_file'; SELECT setval('serial', max(id)) FROM distributors; COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>, <PgQuery::RawStmt: stmt: <PgQuery::Node: copy_stmt: <PgQuery::CopyStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, attlist: [], is_from: true, is_program: false, filename: "input_file", options: []>>, stmt_location: 6, stmt_len: 36>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "setval">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 58, sval: <PgQuery::String: sval: "serial">>>, <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "max">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 72>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 68>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 51>>, location: 51>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 82>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 43, stmt_len: 51>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 95, stmt_len: 4>]>
--------END-------

-------BEGIN-------
Method: create_server
SQL: CREATE SERVER myserver FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'foo', dbname 'foodb', port '5432');
Fingerprint: d16df59b90d373f1
Fingerprint Deparse: d16df59b90d373f1
Deparse SQL: CREATE SERVER myserver FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'foo', dbname 'foodb', port '5432')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_foreign_server_stmt: <PgQuery::CreateForeignServerStmt: servername: "myserver", servertype: "", version: "", fdwname: "postgres_fdw", if_not_exists: false, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "host", arg: <PgQuery::Node: string: <PgQuery::String: sval: "foo">>, defaction: :DEFELEM_UNSPEC, location: 66>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "dbname", arg: <PgQuery::Node: string: <PgQuery::String: sval: "foodb">>, defaction: :DEFELEM_UNSPEC, location: 78>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "port", arg: <PgQuery::Node: string: <PgQuery::String: sval: "5432">>, defaction: :DEFELEM_UNSPEC, location: 94>>]>>, stmt_location: 0, stmt_len: 106>]>
--------END-------

-------BEGIN-------
Method: create_statistics
SQL: CREATE TABLE t1 (
    a   int,
    b   int
);

INSERT INTO t1 SELECT i/100, i/500
                 FROM generate_series(1,1000000) s(i);

ANALYZE t1;

-- the number of matching rows will be drastically underestimated:
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);

CREATE STATISTICS s1 (dependencies) ON a, b FROM t1;

ANALYZE t1;

-- now the row count estimate is more accurate:
EXPLAIN ANALYZE SELECT * FROM t1 WHERE (a = 1) AND (b = 0);
Fingerprint: 3c624d56f22c37a8
Fingerprint Deparse: 3c624d56f22c37a8
Deparse SQL: CREATE TABLE t1 (a int, b int); INSERT INTO t1 SELECT i / 100, i / 500 FROM generate_series(1, 1000000) s(i); ANALYZE t1; EXPLAIN (ANALYZE) SELECT * FROM t1 WHERE a = 1 AND b = 0; CREATE STATISTICS s1 (dependencies) ON a, b FROM t1; ANALYZE t1; EXPLAIN (ANALYZE) SELECT * FROM t1 WHERE a = 1 AND b = 0
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "a", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 26>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 22>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "b", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 39>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 35>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 44>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 59>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "/">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "i">>], location: 69>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 71, ival: <PgQuery::Integer: ival: 100>>>, location: 70>>, location: 69>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "/">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "i">>], location: 76>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 78, ival: <PgQuery::Integer: ival: 500>>>, location: 77>>, location: 76>>], from_clause: [<PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: false, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "generate_series">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 120, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 122, ival: <PgQuery::Integer: ival: 1000000>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 104>>, <PgQuery::Node: >]>>], alias: <PgQuery::Alias: aliasname: "s", colnames: [<PgQuery::Node: string: <PgQuery::String: sval: "i">>]>, coldeflist: []>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 45, stmt_len: 90>, <PgQuery::RawStmt: stmt: <PgQuery::Node: vacuum_stmt: <PgQuery::VacuumStmt: options: [], rels: [<PgQuery::Node: vacuum_relation: <PgQuery::VacuumRelation: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 146>, oid: 0, va_cols: []>>], is_vacuumcmd: false>>, stmt_location: 136, stmt_len: 12>, <PgQuery::RawStmt: stmt: <PgQuery::Node: explain_stmt: <PgQuery::ExplainStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 241>>, location: 241>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 248>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "a">>], location: 258>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 262, ival: <PgQuery::Integer: ival: 1>>>, location: 260>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "b">>], location: 270>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 274, ival: <PgQuery::Integer: ival: 0>>>, location: 272>>], location: 265>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "analyze", defaction: :DEFELEM_UNSPEC, location: 226>>]>>, stmt_location: 149, stmt_len: 127>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stats_stmt: <PgQuery::CreateStatsStmt: defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "s1">>], stat_types: [<PgQuery::Node: string: <PgQuery::String: sval: "dependencies">>], exprs: [<PgQuery::Node: stats_elem: <PgQuery::StatsElem: name: "a">>, <PgQuery::Node: stats_elem: <PgQuery::StatsElem: name: "b">>], relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 328>>], stxcomment: "", transformed: false, if_not_exists: false>>, stmt_location: 277, stmt_len: 53>, <PgQuery::RawStmt: stmt: <PgQuery::Node: vacuum_stmt: <PgQuery::VacuumStmt: options: [], rels: [<PgQuery::Node: vacuum_relation: <PgQuery::VacuumRelation: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 341>, oid: 0, va_cols: []>>], is_vacuumcmd: false>>, stmt_location: 331, stmt_len: 12>, <PgQuery::RawStmt: stmt: <PgQuery::Node: explain_stmt: <PgQuery::ExplainStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 417>>, location: 417>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t1", inh: true, relpersistence: "p", location: 424>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "a">>], location: 434>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 438, ival: <PgQuery::Integer: ival: 1>>>, location: 436>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "b">>], location: 446>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 450, ival: <PgQuery::Integer: ival: 0>>>, location: 448>>], location: 441>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "analyze", defaction: :DEFELEM_UNSPEC, location: 402>>]>>, stmt_location: 344, stmt_len: 108>]>
--------END-------

-------BEGIN-------
Method: create_statistics
SQL: CREATE TABLE t2 (
    a   int,
    b   int
);

INSERT INTO t2 SELECT mod(i,100), mod(i,100)
                 FROM generate_series(1,1000000) s(i);

CREATE STATISTICS s2 (mcv) ON a, b FROM t2;

ANALYZE t2;

-- valid combination (found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 1);

-- invalid combination (not found in MCV)
EXPLAIN ANALYZE SELECT * FROM t2 WHERE (a = 1) AND (b = 2);
Fingerprint: 4c2e310fdf4a5192
Fingerprint Deparse: 4c2e310fdf4a5192
Deparse SQL: CREATE TABLE t2 (a int, b int); INSERT INTO t2 SELECT mod(i, 100), mod(i, 100) FROM generate_series(1, 1000000) s(i); CREATE STATISTICS s2 (mcv) ON a, b FROM t2; ANALYZE t2; EXPLAIN (ANALYZE) SELECT * FROM t2 WHERE a = 1 AND b = 1; EXPLAIN (ANALYZE) SELECT * FROM t2 WHERE a = 1 AND b = 2
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "a", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 26>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 22>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "b", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 39>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 35>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 44>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 59>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "mod">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "i">>], location: 73>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 75, ival: <PgQuery::Integer: ival: 100>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 69>>, location: 69>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "mod">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "i">>], location: 85>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 87, ival: <PgQuery::Integer: ival: 100>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 81>>, location: 81>>], from_clause: [<PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: false, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "generate_series">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 130, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 132, ival: <PgQuery::Integer: ival: 1000000>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 114>>, <PgQuery::Node: >]>>], alias: <PgQuery::Alias: aliasname: "s", colnames: [<PgQuery::Node: string: <PgQuery::String: sval: "i">>]>, coldeflist: []>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 45, stmt_len: 100>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stats_stmt: <PgQuery::CreateStatsStmt: defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "s2">>], stat_types: [<PgQuery::Node: string: <PgQuery::String: sval: "mcv">>], exprs: [<PgQuery::Node: stats_elem: <PgQuery::StatsElem: name: "a">>, <PgQuery::Node: stats_elem: <PgQuery::StatsElem: name: "b">>], relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 188>>], stxcomment: "", transformed: false, if_not_exists: false>>, stmt_location: 146, stmt_len: 44>, <PgQuery::RawStmt: stmt: <PgQuery::Node: vacuum_stmt: <PgQuery::VacuumStmt: options: [], rels: [<PgQuery::Node: vacuum_relation: <PgQuery::VacuumRelation: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 201>, oid: 0, va_cols: []>>], is_vacuumcmd: false>>, stmt_location: 191, stmt_len: 12>, <PgQuery::RawStmt: stmt: <PgQuery::Node: explain_stmt: <PgQuery::ExplainStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 265>>, location: 265>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 272>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "a">>], location: 282>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 286, ival: <PgQuery::Integer: ival: 1>>>, location: 284>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "b">>], location: 294>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 298, ival: <PgQuery::Integer: ival: 1>>>, location: 296>>], location: 289>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "analyze", defaction: :DEFELEM_UNSPEC, location: 250>>]>>, stmt_location: 204, stmt_len: 96>, <PgQuery::RawStmt: stmt: <PgQuery::Node: explain_stmt: <PgQuery::ExplainStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 368>>, location: 368>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "t2", inh: true, relpersistence: "p", location: 375>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "a">>], location: 385>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 389, ival: <PgQuery::Integer: ival: 1>>>, location: 387>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "b">>], location: 397>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 401, ival: <PgQuery::Integer: ival: 2>>>, location: 399>>], location: 392>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "analyze", defaction: :DEFELEM_UNSPEC, location: 353>>]>>, stmt_location: 301, stmt_len: 102>]>
--------END-------

-------BEGIN-------
Method: create_subscription
SQL: CREATE SUBSCRIPTION mysub
         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'
        PUBLICATION mypublication, insert_only;
Fingerprint: f1a5327420a14dbf
Fingerprint Deparse: f1a5327420a14dbf
Deparse SQL: CREATE SUBSCRIPTION mysub CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb' PUBLICATION mypublication, insert_only
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_subscription_stmt: <PgQuery::CreateSubscriptionStmt: subname: "mysub", conninfo: "host=192.168.1.50 port=5432 user=foo dbname=foodb", publication: [<PgQuery::Node: string: <PgQuery::String: sval: "mypublication">>, <PgQuery::Node: string: <PgQuery::String: sval: "insert_only">>], options: []>>, stmt_location: 0, stmt_len: 144>]>
--------END-------

-------BEGIN-------
Method: create_subscription
SQL: CREATE SUBSCRIPTION mysub
         CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb'
        PUBLICATION insert_only
               WITH (enabled = false);
Fingerprint: d7364e3705a1a436
Fingerprint Deparse: d7364e3705a1a436
Deparse SQL: CREATE SUBSCRIPTION mysub CONNECTION 'host=192.168.1.50 port=5432 user=foo dbname=foodb' PUBLICATION insert_only WITH (enabled = false)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_subscription_stmt: <PgQuery::CreateSubscriptionStmt: subname: "mysub", conninfo: "host=192.168.1.50 port=5432 user=foo dbname=foodb", publication: [<PgQuery::Node: string: <PgQuery::String: sval: "insert_only">>], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "enabled", arg: <PgQuery::Node: string: <PgQuery::String: sval: "false">>, defaction: :DEFELEM_UNSPEC, location: 151>>]>>, stmt_location: 0, stmt_len: 167>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE films (
    code        char(5) CONSTRAINT firstkey PRIMARY KEY,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
);

CREATE TABLE distributors (
     did    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
     name   varchar(40) NOT NULL CHECK (name > '')
);
Fingerprint: b7773cb286bb9890
Fingerprint Deparse: b7773cb286bb9890
Deparse SQL: CREATE TABLE films (code char(5) CONSTRAINT firstkey PRIMARY KEY, title varchar(40) NOT NULL, did int NOT NULL, date_prod date, kind varchar(10), len interval hour to minute); CREATE TABLE distributors (did int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(40) NOT NULL CHECK (name > ''))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "code", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bpchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 42, ival: <PgQuery::Integer: ival: 5>>>], typemod: -1, array_bounds: [], location: 37>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "firstkey", deferrable: false, initdeferred: false, location: 45, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 25>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "title", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 102, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 94>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 106, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 82>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 132>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 140, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 120>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "date_prod", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 166>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 154>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "kind", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 196, ival: <PgQuery::Integer: ival: 10>>>], typemod: -1, array_bounds: [], location: 188>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 176>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "len", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "interval">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 226, ival: <PgQuery::Integer: ival: 3072>>>], typemod: -1, array_bounds: [], location: 217>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 205>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 242>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 258>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 285>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "", deferrable: false, initdeferred: false, location: 293, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_IDENTITY, conname: "", deferrable: false, initdeferred: false, location: 305, is_no_inherit: false, cooked_expr: "", generated_when: "d", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 278>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 359, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 351>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 363, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "", deferrable: false, initdeferred: false, location: 372, is_no_inherit: false, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 379>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 386, sval: <PgQuery::String: sval: "">>>, location: 384>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>], fdwoptions: [], location: 344>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 243, stmt_len: 148>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE array_int (
    vector  int[][]
);
Fingerprint: 6f3a832fdf345cdb
Fingerprint Deparse: 6f3a832fdf345cdb
Deparse SQL: CREATE TABLE array_int (vector int[][])
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "array_int", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "vector", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [<PgQuery::Node: integer: <PgQuery::Integer: ival: -1>>, <PgQuery::Node: integer: <PgQuery::Integer: ival: -1>>], location: 37>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 29>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 46>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT production UNIQUE(date_prod)
);
Fingerprint: b2882fa650177963
Fingerprint Deparse: b2882fa650177963
Deparse SQL: CREATE TABLE films (code char(5), title varchar(40), did int, date_prod date, kind varchar(10), len interval hour to minute, CONSTRAINT production UNIQUE (date_prod))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "code", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bpchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 42, ival: <PgQuery::Integer: ival: 5>>>], typemod: -1, array_bounds: [], location: 37>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 25>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "title", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 70, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 62>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 50>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 91>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 79>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "date_prod", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 116>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 104>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "kind", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 146, ival: <PgQuery::Integer: ival: 10>>>], typemod: -1, array_bounds: [], location: 138>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 126>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "len", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "interval">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 176, ival: <PgQuery::Integer: ival: 3072>>>], typemod: -1, array_bounds: [], location: 167>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 155>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_UNIQUE, conname: "production", deferrable: false, initdeferred: false, location: 196, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "date_prod">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 237>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer CHECK (did > 100),
    name    varchar(40)
);
Fingerprint: b91536cac0c1130e
Fingerprint Deparse: b91536cac0c1130e
Deparse SQL: CREATE TABLE distributors (did int CHECK (did > 100), name varchar(40))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "", deferrable: false, initdeferred: false, location: 48, is_no_inherit: false, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "did">>], location: 55>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 61, ival: <PgQuery::Integer: ival: 100>>>, location: 59>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 87, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 79>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 71>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 92>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    CONSTRAINT con1 CHECK (did > 100 AND name > '')
);
Fingerprint: af0e2dc9806675c5
Fingerprint Deparse: af0e2dc9806675c5
Deparse SQL: CREATE TABLE distributors (did int, name varchar(40), CONSTRAINT con1 CHECK (did > 100 AND name > ''))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 53>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "con1", deferrable: false, initdeferred: false, location: 78, is_no_inherit: false, raw_expr: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "did">>], location: 101>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 107, ival: <PgQuery::Integer: ival: 100>>>, location: 105>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 115>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 122, sval: <PgQuery::String: sval: "">>>, location: 120>>], location: 111>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 127>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE films (
    code        char(5),
    title       varchar(40),
    did         integer,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute,
    CONSTRAINT code_title PRIMARY KEY(code,title)
);
Fingerprint: 6fb7fbd4743af87a
Fingerprint Deparse: 6fb7fbd4743af87a
Deparse SQL: CREATE TABLE films (code char(5), title varchar(40), did int, date_prod date, kind varchar(10), len interval hour to minute, CONSTRAINT code_title PRIMARY KEY (code, title))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "code", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bpchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 42, ival: <PgQuery::Integer: ival: 5>>>], typemod: -1, array_bounds: [], location: 37>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 25>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "title", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 70, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 62>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 50>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 91>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 79>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "date_prod", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 116>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 104>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "kind", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 146, ival: <PgQuery::Integer: ival: 10>>>], typemod: -1, array_bounds: [], location: 138>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 126>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "len", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "interval">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 176, ival: <PgQuery::Integer: ival: 3072>>>], typemod: -1, array_bounds: [], location: 167>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 155>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "code_title", deferrable: false, initdeferred: false, location: 196, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "code">>, <PgQuery::Node: string: <PgQuery::String: sval: "title">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 243>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    PRIMARY KEY(did)
);

CREATE TABLE distributors (
    did     integer PRIMARY KEY,
    name    varchar(40)
);
Fingerprint: 082118088898b4ca
Fingerprint Deparse: 082118088898b4ca
Deparse SQL: CREATE TABLE distributors (did int, name varchar(40), PRIMARY KEY (did)); CREATE TABLE distributors (did int PRIMARY KEY, name varchar(40))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 53>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "", deferrable: false, initdeferred: false, location: 78, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "did">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 96>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 112>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 139>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "", deferrable: false, initdeferred: false, location: 147, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 131>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 180, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 172>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 164>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 97, stmt_len: 88>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    name      varchar(40) DEFAULT 'Luso Films',
    did       integer DEFAULT nextval('distributors_serial'),
    modtime   timestamp DEFAULT current_timestamp
);
Fingerprint: 949ab413cc5e7093
Fingerprint Deparse: 949ab413cc5e7093
Deparse SQL: CREATE TABLE distributors (name varchar(40) DEFAULT 'Luso Films', did int DEFAULT nextval('distributors_serial'), modtime timestamp DEFAULT current_timestamp)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 50, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 42>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_DEFAULT, conname: "", deferrable: false, initdeferred: false, location: 54, is_no_inherit: false, raw_expr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 62, sval: <PgQuery::String: sval: "Luso Films">>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 90>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_DEFAULT, conname: "", deferrable: false, initdeferred: false, location: 98, is_no_inherit: false, raw_expr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "nextval">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 114, sval: <PgQuery::String: sval: "distributors_serial">>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 106>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 80>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "modtime", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "timestamp">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 152>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_DEFAULT, conname: "", deferrable: false, initdeferred: false, location: 162, is_no_inherit: false, raw_expr: <PgQuery::Node: sqlvalue_function: <PgQuery::SQLValueFunction: op: :SVFOP_CURRENT_TIMESTAMP, type: 0, typmod: -1, location: 170>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 142>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 189>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer CONSTRAINT no_null NOT NULL,
    name    varchar(40) NOT NULL
);
Fingerprint: 8942ef0128d17f35
Fingerprint Deparse: 8942ef0128d17f35
Deparse SQL: CREATE TABLE distributors (did int CONSTRAINT no_null NOT NULL, name varchar(40) NOT NULL)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "no_null", deferrable: false, initdeferred: false, location: 48, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 97, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 89>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 101, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 81>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 111>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer,
    name    varchar(40) UNIQUE
);
Fingerprint: b3a6301160ccc13e
Fingerprint Deparse: b3a6301160ccc13e
Deparse SQL: CREATE TABLE distributors (did int, name varchar(40) UNIQUE)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_UNIQUE, conname: "", deferrable: false, initdeferred: false, location: 73, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 53>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 81>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name)
);
Fingerprint: 3dc589e926e73c38
Fingerprint Deparse: 3dc589e926e73c38
Deparse SQL: CREATE TABLE distributors (did int, name varchar(40), UNIQUE (name))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 53>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_UNIQUE, conname: "", deferrable: false, initdeferred: false, location: 78, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 92>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE distributors (
    did     integer,
    name    varchar(40),
    UNIQUE(name) WITH (fillfactor=70)
)
WITH (fillfactor=70);
Fingerprint: 225f61a41facee46
Fingerprint Deparse: 225f61a41facee46
Deparse SQL: CREATE TABLE distributors (did int, name varchar(40), UNIQUE (name) WITH (fillfactor=70)) WITH (fillfactor=70)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "did", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 40>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 32>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "varchar">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, ival: <PgQuery::Integer: ival: 40>>>], typemod: -1, array_bounds: [], location: 61>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 53>>, <PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_UNIQUE, conname: "", deferrable: false, initdeferred: false, location: 78, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], including: [], exclusions: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "fillfactor", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 70>>, defaction: :DEFELEM_UNSPEC, location: 97>>], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], inh_relations: [], constraints: [], options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "fillfactor", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 70>>, defaction: :DEFELEM_UNSPEC, location: 120>>], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 134>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE cinemas (
        id serial,
        name text,
        location text
) TABLESPACE diskvol1;
Fingerprint: 4a3b2963a94b6135
Fingerprint Deparse: 4a3b2963a94b6135
Deparse SQL: CREATE TABLE cinemas (id serial, name text, location text) TABLESPACE diskvol1
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cinemas", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "serial">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 34>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 31>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 55>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 50>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "location", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 78>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 69>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "diskvol1", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 104>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TYPE employee_type AS (name text, salary numeric);

CREATE TABLE employees OF employee_type (
    PRIMARY KEY (name),
    salary WITH OPTIONS DEFAULT 1000
);
Fingerprint: d1e9f78b5eb34d21
Fingerprint Deparse: d1e9f78b5eb34d21
Deparse SQL: CREATE TYPE employee_type AS (name text, salary numeric); CREATE TABLE employees OF employee_type (PRIMARY KEY (name), salary DEFAULT 1000)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: composite_type_stmt: <PgQuery::CompositeTypeStmt: typevar: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employee_type", inh: false, relpersistence: "p", location: 12>, coldeflist: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 35>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 30>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "salary", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "numeric">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 48>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 41>>]>>, stmt_location: 0, stmt_len: 56>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 72>, table_elts: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_PRIMARY, conname: "", deferrable: false, initdeferred: false, location: 105, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "salary", compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_DEFAULT, conname: "", deferrable: false, initdeferred: false, location: 149, is_no_inherit: false, raw_expr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 157, ival: <PgQuery::Integer: ival: 1000>>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 129>>], inh_relations: [], of_typename: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "employee_type">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 85>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 57, stmt_len: 106>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE measurement (
    logdate         date not null,
    peaktemp        int,
    unitsales       int
) PARTITION BY RANGE (logdate);
Fingerprint: 1fa36f4771ffa994
Fingerprint Deparse: 1fa36f4771ffa994
Deparse SQL: CREATE TABLE measurement (logdate date NOT NULL, peaktemp int, unitsales int) PARTITION BY range(logdate)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "logdate", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 47>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 52, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 31>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "peaktemp", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 82>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 66>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "unitsales", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 107>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 91>>], inh_relations: [], partspec: <PgQuery::PartitionSpec: strategy: "range", part_params: [<PgQuery::Node: partition_elem: <PgQuery::PartitionElem: name: "logdate", collation: [], opclass: [], location: 133>>], location: 113>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 141>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE measurement_year_month (
    logdate         date not null,
    peaktemp        int,
    unitsales       int
) PARTITION BY RANGE (EXTRACT(YEAR FROM logdate), EXTRACT(MONTH FROM logdate));
Fingerprint: 6e6a2e8a7a314ff9
Fingerprint Deparse: 6e6a2e8a7a314ff9
Deparse SQL: CREATE TABLE measurement_year_month (logdate date NOT NULL, peaktemp int, unitsales int) PARTITION BY range((extract ('year' FROM logdate)), (extract ('month' FROM logdate)))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_year_month", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "logdate", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 58>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 63, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 42>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "peaktemp", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 93>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 77>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "unitsales", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 118>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 102>>], inh_relations: [], partspec: <PgQuery::PartitionSpec: strategy: "range", part_params: [<PgQuery::Node: partition_elem: <PgQuery::PartitionElem: name: "", expr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "extract">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 152, sval: <PgQuery::String: sval: "year">>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "logdate">>], location: 162>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_SQL_SYNTAX, location: 144>>, collation: [], opclass: [], location: 144>>, <PgQuery::Node: partition_elem: <PgQuery::PartitionElem: name: "", expr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "extract">>], args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 180, sval: <PgQuery::String: sval: "month">>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "logdate">>], location: 191>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_SQL_SYNTAX, location: 172>>, collation: [], opclass: [], location: 172>>], location: 124>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 200>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE cities (
    city_id      bigserial not null,
    name         text not null,
    population   bigint
) PARTITION BY LIST (left(lower(name), 1));
Fingerprint: 2555235ff5b8ea0c
Fingerprint Deparse: 2555235ff5b8ea0c
Deparse SQL: CREATE TABLE cities (city_id bigserial NOT NULL, name text NOT NULL, population bigint) PARTITION BY list(("left"(lower(name), 1)))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "city_id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "bigserial">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 39>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 49, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 26>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "name", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 76>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 81, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 63>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "population", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 108>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 95>>], inh_relations: [], partspec: <PgQuery::PartitionSpec: strategy: "list", part_params: [<PgQuery::Node: partition_elem: <PgQuery::PartitionElem: name: "", expr: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "left">>], args: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "lower">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 147>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 141>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 154, ival: <PgQuery::Integer: ival: 1>>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 136>>, collation: [], opclass: [], location: 136>>], location: 117>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 157>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE orders (
    order_id     bigint not null,
    cust_id      bigint not null,
    status       text
) PARTITION BY HASH (order_id);
Fingerprint: 63cc38153524bd59
Fingerprint Deparse: 63cc38153524bd59
Deparse SQL: CREATE TABLE orders (order_id bigint NOT NULL, cust_id bigint NOT NULL, status text) PARTITION BY hash(order_id)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "order_id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 39>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 46, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 26>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "cust_id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 73>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_NOTNULL, conname: "", deferrable: false, initdeferred: false, location: 80, is_no_inherit: false, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 60>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "status", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 107>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 94>>], inh_relations: [], partspec: <PgQuery::PartitionSpec: strategy: "hash", part_params: [<PgQuery::Node: partition_elem: <PgQuery::PartitionElem: name: "order_id", collation: [], opclass: [], location: 133>>], location: 114>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 142>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE measurement_y2016m07
    PARTITION OF measurement (
    unitsales DEFAULT 0
) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
Fingerprint: 728458ca16907e15
Fingerprint Deparse: 728458ca16907e15
Deparse SQL: CREATE TABLE measurement_y2016m07 PARTITION OF measurement (unitsales DEFAULT 0) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_y2016m07", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "unitsales", compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_DEFAULT, conname: "", deferrable: false, initdeferred: false, location: 79, is_no_inherit: false, raw_expr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 87, ival: <PgQuery::Integer: ival: 0>>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: false>>], fdwoptions: [], location: 69>>], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement", inh: true, relpersistence: "p", location: 51>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 108, sval: <PgQuery::String: sval: "2016-07-01">>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 126, sval: <PgQuery::String: sval: "2016-08-01">>>], location: 102>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 139>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE measurement_ym_older
    PARTITION OF measurement_year_month
    FOR VALUES FROM (MINVALUE, MINVALUE) TO (2016, 11);

CREATE TABLE measurement_ym_y2016m11
    PARTITION OF measurement_year_month
    FOR VALUES FROM (2016, 11) TO (2016, 12);

CREATE TABLE measurement_ym_y2016m12
    PARTITION OF measurement_year_month
    FOR VALUES FROM (2016, 12) TO (2017, 01);

CREATE TABLE measurement_ym_y2017m01
    PARTITION OF measurement_year_month
    FOR VALUES FROM (2017, 01) TO (2017, 02);
Fingerprint: ff783317d62611a4
Fingerprint Deparse: ff783317d62611a4
Deparse SQL: CREATE TABLE measurement_ym_older PARTITION OF measurement_year_month FOR VALUES FROM (minvalue, minvalue) TO (2016, 11); CREATE TABLE measurement_ym_y2016m11 PARTITION OF measurement_year_month FOR VALUES FROM (2016, 11) TO (2016, 12); CREATE TABLE measurement_ym_y2016m12 PARTITION OF measurement_year_month FOR VALUES FROM (2016, 12) TO (2017, 1); CREATE TABLE measurement_ym_y2017m01 PARTITION OF measurement_year_month FOR VALUES FROM (2017, 1) TO (2017, 2)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_ym_older", inh: true, relpersistence: "p", location: 13>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_year_month", inh: true, relpersistence: "p", location: 51>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "minvalue">>], location: 95>>, <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "minvalue">>], location: 105>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 119, ival: <PgQuery::Integer: ival: 2016>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 125, ival: <PgQuery::Integer: ival: 11>>>], location: 89>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 128>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_ym_y2016m11", inh: true, relpersistence: "p", location: 144>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_year_month", inh: true, relpersistence: "p", location: 185>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 229, ival: <PgQuery::Integer: ival: 2016>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 235, ival: <PgQuery::Integer: ival: 11>>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 243, ival: <PgQuery::Integer: ival: 2016>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 249, ival: <PgQuery::Integer: ival: 12>>>], location: 223>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 129, stmt_len: 123>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_ym_y2016m12", inh: true, relpersistence: "p", location: 268>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_year_month", inh: true, relpersistence: "p", location: 309>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 353, ival: <PgQuery::Integer: ival: 2016>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 359, ival: <PgQuery::Integer: ival: 12>>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 367, ival: <PgQuery::Integer: ival: 2017>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 373, ival: <PgQuery::Integer: ival: 1>>>], location: 347>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 253, stmt_len: 123>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_ym_y2017m01", inh: true, relpersistence: "p", location: 392>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "measurement_year_month", inh: true, relpersistence: "p", location: 433>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 477, ival: <PgQuery::Integer: ival: 2017>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 483, ival: <PgQuery::Integer: ival: 1>>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 491, ival: <PgQuery::Integer: ival: 2017>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 497, ival: <PgQuery::Integer: ival: 2>>>], location: 471>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 377, stmt_len: 123>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE cities_ab
    PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
) FOR VALUES IN ('a', 'b');
Fingerprint: 8600affde20b9c0c
Fingerprint Deparse: 8600affde20b9c0c
Deparse SQL: CREATE TABLE cities_ab PARTITION OF cities (CONSTRAINT city_id_nonzero CHECK (city_id <> 0)) FOR VALUES IN ('a', 'b')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_ab", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "city_id_nonzero", deferrable: false, initdeferred: false, location: 53, is_no_inherit: false, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "<>">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "city_id">>], location: 87>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 98, ival: <PgQuery::Integer: ival: 0>>>, location: 95>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities", inh: true, relpersistence: "p", location: 40>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "l", is_default: false, modulus: 0, remainder: 0, listdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 118, sval: <PgQuery::String: sval: "a">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 123, sval: <PgQuery::String: sval: "b">>>], lowerdatums: [], upperdatums: [], location: 114>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 127>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE cities_ab
    PARTITION OF cities (
    CONSTRAINT city_id_nonzero CHECK (city_id != 0)
) FOR VALUES IN ('a', 'b') PARTITION BY RANGE (population);

CREATE TABLE cities_ab_10000_to_100000
    PARTITION OF cities_ab FOR VALUES FROM (10000) TO (100000);
Fingerprint: 22cf486bda2ceac9
Fingerprint Deparse: 22cf486bda2ceac9
Deparse SQL: CREATE TABLE cities_ab PARTITION OF cities (CONSTRAINT city_id_nonzero CHECK (city_id <> 0)) FOR VALUES IN ('a', 'b') PARTITION BY range(population); CREATE TABLE cities_ab_10000_to_100000 PARTITION OF cities_ab FOR VALUES FROM (10000) TO (100000)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_ab", inh: true, relpersistence: "p", location: 13>, table_elts: [<PgQuery::Node: constraint: <PgQuery::Constraint: contype: :CONSTR_CHECK, conname: "city_id_nonzero", deferrable: false, initdeferred: false, location: 53, is_no_inherit: false, raw_expr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "<>">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "city_id">>], location: 87>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 98, ival: <PgQuery::Integer: ival: 0>>>, location: 95>>, cooked_expr: "", generated_when: "", nulls_not_distinct: false, keys: [], including: [], exclusions: [], options: [], indexname: "", indexspace: "", reset_default_tblspc: false, access_method: "", fk_attrs: [], pk_attrs: [], fk_matchtype: "", fk_upd_action: "", fk_del_action: "", fk_del_set_cols: [], old_conpfeqop: [], old_pktable_oid: 0, skip_validation: false, initially_valid: true>>], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities", inh: true, relpersistence: "p", location: 40>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "l", is_default: false, modulus: 0, remainder: 0, listdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 118, sval: <PgQuery::String: sval: "a">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 123, sval: <PgQuery::String: sval: "b">>>], lowerdatums: [], upperdatums: [], location: 114>, partspec: <PgQuery::PartitionSpec: strategy: "range", part_params: [<PgQuery::Node: partition_elem: <PgQuery::PartitionElem: name: "population", collation: [], opclass: [], location: 148>>], location: 128>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 159>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_ab_10000_to_100000", inh: true, relpersistence: "p", location: 175>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_ab", inh: true, relpersistence: "p", location: 218>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "r", is_default: false, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 245, ival: <PgQuery::Integer: ival: 10000>>>], upperdatums: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 256, ival: <PgQuery::Integer: ival: 100000>>>], location: 239>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 160, stmt_len: 103>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE orders_p1 PARTITION OF orders
    FOR VALUES WITH (MODULUS 4, REMAINDER 0);
CREATE TABLE orders_p2 PARTITION OF orders
    FOR VALUES WITH (MODULUS 4, REMAINDER 1);
CREATE TABLE orders_p3 PARTITION OF orders
    FOR VALUES WITH (MODULUS 4, REMAINDER 2);
CREATE TABLE orders_p4 PARTITION OF orders
    FOR VALUES WITH (MODULUS 4, REMAINDER 3);
Fingerprint: fed97af39ee60b5c
Fingerprint Deparse: fed97af39ee60b5c
Deparse SQL: CREATE TABLE orders_p1 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 0); CREATE TABLE orders_p2 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 1); CREATE TABLE orders_p3 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 2); CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders_p1", inh: true, relpersistence: "p", location: 13>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders", inh: true, relpersistence: "p", location: 36>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "h", is_default: false, modulus: 4, remainder: 0, listdatums: [], lowerdatums: [], upperdatums: [], location: 58>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 87>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders_p2", inh: true, relpersistence: "p", location: 102>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders", inh: true, relpersistence: "p", location: 125>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "h", is_default: false, modulus: 4, remainder: 1, listdatums: [], lowerdatums: [], upperdatums: [], location: 147>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 88, stmt_len: 88>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders_p3", inh: true, relpersistence: "p", location: 191>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders", inh: true, relpersistence: "p", location: 214>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "h", is_default: false, modulus: 4, remainder: 2, listdatums: [], lowerdatums: [], upperdatums: [], location: 236>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 177, stmt_len: 88>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders_p4", inh: true, relpersistence: "p", location: 280>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "orders", inh: true, relpersistence: "p", location: 303>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "h", is_default: false, modulus: 4, remainder: 3, listdatums: [], lowerdatums: [], upperdatums: [], location: 325>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 266, stmt_len: 88>]>
--------END-------

-------BEGIN-------
Method: create_table
SQL: CREATE TABLE cities_partdef
    PARTITION OF cities DEFAULT;
Fingerprint: 1c48bc4df3fa3a7c
Fingerprint Deparse: 1c48bc4df3fa3a7c
Deparse SQL: CREATE TABLE cities_partdef PARTITION OF cities DEFAULT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities_partdef", inh: true, relpersistence: "p", location: 13>, table_elts: [], inh_relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "cities", inh: true, relpersistence: "p", location: 45>>], partbound: <PgQuery::PartitionBoundSpec: strategy: "", is_default: true, modulus: 0, remainder: 0, listdatums: [], lowerdatums: [], upperdatums: [], location: 52>, constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 0, stmt_len: 59>]>
--------END-------

-------BEGIN-------
Method: create_table_as
SQL: CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod >= '2002-01-01';
Fingerprint: 843aed411d3fd949
Fingerprint Deparse: 843aed411d3fd949
Deparse SQL: CREATE TABLE films_recent AS SELECT * FROM films WHERE date_prod >= '2002-01-01'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_table_as_stmt: <PgQuery::CreateTableAsStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 38>>, location: 38>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 45>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "date_prod">>], location: 57>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 70, sval: <PgQuery::String: sval: "2002-01-01">>>, location: 67>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, into: <PgQuery::IntoClause: rel: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films_recent", inh: true, relpersistence: "p", location: 13>, col_names: [], access_method: "", options: [], on_commit: :ONCOMMIT_NOOP, table_space_name: "", skip_data: false>, objtype: :OBJECT_TABLE, is_select_into: false, if_not_exists: false>>, stmt_location: 0, stmt_len: 82>]>
--------END-------

-------BEGIN-------
Method: create_table_as
SQL: CREATE TABLE films2 AS
  TABLE films;
Fingerprint: 8c82d192cc581ad9
Fingerprint Deparse: 8c82d192cc581ad9
Deparse SQL: CREATE TABLE films2 AS SELECT * FROM films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_table_as_stmt: <PgQuery::CreateTableAsStmt: query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: -1>>, location: -1>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 31>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, into: <PgQuery::IntoClause: rel: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films2", inh: true, relpersistence: "p", location: 13>, col_names: [], access_method: "", options: [], on_commit: :ONCOMMIT_NOOP, table_space_name: "", skip_data: false>, objtype: :OBJECT_TABLE, is_select_into: false, if_not_exists: false>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: create_table_as
SQL: PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod > $1;
CREATE TEMP TABLE films_recent ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
Fingerprint: 7975718087a859c7
Fingerprint Deparse: 7975718087a859c7
Deparse SQL: PREPARE recentfilms(date) AS SELECT * FROM films WHERE date_prod > $1; CREATE TEMPORARY TABLE films_recent ON COMMIT DROP AS EXECUTE recentfilms('2002-01-01')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: prepare_stmt: <PgQuery::PrepareStmt: name: "recentfilms", argtypes: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>>], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 38>>, location: 38>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 45>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "date_prod">>], location: 57>>, rexpr: <PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 1, location: 69>>, location: 67>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>>>, stmt_location: 0, stmt_len: 71>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_table_as_stmt: <PgQuery::CreateTableAsStmt: query: <PgQuery::Node: execute_stmt: <PgQuery::ExecuteStmt: name: "recentfilms", params: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 144, sval: <PgQuery::String: sval: "2002-01-01">>>]>>, into: <PgQuery::IntoClause: rel: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films_recent", inh: true, relpersistence: "t", location: 91>, col_names: [], access_method: "", options: [], on_commit: :ONCOMMIT_DROP, table_space_name: "", skip_data: false>, objtype: :OBJECT_TABLE, is_select_into: false, if_not_exists: false>>, stmt_location: 72, stmt_len: 85>]>
--------END-------

-------BEGIN-------
Method: create_tablespace
SQL: CREATE TABLESPACE dbspace LOCATION '/data/dbs';
Fingerprint: fb1e95c419d43e06
Fingerprint Deparse: fb1e95c419d43e06
Deparse SQL: CREATE TABLESPACE dbspace LOCATION '/data/dbs'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_table_space_stmt: <PgQuery::CreateTableSpaceStmt: tablespacename: "dbspace", location: "/data/dbs", options: []>>, stmt_location: 0, stmt_len: 46>]>
--------END-------

-------BEGIN-------
Method: create_tablespace
SQL: CREATE TABLESPACE indexspace OWNER genevieve LOCATION '/data/indexes';
Fingerprint: f1ae1f6a067cc4b9
Fingerprint Deparse: f1ae1f6a067cc4b9
Deparse SQL: CREATE TABLESPACE indexspace OWNER genevieve LOCATION '/data/indexes'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_table_space_stmt: <PgQuery::CreateTableSpaceStmt: tablespacename: "indexspace", owner: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "genevieve", location: 35>, location: "/data/indexes", options: []>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: create_transform
SQL: CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);
Fingerprint: 4524a3005aa19eb0
Fingerprint Deparse: 4524a3005aa19eb0
Deparse SQL: CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (FROM SQL WITH FUNCTION hstore_to_plpython(internal), TO SQL WITH FUNCTION plpython_to_hstore(internal))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_transform_stmt: <PgQuery::CreateTransformStmt: replace: false, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 21>, lang: "plpythonu", fromsql: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore_to_plpython">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "internal">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 95>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "internal">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 95>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>, tosql: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "plpython_to_hstore">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "internal">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 150>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "internal">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 150>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>>, stmt_location: 0, stmt_len: 161>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE FUNCTION check_account_update();
Fingerprint: 135279b052422b5c
Fingerprint Deparse: 135279b052422b5c
Deparse SQL: CREATE TRIGGER check_update BEFORE UPDATE ON accounts FOR EACH ROW EXECUTE FUNCTION check_account_update()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "check_update", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 49>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_account_update">>], args: [], row: true, timing: 2, events: 16, columns: [], transition_rels: [], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 118>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER check_update
    BEFORE UPDATE OF balance ON accounts
    FOR EACH ROW
    EXECUTE FUNCTION check_account_update();
Fingerprint: ab3d8eb44b18983d
Fingerprint Deparse: ab3d8eb44b18983d
Deparse SQL: CREATE TRIGGER check_update BEFORE UPDATE OF balance ON accounts FOR EACH ROW EXECUTE FUNCTION check_account_update()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "check_update", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 60>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_account_update">>], args: [], row: true, timing: 2, events: 16, columns: [<PgQuery::Node: string: <PgQuery::String: sval: "balance">>], transition_rels: [], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 129>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER check_update
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.balance IS DISTINCT FROM NEW.balance)
    EXECUTE FUNCTION check_account_update();
Fingerprint: 6adc504b16510e21
Fingerprint Deparse: 6adc504b16510e21
Deparse SQL: CREATE TRIGGER check_update BEFORE UPDATE ON accounts FOR EACH ROW WHEN (old.balance IS DISTINCT FROM new.balance) EXECUTE FUNCTION check_account_update()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "check_update", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 49>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_account_update">>], args: [], row: true, timing: 2, events: 16, columns: [], when_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_DISTINCT, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "old">>, <PgQuery::Node: string: <PgQuery::String: sval: "balance">>], location: 85>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "new">>, <PgQuery::Node: string: <PgQuery::String: sval: "balance">>], location: 114>>, location: 97>>, transition_rels: [], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 170>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER log_update
    AFTER UPDATE ON accounts
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
    EXECUTE FUNCTION log_account_update();
Fingerprint: a7fcb240bdb4bae0
Fingerprint Deparse: a7fcb240bdb4bae0
Deparse SQL: CREATE TRIGGER log_update AFTER UPDATE ON accounts FOR EACH ROW WHEN (old.* IS DISTINCT FROM new.*) EXECUTE FUNCTION log_account_update()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "log_update", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 46>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "log_account_update">>], args: [], row: true, timing: 0, events: 16, columns: [], when_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_DISTINCT, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "old">>, <PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 82>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "new">>, <PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 105>>, location: 88>>, transition_rels: [], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 153>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER view_insert
    INSTEAD OF INSERT ON my_view
    FOR EACH ROW
    EXECUTE FUNCTION view_insert_row();
Fingerprint: 46b90163f6c60a26
Fingerprint Deparse: 46b90163f6c60a26
Deparse SQL: CREATE TRIGGER view_insert INSTEAD OF INSERT ON my_view FOR EACH ROW EXECUTE FUNCTION view_insert_row()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "view_insert", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "my_view", inh: true, relpersistence: "p", location: 52>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "view_insert_row">>], args: [], row: true, timing: 64, events: 4, columns: [], transition_rels: [], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 115>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER transfer_insert
    AFTER INSERT ON transfer
    REFERENCING NEW TABLE AS inserted
    FOR EACH STATEMENT
    EXECUTE FUNCTION check_transfer_balances_to_zero();
Fingerprint: 61f8a66e1ae72171
Fingerprint Deparse: 61f8a66e1ae72171
Deparse SQL: CREATE TRIGGER transfer_insert AFTER INSERT ON transfer REFERENCING NEW TABLE inserted EXECUTE FUNCTION check_transfer_balances_to_zero()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "transfer_insert", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "transfer", inh: true, relpersistence: "p", location: 51>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_transfer_balances_to_zero">>], args: [], row: false, timing: 0, events: 4, columns: [], transition_rels: [<PgQuery::Node: trigger_transition: <PgQuery::TriggerTransition: name: "inserted", is_new: true, is_table: true>>], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 175>]>
--------END-------

-------BEGIN-------
Method: create_trigger
SQL: CREATE TRIGGER paired_items_update
    AFTER UPDATE ON paired_items
    REFERENCING NEW TABLE AS newtab OLD TABLE AS oldtab
    FOR EACH ROW
    EXECUTE FUNCTION check_matching_pairs();
Fingerprint: aab0eff115ae5d5d
Fingerprint Deparse: aab0eff115ae5d5d
Deparse SQL: CREATE TRIGGER paired_items_update AFTER UPDATE ON paired_items REFERENCING NEW TABLE newtab OLD TABLE oldtab FOR EACH ROW EXECUTE FUNCTION check_matching_pairs()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_trig_stmt: <PgQuery::CreateTrigStmt: replace: false, isconstraint: false, trigname: "paired_items_update", relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "paired_items", inh: true, relpersistence: "p", location: 55>, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "check_matching_pairs">>], args: [], row: true, timing: 0, events: 16, columns: [], transition_rels: [<PgQuery::Node: trigger_transition: <PgQuery::TriggerTransition: name: "newtab", is_new: true, is_table: true>>, <PgQuery::Node: trigger_transition: <PgQuery::TriggerTransition: name: "oldtab", is_new: false, is_table: true>>], deferrable: false, initdeferred: false>>, stmt_location: 0, stmt_len: 184>]>
--------END-------

-------BEGIN-------
Method: create_tsdictionary
SQL: CREATE TEXT SEARCH DICTIONARY my_russian (
    template = snowball,
    language = russian,
    stopwords = myrussian
);
Fingerprint: 253e46938040024b
Fingerprint Deparse: 253e46938040024b
Deparse SQL: CREATE TEXT SEARCH DICTIONARY my_russian (template = snowball, language = russian, stopwords = myrussian)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_TSDICTIONARY, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "my_russian">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "template", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "snowball">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 58>>, defaction: :DEFELEM_UNSPEC, location: 47>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "russian">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 83>>, defaction: :DEFELEM_UNSPEC, location: 72>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "stopwords", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "myrussian">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 108>>, defaction: :DEFELEM_UNSPEC, location: 96>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 119>]>
--------END-------

-------BEGIN-------
Method: create_type
SQL: CREATE TYPE compfoo AS (f1 int, f2 text);

CREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$
    SELECT fooid, fooname FROM foo
$$ LANGUAGE SQL;
Fingerprint: 1e2b7a724d60e52c
Fingerprint Deparse: 1e2b7a724d60e52c
Deparse SQL: CREATE TYPE compfoo AS (f1 int, f2 text); CREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$
    SELECT fooid, fooname FROM foo
$$ LANGUAGE sql
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: composite_type_stmt: <PgQuery::CompositeTypeStmt: typevar: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "compfoo", inh: false, relpersistence: "p", location: 12>, coldeflist: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "f1", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 27>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 24>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "f2", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 35>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 32>>]>>, stmt_location: 0, stmt_len: 40>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_function_stmt: <PgQuery::CreateFunctionStmt: is_procedure: false, replace: false, funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "getfoo">>], parameters: [], return_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "compfoo">>], type_oid: 0, setof: true, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 82>, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "
    SELECT fooid, fooname FROM foo
">>]>>, defaction: :DEFELEM_UNSPEC, location: 90>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "language", arg: <PgQuery::Node: string: <PgQuery::String: sval: "sql">>, defaction: :DEFELEM_UNSPEC, location: 134>>]>>, stmt_location: 41, stmt_len: 105>]>
--------END-------

-------BEGIN-------
Method: create_type
SQL: CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed');

CREATE TABLE bug (
    id serial,
    description text,
    status bug_status
);
Fingerprint: d6dbf35ecb67e9c4
Fingerprint Deparse: d6dbf35ecb67e9c4
Deparse SQL: CREATE TYPE bug_status AS ENUM ('new', 'open', 'closed'); CREATE TABLE bug (id serial, description text, status bug_status)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_enum_stmt: <PgQuery::CreateEnumStmt: type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "bug_status">>], vals: [<PgQuery::Node: string: <PgQuery::String: sval: "new">>, <PgQuery::Node: string: <PgQuery::String: sval: "open">>, <PgQuery::Node: string: <PgQuery::String: sval: "closed">>]>>, stmt_location: 0, stmt_len: 56>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "bug", inh: true, relpersistence: "p", location: 72>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "serial">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 85>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 82>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "description", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 109>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 97>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "status", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "bug_status">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 126>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 119>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 57, stmt_len: 81>]>
--------END-------

-------BEGIN-------
Method: create_type
SQL: CREATE TYPE float8_range AS RANGE (subtype = float8, subtype_diff = float8mi);
Fingerprint: c33f5467bcce6cee
Fingerprint Deparse: c33f5467bcce6cee
Deparse SQL: CREATE TYPE float8_range AS RANGE (subtype = float8, subtype_diff = float8mi)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_range_stmt: <PgQuery::CreateRangeStmt: type_name: [<PgQuery::Node: string: <PgQuery::String: sval: "float8_range">>], params: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "subtype", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 45>>, defaction: :DEFELEM_UNSPEC, location: 35>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "subtype_diff", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float8mi">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 68>>, defaction: :DEFELEM_UNSPEC, location: 53>>]>>, stmt_location: 0, stmt_len: 77>]>
--------END-------

-------BEGIN-------
Method: create_type
SQL: CREATE TYPE box (
    INTERNALLENGTH = 16,
    INPUT = my_box_in_function,
    OUTPUT = my_box_out_function,
    ELEMENT = float4
);
Fingerprint: 85e556c9a12d9209
Fingerprint Deparse: 85e556c9a12d9209
Deparse SQL: CREATE TYPE box (internallength = 16, input = my_box_in_function, output = my_box_out_function, element = float4)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_TYPE, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "internallength", arg: <PgQuery::Node: integer: <PgQuery::Integer: ival: 16>>, defaction: :DEFELEM_UNSPEC, location: 22>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "input", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "my_box_in_function">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 55>>, defaction: :DEFELEM_UNSPEC, location: 47>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "output", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "my_box_out_function">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 88>>, defaction: :DEFELEM_UNSPEC, location: 79>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "element", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "float4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 123>>, defaction: :DEFELEM_UNSPEC, location: 113>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 131>]>
--------END-------

-------BEGIN-------
Method: create_type
SQL: CREATE TYPE bigobj (
    INPUT = lo_filein, OUTPUT = lo_fileout,
    INTERNALLENGTH = VARIABLE
);
CREATE TABLE big_objs (
    id integer,
    obj bigobj
);
Fingerprint: cf5723bd058496bc
Fingerprint Deparse: cf5723bd058496bc
Deparse SQL: CREATE TYPE bigobj (input = lo_filein, output = lo_fileout, internallength = variable); CREATE TABLE big_objs (id int, obj bigobj)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: define_stmt: <PgQuery::DefineStmt: kind: :OBJECT_TYPE, oldstyle: false, defnames: [<PgQuery::Node: string: <PgQuery::String: sval: "bigobj">>], args: [], definition: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "input", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "lo_filein">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 33>>, defaction: :DEFELEM_UNSPEC, location: 25>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "output", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "lo_fileout">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 53>>, defaction: :DEFELEM_UNSPEC, location: 44>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "internallength", arg: <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "variable">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 86>>, defaction: :DEFELEM_UNSPEC, location: 69>>], if_not_exists: false, replace: false>>, stmt_location: 0, stmt_len: 96>, <PgQuery::RawStmt: stmt: <PgQuery::Node: create_stmt: <PgQuery::CreateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "big_objs", inh: true, relpersistence: "p", location: 111>, table_elts: [<PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "id", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 129>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 126>>, <PgQuery::Node: column_def: <PgQuery::ColumnDef: colname: "obj", type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "bigobj">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 146>, compression: "", inhcount: 0, is_local: true, is_not_null: false, is_from_type: false, storage: "", identity: "", generated: "", coll_oid: 0, constraints: [], fdwoptions: [], location: 142>>], inh_relations: [], constraints: [], options: [], oncommit: :ONCOMMIT_NOOP, tablespacename: "", access_method: "", if_not_exists: false>>, stmt_location: 97, stmt_len: 57>]>
--------END-------

-------BEGIN-------
Method: create_user_mapping
SQL: CREATE USER MAPPING FOR bob SERVER foo OPTIONS (user 'bob', password 'secret');
Fingerprint: b985b6bfc92511a4
Fingerprint Deparse: b985b6bfc92511a4
Deparse SQL: CREATE USER MAPPING FOR bob SERVER foo OPTIONS ("user" 'bob', password 'secret')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: create_user_mapping_stmt: <PgQuery::CreateUserMappingStmt: user: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "bob", location: 24>, servername: "foo", if_not_exists: false, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "user", arg: <PgQuery::Node: string: <PgQuery::String: sval: "bob">>, defaction: :DEFELEM_UNSPEC, location: 48>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "password", arg: <PgQuery::Node: string: <PgQuery::String: sval: "secret">>, defaction: :DEFELEM_UNSPEC, location: 60>>]>>, stmt_location: 0, stmt_len: 78>]>
--------END-------

-------BEGIN-------
Method: create_view
SQL: CREATE VIEW vista AS SELECT 'Hello World';
Fingerprint: b1c193845b408408
Fingerprint Deparse: b1c193845b408408
Deparse SQL: CREATE VIEW vista AS SELECT 'Hello World'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "vista", inh: true, relpersistence: "p", location: 12>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 28, sval: <PgQuery::String: sval: "Hello World">>>, location: 28>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: create_view
SQL: CREATE VIEW vista AS SELECT text 'Hello World' AS hello;
Fingerprint: b1c193845b408408
Fingerprint Deparse: b1c193845b408408
Deparse SQL: CREATE VIEW vista AS SELECT 'Hello World'::text AS hello
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "vista", inh: true, relpersistence: "p", location: 12>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "hello", indirection: [], val: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 33, sval: <PgQuery::String: sval: "Hello World">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>, location: -1>>, location: 28>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: create_view
SQL: CREATE VIEW comedies AS
    SELECT *
    FROM films
    WHERE kind = 'Comedy';
Fingerprint: 092904a85e08ea47
Fingerprint Deparse: 092904a85e08ea47
Deparse SQL: CREATE VIEW comedies AS SELECT * FROM films WHERE kind = 'Comedy'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "comedies", inh: true, relpersistence: "p", location: 12>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 35>>, location: 35>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 46>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "kind">>], location: 62>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, sval: <PgQuery::String: sval: "Comedy">>>, location: 67>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>, stmt_location: 0, stmt_len: 77>]>
--------END-------

-------BEGIN-------
Method: create_view
SQL: CREATE VIEW universal_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'U'
    WITH LOCAL CHECK OPTION;
Fingerprint: 2728c27436cd12cd
Fingerprint Deparse: 2728c27436cd12cd
Deparse SQL: CREATE VIEW universal_comedies AS SELECT * FROM comedies WHERE classification = 'U' WITH LOCAL CHECK OPTION
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "universal_comedies", inh: true, relpersistence: "p", location: 12>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 45>>, location: 45>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "comedies", inh: true, relpersistence: "p", location: 56>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "classification">>], location: 75>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 92, sval: <PgQuery::String: sval: "U">>>, location: 90>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :LOCAL_CHECK_OPTION>>, stmt_location: 0, stmt_len: 123>]>
--------END-------

-------BEGIN-------
Method: create_view
SQL: CREATE VIEW pg_comedies AS
    SELECT *
    FROM comedies
    WHERE classification = 'PG'
    WITH CASCADED CHECK OPTION;
Fingerprint: 8e26d12175d3d900
Fingerprint Deparse: 8e26d12175d3d900
Deparse SQL: CREATE VIEW pg_comedies AS SELECT * FROM comedies WHERE classification = 'PG' WITH CHECK OPTION
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "pg_comedies", inh: true, relpersistence: "p", location: 12>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 38>>, location: 38>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "comedies", inh: true, relpersistence: "p", location: 49>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "classification">>], location: 68>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 85, sval: <PgQuery::String: sval: "PG">>>, location: 83>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :CASCADED_CHECK_OPTION>>, stmt_location: 0, stmt_len: 120>]>
--------END-------

-------BEGIN-------
Method: create_view
SQL: CREATE VIEW comedies AS
    SELECT f.*,
           country_code_to_name(f.country_code) AS country,
           (SELECT avg(r.rating)
            FROM user_ratings r
            WHERE r.film_id = f.id) AS avg_rating
    FROM films f
    WHERE f.kind = 'Comedy';
Fingerprint: b5211791a8ca51db
Fingerprint Deparse: b5211791a8ca51db
Deparse SQL: CREATE VIEW comedies AS SELECT f.*, country_code_to_name(f.country_code) AS country, (SELECT avg(r.rating) FROM user_ratings r WHERE r.film_id = f.id) AS avg_rating FROM films f WHERE f.kind = 'Comedy'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: view_stmt: <PgQuery::ViewStmt: view: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "comedies", inh: true, relpersistence: "p", location: 12>, aliases: [], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 35>>, location: 35>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "country", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "country_code_to_name">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: string: <PgQuery::String: sval: "country_code">>], location: 72>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 51>>, location: 51>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "avg_rating", indirection: [], val: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "r">>, <PgQuery::Node: string: <PgQuery::String: sval: "rating">>], location: 123>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 119>>, location: 119>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "user_ratings", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "r", colnames: []>, location: 150>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "r">>, <PgQuery::Node: string: <PgQuery::String: sval: "film_id">>], location: 183>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 195>>, location: 193>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 111>>, location: 111>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "f", colnames: []>, location: 224>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: string: <PgQuery::String: sval: "kind">>], location: 242>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 251, sval: <PgQuery::String: sval: "Comedy">>>, location: 249>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, replace: false, options: [], with_check_option: :NO_CHECK_OPTION>>, stmt_location: 0, stmt_len: 259>]>
--------END-------

-------BEGIN-------
Method: declare
SQL: DECLARE liahona CURSOR FOR SELECT * FROM films;
Fingerprint: 31e892ee1088e670
Fingerprint Deparse: 31e892ee1088e670
Deparse SQL: DECLARE liahona CURSOR FOR SELECT * FROM films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: declare_cursor_stmt: <PgQuery::DeclareCursorStmt: portalname: "liahona", options: 256, query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 34>>, location: 34>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 41>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>>>, stmt_location: 0, stmt_len: 46>]>
--------END-------

-------BEGIN-------
Method: delete
SQL: DELETE FROM films USING producers
  WHERE producer_id = producers.id AND producers.name = 'foo';
Fingerprint: 249936bc096973bb
Fingerprint Deparse: 249936bc096973bb
Deparse SQL: DELETE FROM films USING producers WHERE producer_id = producers.id AND producers.name = 'foo'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: delete_stmt: <PgQuery::DeleteStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, using_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "producers", inh: true, relpersistence: "p", location: 24>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "producer_id">>], location: 42>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "producers">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 56>>, location: 54>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "producers">>, <PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 73>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 90, sval: <PgQuery::String: sval: "foo">>>, location: 88>>], location: 69>>, returning_list: []>>, stmt_location: 0, stmt_len: 95>]>
--------END-------

-------BEGIN-------
Method: delete
SQL: DELETE FROM films
  WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo');
Fingerprint: d6268c9ec0b6f81c
Fingerprint Deparse: d6268c9ec0b6f81c
Deparse SQL: DELETE FROM films WHERE producer_id IN (SELECT id FROM producers WHERE name = 'foo')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: delete_stmt: <PgQuery::DeleteStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, using_clause: [], where_clause: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :ANY_SUBLINK, sub_link_id: 0, testexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "producer_id">>], location: 26>>, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 49>>, location: 49>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "producers", inh: true, relpersistence: "p", location: 57>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 73>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 80, sval: <PgQuery::String: sval: "foo">>>, location: 78>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 38>>, returning_list: []>>, stmt_location: 0, stmt_len: 86>]>
--------END-------

-------BEGIN-------
Method: delete
SQL: DELETE FROM films WHERE kind > 'Musical';
Fingerprint: d23b5cedc1c958b1
Fingerprint Deparse: d23b5cedc1c958b1
Deparse SQL: DELETE FROM films WHERE kind > 'Musical'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: delete_stmt: <PgQuery::DeleteStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, using_clause: [], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "kind">>], location: 24>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 31, sval: <PgQuery::String: sval: "Musical">>>, location: 29>>, returning_list: []>>, stmt_location: 0, stmt_len: 40>]>
--------END-------

-------BEGIN-------
Method: delete
SQL: DELETE FROM films;
Fingerprint: dc98fdaea3d4919e
Fingerprint Deparse: dc98fdaea3d4919e
Deparse SQL: DELETE FROM films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: delete_stmt: <PgQuery::DeleteStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, using_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 17>]>
--------END-------

-------BEGIN-------
Method: delete
SQL: DELETE FROM tasks WHERE status = 'DONE' RETURNING *;
Fingerprint: 2fa8a59f340b13d8
Fingerprint Deparse: 2fa8a59f340b13d8
Deparse SQL: DELETE FROM tasks WHERE status = 'DONE' RETURNING *
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: delete_stmt: <PgQuery::DeleteStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tasks", inh: true, relpersistence: "p", location: 12>, using_clause: [], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "status">>], location: 24>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 33, sval: <PgQuery::String: sval: "DONE">>>, location: 31>>, returning_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 50>>, location: 50>>]>>, stmt_location: 0, stmt_len: 51>]>
--------END-------

-------BEGIN-------
Method: delete
SQL: DELETE FROM tasks WHERE CURRENT OF c_tasks;
Fingerprint: 3bd0f5501df1b74c
Fingerprint Deparse: 3bd0f5501df1b74c
Deparse SQL: DELETE FROM tasks WHERE CURRENT OF c_tasks
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: delete_stmt: <PgQuery::DeleteStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tasks", inh: true, relpersistence: "p", location: 12>, using_clause: [], where_clause: <PgQuery::Node: current_of_expr: <PgQuery::CurrentOfExpr: cvarno: 0, cursor_name: "c_tasks", cursor_param: 0>>, returning_list: []>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: discard
SQL: CLOSE ALL;
SET SESSION AUTHORIZATION DEFAULT;
RESET ALL;
DEALLOCATE ALL;
UNLISTEN *;
SELECT pg_advisory_unlock_all();
DISCARD PLANS;
DISCARD TEMP;
DISCARD SEQUENCES;
Fingerprint: 84921ced9f078773
Fingerprint Deparse: 84921ced9f078773
Deparse SQL: CLOSE ALL; SET session_authorization TO DEFAULT; RESET ALL; DEALLOCATE ALL; UNLISTEN *; SELECT pg_advisory_unlock_all(); DISCARD PLANS; DISCARD TEMP; DISCARD SEQUENCES
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: close_portal_stmt: <PgQuery::ClosePortalStmt: portalname: "">>, stmt_location: 0, stmt_len: 9>, <PgQuery::RawStmt: stmt: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_DEFAULT, name: "session_authorization", args: [], is_local: false>>, stmt_location: 10, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_RESET_ALL, name: "", args: [], is_local: false>>, stmt_location: 45, stmt_len: 10>, <PgQuery::RawStmt: stmt: <PgQuery::Node: deallocate_stmt: <PgQuery::DeallocateStmt: name: "">>, stmt_location: 56, stmt_len: 15>, <PgQuery::RawStmt: stmt: <PgQuery::Node: unlisten_stmt: <PgQuery::UnlistenStmt: conditionname: "">>, stmt_location: 72, stmt_len: 11>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_advisory_unlock_all">>], args: [], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 92>>, location: 92>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 84, stmt_len: 32>, <PgQuery::RawStmt: stmt: <PgQuery::Node: discard_stmt: <PgQuery::DiscardStmt: target: :DISCARD_PLANS>>, stmt_location: 117, stmt_len: 14>, <PgQuery::RawStmt: stmt: <PgQuery::Node: discard_stmt: <PgQuery::DiscardStmt: target: :DISCARD_TEMP>>, stmt_location: 132, stmt_len: 13>, <PgQuery::RawStmt: stmt: <PgQuery::Node: discard_stmt: <PgQuery::DiscardStmt: target: :DISCARD_SEQUENCES>>, stmt_location: 146, stmt_len: 18>]>
--------END-------

-------BEGIN-------
Method: do
SQL: DO $$DECLARE r record;
BEGIN
    FOR r IN SELECT table_schema, table_name FROM information_schema.tables
             WHERE table_type = 'VIEW' AND table_schema = 'public'
    LOOP
        EXECUTE 'GRANT ALL ON ' || quote_ident(r.table_schema) || '.' || quote_ident(r.table_name) || ' TO webuser';
    END LOOP;
END$$;
Fingerprint: f936eab75b8c1b90
Fingerprint Deparse: f936eab75b8c1b90
Deparse SQL: DO $$DECLARE r record;
BEGIN
    FOR r IN SELECT table_schema, table_name FROM information_schema.tables
             WHERE table_type = 'VIEW' AND table_schema = 'public'
    LOOP
        EXECUTE 'GRANT ALL ON ' || quote_ident(r.table_schema) || '.' || quote_ident(r.table_name) || ' TO webuser';
    END LOOP;
END$$
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: do_stmt: <PgQuery::DoStmt: args: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "as", arg: <PgQuery::Node: string: <PgQuery::String: sval: "DECLARE r record;
BEGIN
    FOR r IN SELECT table_schema, table_name FROM information_schema.tables
             WHERE table_type = 'VIEW' AND table_schema = 'public'
    LOOP
        EXECUTE 'GRANT ALL ON ' || quote_ident(r.table_schema) || '.' || quote_ident(r.table_name) || ' TO webuser';
    END LOOP;
END">>, defaction: :DEFELEM_UNSPEC, location: 3>>]>>, stmt_location: 0, stmt_len: 317>]>
--------END-------

-------BEGIN-------
Method: drop_access_method
SQL: DROP ACCESS METHOD heptree;
Fingerprint: 4d3ff1bcd2e75bf0
Fingerprint Deparse: 4d3ff1bcd2e75bf0
Deparse SQL: DROP ACCESS METHOD heptree
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "heptree">>], remove_type: :OBJECT_ACCESS_METHOD, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 26>]>
--------END-------

-------BEGIN-------
Method: drop_aggregate
SQL: DROP AGGREGATE myavg(integer);
Fingerprint: 9a241be2c5242457
Fingerprint Deparse: 9a241be2c5242457
Deparse SQL: DROP AGGREGATE myavg(int)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "myavg">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 21>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 21>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>], remove_type: :OBJECT_AGGREGATE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 29>]>
--------END-------

-------BEGIN-------
Method: drop_aggregate
SQL: DROP AGGREGATE myrank(VARIADIC "any" ORDER BY VARIADIC "any");
Fingerprint: 51a8b1acf3065fb7
Fingerprint Deparse: 51a8b1acf3065fb7
Deparse SQL: DROP AGGREGATE myrank(VARIADIC "any")
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "myrank">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "any">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "any">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 31>, mode: :FUNC_PARAM_VARIADIC>>], args_unspecified: false>>], remove_type: :OBJECT_AGGREGATE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 61>]>
--------END-------

-------BEGIN-------
Method: drop_aggregate
SQL: DROP AGGREGATE myavg(integer), myavg(bigint);
Fingerprint: 85c1b5caaf2dc57e
Fingerprint Deparse: 85c1b5caaf2dc57e
Deparse SQL: DROP AGGREGATE myavg(int), myavg(bigint)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "myavg">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 21>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 21>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "myavg">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 37>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>], remove_type: :OBJECT_AGGREGATE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 44>]>
--------END-------

-------BEGIN-------
Method: drop_cast
SQL: DROP CAST (text AS int);
Fingerprint: 684b1b8525e0c5cc
Fingerprint Deparse: 684b1b8525e0c5cc
Deparse SQL: DROP CAST (text AS int)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 11>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>>]>>], remove_type: :OBJECT_CAST, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: drop_collation
SQL: DROP COLLATION german;
Fingerprint: 13027da1aa043e5b
Fingerprint Deparse: 13027da1aa043e5b
Deparse SQL: DROP COLLATION german
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "german">>]>>], remove_type: :OBJECT_COLLATION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 21>]>
--------END-------

-------BEGIN-------
Method: drop_conversion
SQL: DROP CONVERSION myname;
Fingerprint: f3ab58942b940010
Fingerprint Deparse: f3ab58942b940010
Deparse SQL: DROP CONVERSION myname
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "myname">>]>>], remove_type: :OBJECT_CONVERSION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: drop_domain
SQL: DROP DOMAIN box;
Fingerprint: a93e1b713b4790c0
Fingerprint Deparse: a93e1b713b4790c0
Deparse SQL: DROP DOMAIN box
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 12>>], remove_type: :OBJECT_DOMAIN, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 15>]>
--------END-------

-------BEGIN-------
Method: drop_event_trigger
SQL: DROP EVENT TRIGGER snitch;
Fingerprint: 5cb6a3ed3032b429
Fingerprint Deparse: 5cb6a3ed3032b429
Deparse SQL: DROP EVENT TRIGGER snitch
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "snitch">>], remove_type: :OBJECT_EVENT_TRIGGER, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 25>]>
--------END-------

-------BEGIN-------
Method: drop_extension
SQL: DROP EXTENSION hstore;
Fingerprint: 8e46a31bac12b36d
Fingerprint Deparse: 8e46a31bac12b36d
Deparse SQL: DROP EXTENSION hstore
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore">>], remove_type: :OBJECT_EXTENSION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 21>]>
--------END-------

-------BEGIN-------
Method: drop_foreign_data_wrapper
SQL: DROP FOREIGN DATA WRAPPER dbi;
Fingerprint: 9d32abb89d8bb65f
Fingerprint Deparse: 9d32abb89d8bb65f
Deparse SQL: DROP FOREIGN DATA WRAPPER dbi
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "dbi">>], remove_type: :OBJECT_FDW, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 29>]>
--------END-------

-------BEGIN-------
Method: drop_foreign_table
SQL: DROP FOREIGN TABLE films, distributors;
Fingerprint: cc23e82dfc5689af
Fingerprint Deparse: cc23e82dfc5689af
Deparse SQL: DROP FOREIGN TABLE films, distributors
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "films">>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "distributors">>]>>], remove_type: :OBJECT_FOREIGN_TABLE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: drop_function
SQL: DROP FUNCTION sqrt(integer);
Fingerprint: f0682f27bd52415f
Fingerprint Deparse: f0682f27bd52415f
Deparse SQL: DROP FUNCTION sqrt(int)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>], remove_type: :OBJECT_FUNCTION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 27>]>
--------END-------

-------BEGIN-------
Method: drop_function
SQL: DROP FUNCTION sqrt(integer), sqrt(bigint);
Fingerprint: 65d88e1752843b40
Fingerprint Deparse: 65d88e1752843b40
Deparse SQL: DROP FUNCTION sqrt(int), sqrt(bigint)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>, <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "sqrt">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 34>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 34>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>], remove_type: :OBJECT_FUNCTION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: drop_function
SQL: DROP FUNCTION update_employee_salaries;
Fingerprint: fcad6e550b443d84
Fingerprint Deparse: fcad6e550b443d84
Deparse SQL: DROP FUNCTION update_employee_salaries
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "update_employee_salaries">>], objargs: [], objfuncargs: [], args_unspecified: true>>], remove_type: :OBJECT_FUNCTION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: drop_function
SQL: DROP FUNCTION update_employee_salaries();
Fingerprint: c22cb6f140252777
Fingerprint Deparse: c22cb6f140252777
Deparse SQL: DROP FUNCTION update_employee_salaries()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "update_employee_salaries">>], objargs: [], objfuncargs: [], args_unspecified: false>>], remove_type: :OBJECT_FUNCTION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 40>]>
--------END-------

-------BEGIN-------
Method: drop_index
SQL: DROP INDEX title_idx;
Fingerprint: d109db4de3c08667
Fingerprint Deparse: d109db4de3c08667
Deparse SQL: DROP INDEX title_idx
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "title_idx">>]>>], remove_type: :OBJECT_INDEX, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 20>]>
--------END-------

-------BEGIN-------
Method: drop_language
SQL: DROP LANGUAGE plsample;
Fingerprint: 970da6d1c334c63b
Fingerprint Deparse: 970da6d1c334c63b
Deparse SQL: DROP LANGUAGE plsample
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "plsample">>], remove_type: :OBJECT_LANGUAGE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: drop_materialized_view
SQL: DROP MATERIALIZED VIEW order_summary;
Fingerprint: 95d4723784785a6f
Fingerprint Deparse: 95d4723784785a6f
Deparse SQL: DROP MATERIALIZED VIEW order_summary
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "order_summary">>]>>], remove_type: :OBJECT_MATVIEW, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: drop_opclass
SQL: DROP OPERATOR CLASS widget_ops USING btree;
Fingerprint: 37a70ba1196fb56f
Fingerprint Deparse: 37a70ba1196fb56f
Deparse SQL: DROP OPERATOR CLASS widget_ops USING btree
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "btree">>, <PgQuery::Node: string: <PgQuery::String: sval: "widget_ops">>]>>], remove_type: :OBJECT_OPCLASS, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: drop_operator
SQL: DROP OPERATOR ^ (integer, integer);
Fingerprint: 4b38a851236ec642
Fingerprint Deparse: 4b38a851236ec642
Deparse SQL: DROP OPERATOR ^(int, int)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "^">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 17>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 26>>], objfuncargs: [], args_unspecified: false>>], remove_type: :OBJECT_OPERATOR, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: drop_operator
SQL: DROP OPERATOR ~ (none, bit);
Fingerprint: 6ae8baac1980bfa2
Fingerprint Deparse: 6ae8baac1980bfa2
Deparse SQL: DROP OPERATOR ~(NONE, pg_catalog.bit(1))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "~">>], objargs: [<PgQuery::Node: >, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bit">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: -1, ival: <PgQuery::Integer: ival: 1>>>], typemod: -1, array_bounds: [], location: 23>>], objfuncargs: [], args_unspecified: false>>], remove_type: :OBJECT_OPERATOR, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 27>]>
--------END-------

-------BEGIN-------
Method: drop_operator
SQL: DROP OPERATOR ! (bigint, none);
Fingerprint: f849bab1a85b1fc0
Fingerprint Deparse: f849bab1a85b1fc0
Deparse SQL: DROP OPERATOR !(bigint, NONE)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "!">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 17>>, <PgQuery::Node: >], objfuncargs: [], args_unspecified: false>>], remove_type: :OBJECT_OPERATOR, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 30>]>
--------END-------

-------BEGIN-------
Method: drop_operator
SQL: DROP OPERATOR ~ (none, bit), ! (bigint, none);
Fingerprint: 1f7e5168d117df9d
Fingerprint Deparse: 1f7e5168d117df9d
Deparse SQL: DROP OPERATOR ~(NONE, pg_catalog.bit(1)), !(bigint, NONE)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "~">>], objargs: [<PgQuery::Node: >, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "bit">>], type_oid: 0, setof: false, pct_type: false, typmods: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: -1, ival: <PgQuery::Integer: ival: 1>>>], typemod: -1, array_bounds: [], location: 23>>], objfuncargs: [], args_unspecified: false>>, <PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "!">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int8">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 32>>, <PgQuery::Node: >], objfuncargs: [], args_unspecified: false>>], remove_type: :OBJECT_OPERATOR, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 45>]>
--------END-------

-------BEGIN-------
Method: drop_opfamily
SQL: DROP OPERATOR FAMILY float_ops USING btree;
Fingerprint: f2ed3324e52acb51
Fingerprint Deparse: f2ed3324e52acb51
Deparse SQL: DROP OPERATOR FAMILY float_ops USING btree
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "btree">>, <PgQuery::Node: string: <PgQuery::String: sval: "float_ops">>]>>], remove_type: :OBJECT_OPFAMILY, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: drop_policy
SQL: DROP POLICY p1 ON my_table;
Fingerprint: 673ceb93984c2a50
Fingerprint Deparse: 673ceb93984c2a50
Deparse SQL: DROP POLICY p1 ON my_table
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_table">>, <PgQuery::Node: string: <PgQuery::String: sval: "p1">>]>>], remove_type: :OBJECT_POLICY, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 26>]>
--------END-------

-------BEGIN-------
Method: drop_procedure
SQL: DROP PROCEDURE do_db_maintenance();
Fingerprint: db3e1f711dd707db
Fingerprint Deparse: db3e1f711dd707db
Deparse SQL: DROP PROCEDURE do_db_maintenance()
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "do_db_maintenance">>], objargs: [], objfuncargs: [], args_unspecified: false>>], remove_type: :OBJECT_PROCEDURE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: drop_publication
SQL: DROP PUBLICATION mypublication;
Fingerprint: f2017bf08dc63c7a
Fingerprint Deparse: f2017bf08dc63c7a
Deparse SQL: DROP PUBLICATION mypublication
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "mypublication">>], remove_type: :OBJECT_PUBLICATION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 30>]>
--------END-------

-------BEGIN-------
Method: drop_role
SQL: DROP ROLE jonathan;
Fingerprint: 34d68afd71c39659
Fingerprint Deparse: 34d68afd71c39659
Deparse SQL: DROP ROLE jonathan
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_role_stmt: <PgQuery::DropRoleStmt: roles: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "jonathan", location: 10>>], missing_ok: false>>, stmt_location: 0, stmt_len: 18>]>
--------END-------

-------BEGIN-------
Method: drop_routine
SQL: DROP ROUTINE foo(integer);
Fingerprint: bb0def09ad68c5cf
Fingerprint Deparse: bb0def09ad68c5cf
Deparse SQL: DROP ROUTINE foo(int)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: object_with_args: <PgQuery::ObjectWithArgs: objname: [<PgQuery::Node: string: <PgQuery::String: sval: "foo">>], objargs: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 17>>], objfuncargs: [<PgQuery::Node: function_parameter: <PgQuery::FunctionParameter: name: "", arg_type: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 17>, mode: :FUNC_PARAM_DEFAULT>>], args_unspecified: false>>], remove_type: :OBJECT_ROUTINE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 25>]>
--------END-------

-------BEGIN-------
Method: drop_rule
SQL: DROP RULE newrule ON mytable;
Fingerprint: 60d127e1ea2be18c
Fingerprint Deparse: 60d127e1ea2be18c
Deparse SQL: DROP RULE newrule ON mytable
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "mytable">>, <PgQuery::Node: string: <PgQuery::String: sval: "newrule">>]>>], remove_type: :OBJECT_RULE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 28>]>
--------END-------

-------BEGIN-------
Method: drop_schema
SQL: DROP SCHEMA mystuff CASCADE;
Fingerprint: 2495d633d0b67b69
Fingerprint Deparse: 2495d633d0b67b69
Deparse SQL: DROP SCHEMA mystuff CASCADE
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "mystuff">>], remove_type: :OBJECT_SCHEMA, behavior: :DROP_CASCADE, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 27>]>
--------END-------

-------BEGIN-------
Method: drop_sequence
SQL: DROP SEQUENCE serial;
Fingerprint: 467438756ca96bb2
Fingerprint Deparse: 467438756ca96bb2
Deparse SQL: DROP SEQUENCE serial
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "serial">>]>>], remove_type: :OBJECT_SEQUENCE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 20>]>
--------END-------

-------BEGIN-------
Method: drop_server
SQL: DROP SERVER IF EXISTS foo;
Fingerprint: 76d3e5ebe9099aec
Fingerprint Deparse: 76d3e5ebe9099aec
Deparse SQL: DROP SERVER IF EXISTS foo
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: string: <PgQuery::String: sval: "foo">>], remove_type: :OBJECT_FOREIGN_SERVER, behavior: :DROP_RESTRICT, missing_ok: true, concurrent: false>>, stmt_location: 0, stmt_len: 25>]>
--------END-------

-------BEGIN-------
Method: drop_statistics
SQL: DROP STATISTICS IF EXISTS
    accounting.users_uid_creation,
    public.grants_user_role;
Fingerprint: cd5709924288c15a
Fingerprint Deparse: cd5709924288c15a
Deparse SQL: DROP STATISTICS IF EXISTS accounting.users_uid_creation, public.grants_user_role
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "accounting">>, <PgQuery::Node: string: <PgQuery::String: sval: "users_uid_creation">>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "public">>, <PgQuery::Node: string: <PgQuery::String: sval: "grants_user_role">>]>>], remove_type: :OBJECT_STATISTIC_EXT, behavior: :DROP_RESTRICT, missing_ok: true, concurrent: false>>, stmt_location: 0, stmt_len: 88>]>
--------END-------

-------BEGIN-------
Method: drop_subscription
SQL: DROP SUBSCRIPTION mysub;
Fingerprint: 03d83ab395cc8309
Fingerprint Deparse: 03d83ab395cc8309
Deparse SQL: DROP SUBSCRIPTION mysub
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_subscription_stmt: <PgQuery::DropSubscriptionStmt: subname: "mysub", missing_ok: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: drop_table
SQL: DROP TABLE films, distributors;
Fingerprint: 8d3e42270aff9ca6
Fingerprint Deparse: 8d3e42270aff9ca6
Deparse SQL: DROP TABLE films, distributors
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "films">>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "distributors">>]>>], remove_type: :OBJECT_TABLE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 30>]>
--------END-------

-------BEGIN-------
Method: drop_tablespace
SQL: DROP TABLESPACE mystuff;
Fingerprint: 63a4e3a737e49b78
Fingerprint Deparse: 63a4e3a737e49b78
Deparse SQL: DROP TABLESPACE mystuff
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_table_space_stmt: <PgQuery::DropTableSpaceStmt: tablespacename: "mystuff", missing_ok: false>>, stmt_location: 0, stmt_len: 23>]>
--------END-------

-------BEGIN-------
Method: drop_transform
SQL: DROP TRANSFORM FOR hstore LANGUAGE plpythonu;
Fingerprint: abe2ef4caa6c38af
Fingerprint Deparse: abe2ef4caa6c38af
Deparse SQL: DROP TRANSFORM FOR hstore LANGUAGE plpythonu
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "hstore">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 19>>, <PgQuery::Node: string: <PgQuery::String: sval: "plpythonu">>]>>], remove_type: :OBJECT_TRANSFORM, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 44>]>
--------END-------

-------BEGIN-------
Method: drop_trigger
SQL: DROP TRIGGER if_dist_exists ON films;
Fingerprint: 47db7b112d680b81
Fingerprint Deparse: 47db7b112d680b81
Deparse SQL: DROP TRIGGER if_dist_exists ON films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "films">>, <PgQuery::Node: string: <PgQuery::String: sval: "if_dist_exists">>]>>], remove_type: :OBJECT_TRIGGER, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: drop_tsconfig
SQL: DROP TEXT SEARCH CONFIGURATION my_english;
Fingerprint: b535d3638586d13a
Fingerprint Deparse: b535d3638586d13a
Deparse SQL: DROP TEXT SEARCH CONFIGURATION my_english
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_english">>]>>], remove_type: :OBJECT_TSCONFIGURATION, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 41>]>
--------END-------

-------BEGIN-------
Method: drop_tsdictionary
SQL: DROP TEXT SEARCH DICTIONARY english;
Fingerprint: 96436109bc355813
Fingerprint Deparse: 96436109bc355813
Deparse SQL: DROP TEXT SEARCH DICTIONARY english
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "english">>]>>], remove_type: :OBJECT_TSDICTIONARY, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 35>]>
--------END-------

-------BEGIN-------
Method: drop_tsparser
SQL: DROP TEXT SEARCH PARSER my_parser;
Fingerprint: d8bd2fc994c2d6c7
Fingerprint Deparse: d8bd2fc994c2d6c7
Deparse SQL: DROP TEXT SEARCH PARSER my_parser
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "my_parser">>]>>], remove_type: :OBJECT_TSPARSER, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 33>]>
--------END-------

-------BEGIN-------
Method: drop_tstemplate
SQL: DROP TEXT SEARCH TEMPLATE thesaurus;
Fingerprint: 8441614b4636ab32
Fingerprint Deparse: 8441614b4636ab32
Deparse SQL: DROP TEXT SEARCH TEMPLATE thesaurus
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "thesaurus">>]>>], remove_type: :OBJECT_TSTEMPLATE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 35>]>
--------END-------

-------BEGIN-------
Method: drop_type
SQL: DROP TYPE box;
Fingerprint: e34afe51b436b4fc
Fingerprint Deparse: e34afe51b436b4fc
Deparse SQL: DROP TYPE box
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "box">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 10>>], remove_type: :OBJECT_TYPE, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 13>]>
--------END-------

-------BEGIN-------
Method: drop_user_mapping
SQL: DROP USER MAPPING IF EXISTS FOR bob SERVER foo;
Fingerprint: c7628f41990b4c22
Fingerprint Deparse: c7628f41990b4c22
Deparse SQL: DROP USER MAPPING IF EXISTS FOR bob SERVER foo
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_user_mapping_stmt: <PgQuery::DropUserMappingStmt: user: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "bob", location: 32>, servername: "foo", missing_ok: true>>, stmt_location: 0, stmt_len: 46>]>
--------END-------

-------BEGIN-------
Method: drop_view
SQL: DROP VIEW kinds;
Fingerprint: f261eafa206bde67
Fingerprint Deparse: f261eafa206bde67
Deparse SQL: DROP VIEW kinds
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: drop_stmt: <PgQuery::DropStmt: objects: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "kinds">>]>>], remove_type: :OBJECT_VIEW, behavior: :DROP_RESTRICT, missing_ok: false, concurrent: false>>, stmt_location: 0, stmt_len: 15>]>
--------END-------

-------BEGIN-------
Method: end
SQL: END;
Fingerprint: 7bbcde9cfab6c79c
Fingerprint Deparse: 7bbcde9cfab6c79c
Deparse SQL: COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 3>]>
--------END-------

-------BEGIN-------
Method: grant
SQL: GRANT INSERT ON films TO PUBLIC;
Fingerprint: 93a3de7ece478ebf
Fingerprint Deparse: 93a3de7ece478ebf
Deparse SQL: GRANT insert ON films TO public
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: grant_stmt: <PgQuery::GrantStmt: is_grant: true, targtype: :ACL_TARGET_OBJECT, objtype: :OBJECT_TABLE, objects: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 16>>], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "insert", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_PUBLIC, rolename: "", location: 25>>], grant_option: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 31>]>
--------END-------

-------BEGIN-------
Method: grant
SQL: GRANT ALL PRIVILEGES ON kinds TO manuel;
Fingerprint: c4c020e7f1c12e7c
Fingerprint Deparse: c4c020e7f1c12e7c
Deparse SQL: GRANT ALL ON kinds TO manuel
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: grant_stmt: <PgQuery::GrantStmt: is_grant: true, targtype: :ACL_TARGET_OBJECT, objtype: :OBJECT_TABLE, objects: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "kinds", inh: true, relpersistence: "p", location: 24>>], privileges: [], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "manuel", location: 33>>], grant_option: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 39>]>
--------END-------

-------BEGIN-------
Method: grant
SQL: GRANT admins TO joe;
Fingerprint: 99d7bca9e2c5be43
Fingerprint Deparse: 99d7bca9e2c5be43
Deparse SQL: GRANT admins TO joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: grant_role_stmt: <PgQuery::GrantRoleStmt: granted_roles: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "admins", cols: []>>], grantee_roles: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 16>>], is_grant: true, admin_opt: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 19>]>
--------END-------

-------BEGIN-------
Method: import_foreign_schema
SQL: IMPORT FOREIGN SCHEMA foreign_films
    FROM SERVER film_server INTO films;
Fingerprint: c38071f72f1cf93f
Fingerprint Deparse: c38071f72f1cf93f
Deparse SQL: IMPORT FOREIGN SCHEMA foreign_films FROM SERVER film_server INTO films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: import_foreign_schema_stmt: <PgQuery::ImportForeignSchemaStmt: server_name: "film_server", remote_schema: "foreign_films", local_schema: "films", list_type: :FDW_IMPORT_SCHEMA_ALL, table_list: [], options: []>>, stmt_location: 0, stmt_len: 74>]>
--------END-------

-------BEGIN-------
Method: import_foreign_schema
SQL: IMPORT FOREIGN SCHEMA foreign_films LIMIT TO (actors, directors)
    FROM SERVER film_server INTO films;
Fingerprint: b9683a1f48dc2168
Fingerprint Deparse: b9683a1f48dc2168
Deparse SQL: IMPORT FOREIGN SCHEMA foreign_films LIMIT TO (actors, directors) FROM SERVER film_server INTO films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: import_foreign_schema_stmt: <PgQuery::ImportForeignSchemaStmt: server_name: "film_server", remote_schema: "foreign_films", local_schema: "films", list_type: :FDW_IMPORT_SCHEMA_LIMIT_TO, table_list: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "actors", inh: true, relpersistence: "p", location: 46>>, <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "directors", inh: true, relpersistence: "p", location: 54>>], options: []>>, stmt_location: 0, stmt_len: 103>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');
Fingerprint: a72e44975e8312b8
Fingerprint Deparse: a72e44975e8312b8
Deparse SQL: INSERT INTO films VALUES ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 30, sval: <PgQuery::String: sval: "UA502">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 39, sval: <PgQuery::String: sval: "Bananas">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 50, ival: <PgQuery::Integer: ival: 105>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, sval: <PgQuery::String: sval: "1971-07-13">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 69, sval: <PgQuery::String: sval: "Comedy">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 79, sval: <PgQuery::String: sval: "82 minutes">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 92>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
Fingerprint: 00878caba4778f8e
Fingerprint Deparse: 00878caba4778f8e
Deparse SQL: INSERT INTO films (code, title, did, date_prod, kind) VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "code", indirection: [], location: 19>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "title", indirection: [], location: 25>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 32>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "date_prod", indirection: [], location: 37>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "kind", indirection: [], location: 48>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 66, sval: <PgQuery::String: sval: "T_601">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 75, sval: <PgQuery::String: sval: "Yojimbo">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 86, ival: <PgQuery::Integer: ival: 106>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 91, sval: <PgQuery::String: sval: "1961-06-16">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 105, sval: <PgQuery::String: sval: "Drama">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 113>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes');
INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama');
Fingerprint: 6605d1f6a8c10285
Fingerprint Deparse: 6605d1f6a8c10285
Deparse SQL: INSERT INTO films VALUES ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'); INSERT INTO films (code, title, did, date_prod, kind) VALUES ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 30, sval: <PgQuery::String: sval: "UA502">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 39, sval: <PgQuery::String: sval: "Bananas">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 50, ival: <PgQuery::Integer: ival: 105>>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 55>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 64, sval: <PgQuery::String: sval: "Comedy">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 74, sval: <PgQuery::String: sval: "82 minutes">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 87>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 101>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "code", indirection: [], location: 108>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "title", indirection: [], location: 114>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 121>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "date_prod", indirection: [], location: 126>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "kind", indirection: [], location: 137>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 155, sval: <PgQuery::String: sval: "T_601">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 164, sval: <PgQuery::String: sval: "Yojimbo">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 175, ival: <PgQuery::Integer: ival: 106>>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 180>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 189, sval: <PgQuery::String: sval: "Drama">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 88, stmt_len: 109>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO films DEFAULT VALUES;
Fingerprint: 9f2010d49f37d224
Fingerprint Deparse: 9f2010d49f37d224
Deparse SQL: INSERT INTO films DEFAULT VALUES
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [], returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 32>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO films (code, title, did, date_prod, kind) VALUES
    ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'),
    ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy');
Fingerprint: 00878caba4778f8e
Fingerprint Deparse: 00878caba4778f8e
Deparse SQL: INSERT INTO films (code, title, did, date_prod, kind) VALUES ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'), ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "code", indirection: [], location: 19>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "title", indirection: [], location: 25>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 32>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "date_prod", indirection: [], location: 37>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "kind", indirection: [], location: 48>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 66, sval: <PgQuery::String: sval: "B6717">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 75, sval: <PgQuery::String: sval: "Tampopo">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 86, ival: <PgQuery::Integer: ival: 110>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 91, sval: <PgQuery::String: sval: "1985-02-10">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 105, sval: <PgQuery::String: sval: "Comedy">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 121, sval: <PgQuery::String: sval: "HG120">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 130, sval: <PgQuery::String: sval: "The Dinner Game">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 149, ival: <PgQuery::Integer: ival: 140>>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 154>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 163, sval: <PgQuery::String: sval: "Comedy">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 172>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO films SELECT * FROM tmp_films WHERE date_prod  '2004-05-07';
Fingerprint: 51d8cf6cf1c5bfcb
Fingerprint Deparse: 51d8cf6cf1c5bfcb
Deparse SQL: INSERT INTO films SELECT * FROM tmp_films WHERE '2004-05-07'::date_prod
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 25>>, location: 25>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tmp_films", inh: true, relpersistence: "p", location: 32>>], where_clause: <PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 59, sval: <PgQuery::String: sval: "2004-05-07">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "date_prod">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 48>, location: -1>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 71>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: -- Create an empty 3x3 gameboard for noughts-and-crosses
INSERT INTO tictactoe (game, board[1:3][1:3])
    VALUES (1, '{{" "," "," "},{" "," "," "},{" "," "," "}}');
-- The subscripts in the above example aren't really needed
INSERT INTO tictactoe (game, board)
    VALUES (2, '{{X," "," "},{" ",O," "},{" ",X," "}}');
Fingerprint: 4d299d0e2bdb05d6
Fingerprint Deparse: 4d299d0e2bdb05d6
Deparse SQL: INSERT INTO tictactoe (game, board[1:3][1:3]) VALUES (1, '{{" "," "," "},{" "," "," "},{" "," "," "}}'); INSERT INTO tictactoe (game, board) VALUES (2, '{{X," "," "},{" ",O," "},{" ",X," "}}')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tictactoe", inh: true, relpersistence: "p", location: 69>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "game", indirection: [], location: 80>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "board", indirection: [<PgQuery::Node: a_indices: <PgQuery::A_Indices: is_slice: true, lidx: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 92, ival: <PgQuery::Integer: ival: 1>>>, uidx: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 94, ival: <PgQuery::Integer: ival: 3>>>>>, <PgQuery::Node: a_indices: <PgQuery::A_Indices: is_slice: true, lidx: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 97, ival: <PgQuery::Integer: ival: 1>>>, uidx: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 99, ival: <PgQuery::Integer: ival: 3>>>>>], location: 86>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 115, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 118, sval: <PgQuery::String: sval: "{{" "," "," "},{" "," "," "},{" "," "," "}}">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 164>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "tictactoe", inh: true, relpersistence: "p", location: 238>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "game", indirection: [], location: 249>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "board", indirection: [], location: 255>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 274, ival: <PgQuery::Integer: ival: 2>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 277, sval: <PgQuery::String: sval: "{{X," "," "},{" ",O," "},{" ",X," "}}">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 165, stmt_len: 152>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets')
   RETURNING did;
Fingerprint: e6efbcbecc3f3f34
Fingerprint Deparse: e6efbcbecc3f3f34
Deparse SQL: INSERT INTO distributors (did, dname) VALUES (DEFAULT, 'XYZ Widgets') RETURNING did
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 26>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], location: 31>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 46>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, sval: <PgQuery::String: sval: "XYZ Widgets">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "did">>], location: 83>>, location: 83>>], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 86>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: WITH upd AS (
  UPDATE employees SET sales_count = sales_count + 1 WHERE id =
    (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')
    RETURNING *
)
INSERT INTO employees_log SELECT *, current_timestamp FROM upd;
Fingerprint: 6373193879e29abc
Fingerprint Deparse: 6373193879e29abc
Deparse SQL: WITH upd AS (UPDATE employees SET sales_count = sales_count + 1 WHERE id = (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation') RETURNING *) INSERT INTO employees_log SELECT *, current_timestamp FROM upd
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees_log", inh: true, relpersistence: "p", location: 180>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 201>>, location: 201>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: sqlvalue_function: <PgQuery::SQLValueFunction: op: :SVFOP_CURRENT_TIMESTAMP, type: 0, typmod: -1, location: 204>>, location: 204>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "upd", inh: true, relpersistence: "p", location: 227>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], with_clause: <PgQuery::WithClause: ctes: [<PgQuery::Node: common_table_expr: <PgQuery::CommonTableExpr: ctename: "upd", aliascolnames: [], ctematerialized: :CTEMaterializeDefault, ctequery: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 23>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "sales_count", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "sales_count">>], location: 51>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 65, ival: <PgQuery::Integer: ival: 1>>>, location: 63>>, location: 37>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 73>>, rexpr: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "sales_person">>], location: 90>>, location: 90>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 108>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 123>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 130, sval: <PgQuery::String: sval: "Acme Corporation">>>, location: 128>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 82>>, location: 76>>, from_clause: [], returning_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 164>>, location: 164>>]>>, location: 5, cterecursive: false, cterefcount: 0, ctecolnames: [], ctecoltypes: [], ctecoltypmods: [], ctecolcollations: []>>], recursive: false, location: 0>, override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 230>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO distributors (did, dname)
    VALUES (5, 'Gizmo Transglobal'), (6, 'Associated Computing, Inc')
    ON CONFLICT (did) DO UPDATE SET dname = EXCLUDED.dname;
Fingerprint: cfe7fcf642000ab5
Fingerprint Deparse: cfe7fcf642000ab5
Deparse SQL: INSERT INTO distributors (did, dname) VALUES (5, 'Gizmo Transglobal'), (6, 'Associated Computing, Inc') ON CONFLICT (did) DO UPDATE SET dname = excluded.dname
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 26>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], location: 31>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 50, ival: <PgQuery::Integer: ival: 5>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 53, sval: <PgQuery::String: sval: "Gizmo Transglobal">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 76, ival: <PgQuery::Integer: ival: 6>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 79, sval: <PgQuery::String: sval: "Associated Computing, Inc">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, on_conflict_clause: <PgQuery::OnConflictClause: action: :ONCONFLICT_UPDATE, infer: <PgQuery::InferClause: index_elems: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "did", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], conname: "", location: 124>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "excluded">>, <PgQuery::Node: string: <PgQuery::String: sval: "dname">>], location: 152>>, location: 144>>], location: 112>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 166>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: INSERT INTO distributors (did, dname) VALUES (7, 'Redline GmbH')
    ON CONFLICT (did) DO NOTHING;
Fingerprint: b6243c8174f4c486
Fingerprint Deparse: b6243c8174f4c486
Deparse SQL: INSERT INTO distributors (did, dname) VALUES (7, 'Redline GmbH') ON CONFLICT (did) DO NOTHING
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 26>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], location: 31>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 46, ival: <PgQuery::Integer: ival: 7>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 49, sval: <PgQuery::String: sval: "Redline GmbH">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, on_conflict_clause: <PgQuery::OnConflictClause: action: :ONCONFLICT_NOTHING, infer: <PgQuery::InferClause: index_elems: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "did", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], conname: "", location: 81>, target_list: [], location: 69>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 97>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: -- Don't update existing distributors based in a certain ZIP code
INSERT INTO distributors AS d (did, dname) VALUES (8, 'Anvil Distribution')
    ON CONFLICT (did) DO UPDATE
    SET dname = EXCLUDED.dname || ' (formerly ' || d.dname || ')'
    WHERE d.zipcode > '21201';

-- Name a constraint directly in the statement (uses associated
-- index to arbitrate taking the DO NOTHING action)
INSERT INTO distributors (did, dname) VALUES (9, 'Antwerp Design')
    ON CONFLICT ON CONSTRAINT distributors_pkey DO NOTHING;
Fingerprint: f56c1b75895f1e27
Fingerprint Deparse: f56c1b75895f1e27
Deparse SQL: INSERT INTO distributors AS d (did, dname) VALUES (8, 'Anvil Distribution') ON CONFLICT (did) DO UPDATE SET dname = ((excluded.dname || ' (formerly ') || d.dname) || ')' WHERE d.zipcode > '21201'; INSERT INTO distributors (did, dname) VALUES (9, 'Antwerp Design') ON CONFLICT ON CONSTRAINT distributors_pkey DO NOTHING
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "d", colnames: []>, location: 78>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 97>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], location: 102>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 117, ival: <PgQuery::Integer: ival: 8>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 120, sval: <PgQuery::String: sval: "Anvil Distribution">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, on_conflict_clause: <PgQuery::OnConflictClause: action: :ONCONFLICT_UPDATE, infer: <PgQuery::InferClause: index_elems: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "did", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], conname: "", location: 158>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "||">>], lexpr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "||">>], lexpr: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "||">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "excluded">>, <PgQuery::Node: string: <PgQuery::String: sval: "dname">>], location: 190>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 208, sval: <PgQuery::String: sval: " (formerly ">>>, location: 205>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "d">>, <PgQuery::Node: string: <PgQuery::String: sval: "dname">>], location: 225>>, location: 222>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 236, sval: <PgQuery::String: sval: ")">>>, location: 233>>, location: 182>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "d">>, <PgQuery::Node: string: <PgQuery::String: sval: "zipcode">>], location: 250>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 262, sval: <PgQuery::String: sval: "21201">>>, location: 260>>, location: 146>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 269>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 400>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 414>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], location: 419>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 434, ival: <PgQuery::Integer: ival: 9>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 437, sval: <PgQuery::String: sval: "Antwerp Design">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, on_conflict_clause: <PgQuery::OnConflictClause: action: :ONCONFLICT_NOTHING, infer: <PgQuery::InferClause: index_elems: [], conname: "distributors_pkey", location: 471>, target_list: [], location: 459>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 270, stmt_len: 243>]>
--------END-------

-------BEGIN-------
Method: insert
SQL: -- This statement could infer a partial unique index on "did"
-- with a predicate of "WHERE is_active", but it could also
-- just use a regular unique constraint on "did"
INSERT INTO distributors (did, dname) VALUES (10, 'Conrad International')
    ON CONFLICT (did) WHERE is_active DO NOTHING;
Fingerprint: 290b83d8fc948468
Fingerprint Deparse: 290b83d8fc948468
Deparse SQL: INSERT INTO distributors (did, dname) VALUES (10, 'Conrad International') ON CONFLICT (did) WHERE is_active DO NOTHING
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 183>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 197>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "dname", indirection: [], location: 202>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 217, ival: <PgQuery::Integer: ival: 10>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 221, sval: <PgQuery::String: sval: "Conrad International">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, on_conflict_clause: <PgQuery::OnConflictClause: action: :ONCONFLICT_NOTHING, infer: <PgQuery::InferClause: index_elems: [<PgQuery::Node: index_elem: <PgQuery::IndexElem: name: "did", indexcolname: "", collation: [], opclass: [], opclassopts: [], ordering: :SORTBY_DEFAULT, nulls_ordering: :SORTBY_NULLS_DEFAULT>>], where_clause: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "is_active">>], location: 273>>, conname: "", location: 261>, target_list: [], location: 249>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 293>]>
--------END-------

-------BEGIN-------
Method: lock
SQL: BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
    WHERE name = 'Star Wars: Episode I - The Phantom Menace';
-- Do ROLLBACK if record was not returned
INSERT INTO films_user_comments VALUES
    (_id_, 'GREAT! I was waiting for it for so long!');
COMMIT WORK;
Fingerprint: c9238125e5b34a2d
Fingerprint Deparse: c9238125e5b34a2d
Deparse SQL: BEGIN; LOCK TABLE films IN SHARE MODE; SELECT id FROM films WHERE name = 'Star Wars: Episode I - The Phantom Menace'; INSERT INTO films_user_comments VALUES (_id_, 'GREAT! I was waiting for it for so long!'); COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 10>, <PgQuery::RawStmt: stmt: <PgQuery::Node: lock_stmt: <PgQuery::LockStmt: relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 23>>], mode: 5, nowait: false>>, stmt_location: 11, stmt_len: 31>, <PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 51>>, location: 51>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 59>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 75>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 82, sval: <PgQuery::String: sval: "Star Wars: Episode I - The Phantom Menace">>>, location: 80>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 43, stmt_len: 82>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films_user_comments", inh: true, relpersistence: "p", location: 181>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "_id_">>], location: 213>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 219, sval: <PgQuery::String: sval: "GREAT! I was waiting for it for so long!">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 126, stmt_len: 136>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 263, stmt_len: 12>]>
--------END-------

-------BEGIN-------
Method: prepare
SQL: EXPLAIN EXECUTE name(parameter_values);
Fingerprint: 82edd46342bae6ab
Fingerprint Deparse: 82edd46342bae6ab
Deparse SQL: EXPLAIN EXECUTE name(parameter_values)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: explain_stmt: <PgQuery::ExplainStmt: query: <PgQuery::Node: execute_stmt: <PgQuery::ExecuteStmt: name: "name", params: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "parameter_values">>], location: 21>>]>>, options: []>>, stmt_location: 0, stmt_len: 38>]>
--------END-------

-------BEGIN-------
Method: prepare
SQL: PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
Fingerprint: 5cea114593e42845
Fingerprint Deparse: 5cea114593e42845
Deparse SQL: PREPARE fooplan(int, text, bool, numeric) AS INSERT INTO foo VALUES ($1, $2, $3, $4); EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: prepare_stmt: <PgQuery::PrepareStmt: name: "fooplan", argtypes: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 17>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "text">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 22>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "bool">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 28>>, <PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "numeric">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 34>>], query: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "foo", inh: true, relpersistence: "p", location: 62>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 1, location: 73>>, <PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 2, location: 77>>, <PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 3, location: 81>>, <PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 4, location: 85>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>>>, stmt_location: 0, stmt_len: 88>, <PgQuery::RawStmt: stmt: <PgQuery::Node: execute_stmt: <PgQuery::ExecuteStmt: name: "fooplan", params: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 106, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 109, sval: <PgQuery::String: sval: "Hunter Valley">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 126, sval: <PgQuery::String: sval: "t">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 131, fval: <PgQuery::Float: fval: "200.00">>>]>>, stmt_location: 89, stmt_len: 49>]>
--------END-------

-------BEGIN-------
Method: prepare
SQL: PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
Fingerprint: 158e7f4f532a3ecb
Fingerprint Deparse: 158e7f4f532a3ecb
Deparse SQL: PREPARE usrrptplan(int) AS SELECT * FROM users u, logs l WHERE u.usrid = $1 AND u.usrid = l.usrid AND l.date = $2; EXECUTE usrrptplan(1, current_date)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: prepare_stmt: <PgQuery::PrepareStmt: name: "usrrptplan", argtypes: [<PgQuery::Node: type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "pg_catalog">>, <PgQuery::Node: string: <PgQuery::String: sval: "int4">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 20>>], query: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 39>>, location: 39>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "users", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "u", colnames: []>, location: 46>>, <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "logs", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "l", colnames: []>, location: 55>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "u">>, <PgQuery::Node: string: <PgQuery::String: sval: "usrid">>], location: 68>>, rexpr: <PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 1, location: 76>>, location: 75>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "u">>, <PgQuery::Node: string: <PgQuery::String: sval: "usrid">>], location: 83>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "l">>, <PgQuery::Node: string: <PgQuery::String: sval: "usrid">>], location: 91>>, location: 90>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "l">>, <PgQuery::Node: string: <PgQuery::String: sval: "date">>], location: 107>>, rexpr: <PgQuery::Node: param_ref: <PgQuery::ParamRef: number: 2, location: 116>>, location: 114>>], location: 79>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>>>, stmt_location: 0, stmt_len: 118>, <PgQuery::RawStmt: stmt: <PgQuery::Node: execute_stmt: <PgQuery::ExecuteStmt: name: "usrrptplan", params: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 139, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: sqlvalue_function: <PgQuery::SQLValueFunction: op: :SVFOP_CURRENT_DATE, type: 0, typmod: -1, location: 142>>]>>, stmt_location: 119, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: prepare_transaction
SQL: PREPARE TRANSACTION 'foobar';
Fingerprint: d993959a33d627d4
Fingerprint Deparse: d993959a33d627d4
Deparse SQL: PREPARE TRANSACTION 'foobar'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_PREPARE, options: [], savepoint_name: "", gid: "foobar", chain: false>>, stmt_location: 0, stmt_len: 28>]>
--------END-------

-------BEGIN-------
Method: refresh_materialized_view
SQL: REFRESH MATERIALIZED VIEW order_summary;
Fingerprint: fe1504680c6d4587
Fingerprint Deparse: fe1504680c6d4587
Deparse SQL: REFRESH MATERIALIZED VIEW order_summary
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: refresh_mat_view_stmt: <PgQuery::RefreshMatViewStmt: concurrent: false, skip_data: false, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "order_summary", inh: true, relpersistence: "p", location: 26>>>, stmt_location: 0, stmt_len: 39>]>
--------END-------

-------BEGIN-------
Method: refresh_materialized_view
SQL: REFRESH MATERIALIZED VIEW annual_statistics_basis WITH NO DATA;
Fingerprint: 20d5caff5600846c
Fingerprint Deparse: 20d5caff5600846c
Deparse SQL: REFRESH MATERIALIZED VIEW annual_statistics_basis WITH NO DATA
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: refresh_mat_view_stmt: <PgQuery::RefreshMatViewStmt: concurrent: false, skip_data: true, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "annual_statistics_basis", inh: true, relpersistence: "p", location: 26>>>, stmt_location: 0, stmt_len: 62>]>
--------END-------

-------BEGIN-------
Method: reindex
SQL: REINDEX INDEX my_index;
Fingerprint: f5f434f675b428f1
Fingerprint Deparse: f5f434f675b428f1
Deparse SQL: REINDEX INDEX my_index
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: reindex_stmt: <PgQuery::ReindexStmt: kind: :REINDEX_OBJECT_INDEX, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "my_index", inh: true, relpersistence: "p", location: 14>, name: "", params: []>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: reindex
SQL: REINDEX TABLE my_table;
Fingerprint: b10b8f60809f07b6
Fingerprint Deparse: b10b8f60809f07b6
Deparse SQL: REINDEX TABLE my_table
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: reindex_stmt: <PgQuery::ReindexStmt: kind: :REINDEX_OBJECT_TABLE, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "my_table", inh: true, relpersistence: "p", location: 14>, name: "", params: []>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: reindex
SQL: REINDEX TABLE CONCURRENTLY my_broken_table;
Fingerprint: cd4b547ffa89a355
Fingerprint Deparse: cd4b547ffa89a355
Deparse SQL: REINDEX (CONCURRENTLY) TABLE my_broken_table
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: reindex_stmt: <PgQuery::ReindexStmt: kind: :REINDEX_OBJECT_TABLE, relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "my_broken_table", inh: true, relpersistence: "p", location: 27>, name: "", params: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "concurrently", defaction: :DEFELEM_UNSPEC, location: 14>>]>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: release_savepoint
SQL: BEGIN;
    INSERT INTO table1 VALUES (3);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (4);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;
Fingerprint: 5582e4359a385723
Fingerprint Deparse: 5582e4359a385723
Deparse SQL: BEGIN; INSERT INTO table1 VALUES (3); SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (4); RELEASE my_savepoint; COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 23>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 38, ival: <PgQuery::Integer: ival: 3>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 6, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_SAVEPOINT, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 41, stmt_len: 27>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 86>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 101, ival: <PgQuery::Integer: ival: 4>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 69, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_RELEASE, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 104, stmt_len: 35>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 140, stmt_len: 7>]>
--------END-------

-------BEGIN-------
Method: revoke
SQL: REVOKE INSERT ON films FROM PUBLIC;
Fingerprint: 766d92c3152c72e1
Fingerprint Deparse: 766d92c3152c72e1
Deparse SQL: REVOKE insert ON films FROM public
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: grant_stmt: <PgQuery::GrantStmt: is_grant: false, targtype: :ACL_TARGET_OBJECT, objtype: :OBJECT_TABLE, objects: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 17>>], privileges: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "insert", cols: []>>], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_PUBLIC, rolename: "", location: 28>>], grant_option: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: revoke
SQL: REVOKE ALL PRIVILEGES ON kinds FROM manuel;
Fingerprint: 610019cf0d70fc49
Fingerprint Deparse: 610019cf0d70fc49
Deparse SQL: REVOKE ALL ON kinds FROM manuel
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: grant_stmt: <PgQuery::GrantStmt: is_grant: false, targtype: :ACL_TARGET_OBJECT, objtype: :OBJECT_TABLE, objects: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "kinds", inh: true, relpersistence: "p", location: 25>>], privileges: [], grantees: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "manuel", location: 36>>], grant_option: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 42>]>
--------END-------

-------BEGIN-------
Method: revoke
SQL: REVOKE admins FROM joe;
Fingerprint: 4ae0f97e4487a747
Fingerprint Deparse: 4ae0f97e4487a747
Deparse SQL: REVOKE admins FROM joe
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: grant_role_stmt: <PgQuery::GrantRoleStmt: granted_roles: [<PgQuery::Node: access_priv: <PgQuery::AccessPriv: priv_name: "admins", cols: []>>], grantee_roles: [<PgQuery::Node: role_spec: <PgQuery::RoleSpec: roletype: :ROLESPEC_CSTRING, rolename: "joe", location: 19>>], is_grant: false, admin_opt: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 22>]>
--------END-------

-------BEGIN-------
Method: rollback
SQL: ROLLBACK;
Fingerprint: a46081a556fda027
Fingerprint Deparse: a46081a556fda027
Deparse SQL: ROLLBACK
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_ROLLBACK, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 8>]>
--------END-------

-------BEGIN-------
Method: rollback_prepared
SQL: ROLLBACK PREPARED 'foobar';
Fingerprint: d1a052eac2b86394
Fingerprint Deparse: d1a052eac2b86394
Deparse SQL: ROLLBACK PREPARED 'foobar'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_ROLLBACK_PREPARED, options: [], savepoint_name: "", gid: "foobar", chain: false>>, stmt_location: 0, stmt_len: 26>]>
--------END-------

-------BEGIN-------
Method: rollback_to
SQL: ROLLBACK TO SAVEPOINT my_savepoint;
Fingerprint: ede7bfabb934a1db
Fingerprint Deparse: ede7bfabb934a1db
Deparse SQL: ROLLBACK TO SAVEPOINT my_savepoint
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_ROLLBACK_TO, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 0, stmt_len: 34>]>
--------END-------

-------BEGIN-------
Method: savepoint
SQL: BEGIN;
    INSERT INTO table1 VALUES (1);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (2);
    ROLLBACK TO SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (3);
COMMIT;
Fingerprint: 590afb522f0f8361
Fingerprint Deparse: 590afb522f0f8361
Deparse SQL: BEGIN; INSERT INTO table1 VALUES (1); SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (2); ROLLBACK TO SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (3); COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 23>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 38, ival: <PgQuery::Integer: ival: 1>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 6, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_SAVEPOINT, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 41, stmt_len: 27>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 86>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 101, ival: <PgQuery::Integer: ival: 2>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 69, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_ROLLBACK_TO, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 104, stmt_len: 39>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 161>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 176, ival: <PgQuery::Integer: ival: 3>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 144, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 179, stmt_len: 7>]>
--------END-------

-------BEGIN-------
Method: savepoint
SQL: BEGIN;
    INSERT INTO table1 VALUES (3);
    SAVEPOINT my_savepoint;
    INSERT INTO table1 VALUES (4);
    RELEASE SAVEPOINT my_savepoint;
COMMIT;
Fingerprint: 5582e4359a385723
Fingerprint Deparse: 5582e4359a385723
Deparse SQL: BEGIN; INSERT INTO table1 VALUES (3); SAVEPOINT my_savepoint; INSERT INTO table1 VALUES (4); RELEASE my_savepoint; COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 23>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 38, ival: <PgQuery::Integer: ival: 3>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 6, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_SAVEPOINT, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 41, stmt_len: 27>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "table1", inh: true, relpersistence: "p", location: 86>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 101, ival: <PgQuery::Integer: ival: 4>>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 69, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_RELEASE, options: [], savepoint_name: "my_savepoint", gid: "", chain: false>>, stmt_location: 104, stmt_len: 35>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 140, stmt_len: 7>]>
--------END-------

-------BEGIN-------
Method: security_label
SQL: SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0';
Fingerprint: be24ec815ca9c95b
Fingerprint Deparse: be24ec815ca9c95b
Deparse SQL: SECURITY LABEL FOR selinux ON TABLE mytable IS 'system_u:object_r:sepgsql_table_t:s0'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: sec_label_stmt: <PgQuery::SecLabelStmt: objtype: :OBJECT_TABLE, object: <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: string: <PgQuery::String: sval: "mytable">>]>>, provider: "selinux", label: "system_u:object_r:sepgsql_table_t:s0">>, stmt_location: 0, stmt_len: 85>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT DISTINCT ON (location) location, time, report
    FROM weather_reports
    ORDER BY location, time DESC;
Fingerprint: c99ab0e62fb20a8b
Fingerprint Deparse: c99ab0e62fb20a8b
Deparse SQL: SELECT DISTINCT ON (location) location, "time", report FROM weather_reports ORDER BY location, "time" DESC
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 20>>], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 30>>, location: 30>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "time">>], location: 40>>, location: 40>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "report">>], location: 46>>, location: 46>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "weather_reports", inh: true, relpersistence: "p", location: 62>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [<PgQuery::Node: sort_by: <PgQuery::SortBy: node: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "location">>], location: 91>>, sortby_dir: :SORTBY_DEFAULT, sortby_nulls: :SORTBY_NULLS_DEFAULT, use_op: [], location: -1>>, <PgQuery::Node: sort_by: <PgQuery::SortBy: node: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "time">>], location: 101>>, sortby_dir: :SORTBY_DESC, sortby_nulls: :SORTBY_NULLS_DEFAULT, use_op: [], location: -1>>], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 110>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT name FROM distributors ORDER BY code;
Fingerprint: 79215e45397ce93d
Fingerprint Deparse: 79215e45397ce93d
Deparse SQL: SELECT name FROM distributors ORDER BY code
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "distributors", inh: true, relpersistence: "p", location: 17>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [<PgQuery::Node: sort_by: <PgQuery::SortBy: node: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "code">>], location: 39>>, sortby_dir: :SORTBY_DEFAULT, sortby_nulls: :SORTBY_NULLS_DEFAULT, use_op: [], location: -1>>], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;
Fingerprint: 5c98db6c91fa16fe
Fingerprint Deparse: 5c98db6c91fa16fe
Deparse SQL: SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_subselect: <PgQuery::RangeSubselect: lateral: false, subquery: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 22>>, location: 22>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "mytable", inh: true, relpersistence: "p", location: 29>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [<PgQuery::Node: locking_clause: <PgQuery::LockingClause: locked_rels: [], strength: :LCS_FORUPDATE, wait_policy: :LockWaitBlock>>], op: :SETOP_NONE, all: false>>, alias: <PgQuery::Alias: aliasname: "ss", colnames: []>>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "col1">>], location: 58>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 65, ival: <PgQuery::Integer: ival: 5>>>, location: 63>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 66>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;
Fingerprint: 4188f363bd315cc0
Fingerprint Deparse: 4188f363bd315cc0
Deparse SQL: SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_subselect: <PgQuery::RangeSubselect: lateral: false, subquery: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 22>>, location: 22>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "mytable", inh: true, relpersistence: "p", location: 29>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [<PgQuery::Node: locking_clause: <PgQuery::LockingClause: locked_rels: [], strength: :LCS_FORUPDATE, wait_policy: :LockWaitBlock>>], op: :SETOP_NONE, all: false>>, alias: <PgQuery::Alias: aliasname: "ss", colnames: []>>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [<PgQuery::Node: sort_by: <PgQuery::SortBy: node: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "column1">>], location: 61>>, sortby_dir: :SORTBY_DEFAULT, sortby_nulls: :SORTBY_NULLS_DEFAULT, use_op: [], location: -1>>], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 68>]>
--------END-------

-------BEGIN-------
Method: select
SQL: TABLE name
Fingerprint: 160197502747d709
Fingerprint Deparse: 160197502747d709
Deparse SQL: SELECT * FROM name
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: -1>>, location: -1>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "name", inh: true, relpersistence: "p", location: 6>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 0>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT * FROM name
Fingerprint: 160197502747d709
Fingerprint Deparse: 160197502747d709
Deparse SQL: SELECT * FROM name
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "name", inh: true, relpersistence: "p", location: 14>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 0>]>
--------END-------

-------BEGIN-------
Method: select
SQL: WITH RECURSIVE employee_recursive(distance, employee_name, manager_name) AS (
    SELECT 1, employee_name, manager_name
    FROM employee
    WHERE manager_name = 'Mary'
  UNION ALL
    SELECT er.distance + 1, e.employee_name, e.manager_name
    FROM employee_recursive er, employee e
    WHERE er.employee_name = e.manager_name
  )
SELECT distance, employee_name FROM employee_recursive;
Fingerprint: c0546e8966de8c12
Fingerprint Deparse: c0546e8966de8c12
Deparse SQL: WITH RECURSIVE employee_recursive(distance, employee_name, manager_name) AS (SELECT 1, employee_name, manager_name FROM employee WHERE manager_name = 'Mary' UNION ALL SELECT er.distance + 1, e.employee_name, e.manager_name FROM employee_recursive er, employee e WHERE er.employee_name = e.manager_name) SELECT distance, employee_name FROM employee_recursive
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "distance">>], location: 340>>, location: 340>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "employee_name">>], location: 350>>, location: 350>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employee_recursive", inh: true, relpersistence: "p", location: 369>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], with_clause: <PgQuery::WithClause: ctes: [<PgQuery::Node: common_table_expr: <PgQuery::CommonTableExpr: ctename: "employee_recursive", aliascolnames: [<PgQuery::Node: string: <PgQuery::String: sval: "distance">>, <PgQuery::Node: string: <PgQuery::String: sval: "employee_name">>, <PgQuery::Node: string: <PgQuery::String: sval: "manager_name">>], ctematerialized: :CTEMaterializeDefault, ctequery: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_UNION, all: true, larg: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 89, ival: <PgQuery::Integer: ival: 1>>>, location: 89>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "employee_name">>], location: 92>>, location: 92>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "manager_name">>], location: 107>>, location: 107>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employee", inh: true, relpersistence: "p", location: 129>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "manager_name">>], location: 148>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 163, sval: <PgQuery::String: sval: "Mary">>>, location: 161>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>, rarg: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "er">>, <PgQuery::Node: string: <PgQuery::String: sval: "distance">>], location: 193>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 207, ival: <PgQuery::Integer: ival: 1>>>, location: 205>>, location: 193>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "e">>, <PgQuery::Node: string: <PgQuery::String: sval: "employee_name">>], location: 210>>, location: 210>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "e">>, <PgQuery::Node: string: <PgQuery::String: sval: "manager_name">>], location: 227>>, location: 227>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employee_recursive", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "er", colnames: []>, location: 251>>, <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employee", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "e", colnames: []>, location: 274>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "er">>, <PgQuery::Node: string: <PgQuery::String: sval: "employee_name">>], location: 295>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "e">>, <PgQuery::Node: string: <PgQuery::String: sval: "manager_name">>], location: 314>>, location: 312>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>>, location: 15, cterecursive: false, cterefcount: 0, ctecolnames: [], ctecoltypes: [], ctecoltypmods: [], ctecolcollations: []>>], recursive: true, location: 0>, op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 387>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT m.name AS mname, pname
FROM manufacturers m, LATERAL get_product_names(m.id) pname;
Fingerprint: 23dff917acf35b26
Fingerprint Deparse: 23dff917acf35b26
Deparse SQL: SELECT m.name AS mname, pname FROM manufacturers m, LATERAL get_product_names(m.id) pname
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "mname", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "m">>, <PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 7>>, location: 7>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "pname">>], location: 24>>, location: 24>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "manufacturers", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "m", colnames: []>, location: 35>>, <PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: true, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "get_product_names">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "m">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 78>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 60>>, <PgQuery::Node: >]>>], alias: <PgQuery::Alias: aliasname: "pname", colnames: []>, coldeflist: []>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 89>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT m.name AS mname, pname
FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true;
Fingerprint: f9a82b90477ea7a7
Fingerprint Deparse: f9a82b90477ea7a7
Deparse SQL: SELECT m.name AS mname, pname FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "mname", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "m">>, <PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 7>>, location: 7>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "pname">>], location: 24>>, location: 24>>], from_clause: [<PgQuery::Node: join_expr: <PgQuery::JoinExpr: jointype: :JOIN_LEFT, is_natural: false, larg: <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "manufacturers", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "m", colnames: []>, location: 35>>, rarg: <PgQuery::Node: range_function: <PgQuery::RangeFunction: lateral: true, ordinality: false, is_rowsfrom: false, functions: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "get_product_names">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "m">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 87>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 69>>, <PgQuery::Node: >]>>], alias: <PgQuery::Alias: aliasname: "pname", colnames: []>, coldeflist: []>>, using_clause: [], quals: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 102, boolval: <PgQuery::Boolean: boolval: true>>>, rtindex: 0>>], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 106>]>
--------END-------

-------BEGIN-------
Method: select
SQL: SELECT distributors.* WHERE distributors.name = 'Westward';
Fingerprint: 940abe84a200909b
Fingerprint Deparse: 940abe84a200909b
Deparse SQL: SELECT distributors.* WHERE distributors.name = 'Westward'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "distributors">>, <PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "distributors">>, <PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 28>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 48, sval: <PgQuery::String: sval: "Westward">>>, location: 46>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 58>]>
--------END-------

-------BEGIN-------
Method: select_into
SQL: SELECT * INTO films_recent FROM films WHERE date_prod >= '2002-01-01';
Fingerprint: 89c0b4972626679c
Fingerprint Deparse: 89c0b4972626679c
Deparse SQL: SELECT * INTO films_recent FROM films WHERE date_prod >= '2002-01-01'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], into_clause: <PgQuery::IntoClause: rel: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films_recent", inh: true, relpersistence: "p", location: 14>, col_names: [], access_method: "", options: [], on_commit: :ONCOMMIT_NOOP, table_space_name: "", skip_data: false>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 32>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "date_prod">>], location: 44>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 57, sval: <PgQuery::String: sval: "2002-01-01">>>, location: 54>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 69>]>
--------END-------

-------BEGIN-------
Method: set
SQL: SELECT setseed(value);
Fingerprint: 777707df175f0a45
Fingerprint Deparse: 777707df175f0a45
Deparse SQL: SELECT setseed(value)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "setseed">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "value">>], location: 15>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 7>>, location: 7>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 21>]>
--------END-------

-------BEGIN-------
Method: set
SQL: SET search_path TO my_schema, public;
Fingerprint: 972eb2e22f47f95c
Fingerprint Deparse: 972eb2e22f47f95c
Deparse SQL: SET search_path TO my_schema, public
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_VALUE, name: "search_path", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 19, sval: <PgQuery::String: sval: "my_schema">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 30, sval: <PgQuery::String: sval: "public">>>], is_local: false>>, stmt_location: 0, stmt_len: 36>]>
--------END-------

-------BEGIN-------
Method: set_transaction
SQL: BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET TRANSACTION SNAPSHOT '00000003-0000001B-1';
Fingerprint: 194de673bdd3a51e
Fingerprint Deparse: 194de673bdd3a51e
Deparse SQL: BEGIN ISOLATION LEVEL REPEATABLE READ; SET TRANSACTION SNAPSHOT '00000003-0000001B-1'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "transaction_isolation", arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 34, sval: <PgQuery::String: sval: "repeatable read">>>, defaction: :DEFELEM_UNSPEC, location: 18>>], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 49>, <PgQuery::RawStmt: stmt: <PgQuery::Node: variable_set_stmt: <PgQuery::VariableSetStmt: kind: :VAR_SET_MULTI, name: "TRANSACTION SNAPSHOT", args: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 76, sval: <PgQuery::String: sval: "00000003-0000001B-1">>>], is_local: false>>, stmt_location: 50, stmt_len: 47>]>
--------END-------

-------BEGIN-------
Method: truncate
SQL: TRUNCATE bigtable, fattable;
Fingerprint: 5e677244cd9dde21
Fingerprint Deparse: 5e677244cd9dde21
Deparse SQL: TRUNCATE bigtable, fattable
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: truncate_stmt: <PgQuery::TruncateStmt: relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "bigtable", inh: true, relpersistence: "p", location: 9>>, <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "fattable", inh: true, relpersistence: "p", location: 19>>], restart_seqs: false, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 27>]>
--------END-------

-------BEGIN-------
Method: truncate
SQL: TRUNCATE bigtable, fattable RESTART IDENTITY;
Fingerprint: 54f3d78c27d51c8b
Fingerprint Deparse: 54f3d78c27d51c8b
Deparse SQL: TRUNCATE bigtable, fattable RESTART IDENTITY
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: truncate_stmt: <PgQuery::TruncateStmt: relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "bigtable", inh: true, relpersistence: "p", location: 9>>, <PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "fattable", inh: true, relpersistence: "p", location: 19>>], restart_seqs: true, behavior: :DROP_RESTRICT>>, stmt_location: 0, stmt_len: 44>]>
--------END-------

-------BEGIN-------
Method: truncate
SQL: TRUNCATE othertable CASCADE;
Fingerprint: 7a0b69968bff3487
Fingerprint Deparse: 7a0b69968bff3487
Deparse SQL: TRUNCATE othertable CASCADE
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: truncate_stmt: <PgQuery::TruncateStmt: relations: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "othertable", inh: true, relpersistence: "p", location: 9>>], restart_seqs: false, behavior: :DROP_CASCADE>>, stmt_location: 0, stmt_len: 27>]>
--------END-------

-------BEGIN-------
Method: unlisten
SQL: UNLISTEN virtual;
NOTIFY virtual;
-- no NOTIFY event is received
Fingerprint: 07639002677072c4
Fingerprint Deparse: 07639002677072c4
Deparse SQL: UNLISTEN virtual; NOTIFY virtual
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: unlisten_stmt: <PgQuery::UnlistenStmt: conditionname: "virtual">>, stmt_location: 0, stmt_len: 16>, <PgQuery::RawStmt: stmt: <PgQuery::Node: notify_stmt: <PgQuery::NotifyStmt: conditionname: "virtual", payload: "">>, stmt_location: 17, stmt_len: 15>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
Fingerprint: 3d4c6c30aad093db
Fingerprint Deparse: 3d4c6c30aad093db
Deparse SQL: UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "kind", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 24, sval: <PgQuery::String: sval: "Dramatic">>>, location: 17>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "kind">>], location: 41>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 48, sval: <PgQuery::String: sval: "Drama">>>, location: 46>>, from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 55>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
Fingerprint: 3fc3e7c76d606b61
Fingerprint Deparse: 3fc3e7c76d606b61
Deparse SQL: UPDATE weather SET temp_lo = temp_lo + 1, temp_hi = temp_lo + 15, prcp = DEFAULT WHERE city = 'San Francisco' AND date = '2003-07-03'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "weather", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "temp_lo", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 29>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 37, ival: <PgQuery::Integer: ival: 1>>>, location: 36>>, location: 19>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "temp_hi", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 50>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 58, ival: <PgQuery::Integer: ival: 15>>>, location: 57>>, location: 40>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "prcp", indirection: [], val: <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 69>>, location: 62>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "city">>], location: 85>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 92, sval: <PgQuery::String: sval: "San Francisco">>>, location: 90>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], location: 112>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 119, sval: <PgQuery::String: sval: "2003-07-03">>>, location: 117>>], location: 108>>, from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 131>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
Fingerprint: add663fc407b5380
Fingerprint Deparse: add663fc407b5380
Deparse SQL: UPDATE weather SET temp_lo = temp_lo + 1, temp_hi = temp_lo + 15, prcp = DEFAULT WHERE city = 'San Francisco' AND date = '2003-07-03' RETURNING temp_lo, temp_hi, prcp
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "weather", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "temp_lo", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 29>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 37, ival: <PgQuery::Integer: ival: 1>>>, location: 36>>, location: 19>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "temp_hi", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 50>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 58, ival: <PgQuery::Integer: ival: 15>>>, location: 57>>, location: 40>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "prcp", indirection: [], val: <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 69>>, location: 62>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "city">>], location: 85>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 92, sval: <PgQuery::String: sval: "San Francisco">>>, location: 90>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], location: 112>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 119, sval: <PgQuery::String: sval: "2003-07-03">>>, location: 117>>], location: 108>>, from_clause: [], returning_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 144>>, location: 144>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_hi">>], location: 153>>, location: 153>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "prcp">>], location: 162>>, location: 162>>]>>, stmt_location: 0, stmt_len: 166>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
Fingerprint: 27f56a8952cd1a33
Fingerprint Deparse: 27f56a8952cd1a33
Deparse SQL: UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo + 1, temp_lo + 15, DEFAULT) WHERE city = 'San Francisco' AND date = '2003-07-03'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "weather", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "temp_lo", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: row_expr: <PgQuery::RowExpr: args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 47>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, ival: <PgQuery::Integer: ival: 1>>>, location: 54>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 58>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 66, ival: <PgQuery::Integer: ival: 15>>>, location: 65>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 70>>], row_typeid: 0, row_format: :COERCE_IMPLICIT_CAST, colnames: [], location: 46>>, colno: 1, ncolumns: 3>>, location: 20>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "temp_hi", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: row_expr: <PgQuery::RowExpr: args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 47>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, ival: <PgQuery::Integer: ival: 1>>>, location: 54>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 58>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 66, ival: <PgQuery::Integer: ival: 15>>>, location: 65>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 70>>], row_typeid: 0, row_format: :COERCE_IMPLICIT_CAST, colnames: [], location: 46>>, colno: 2, ncolumns: 3>>, location: 29>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "prcp", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: row_expr: <PgQuery::RowExpr: args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 47>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, ival: <PgQuery::Integer: ival: 1>>>, location: 54>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "temp_lo">>], location: 58>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 66, ival: <PgQuery::Integer: ival: 15>>>, location: 65>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 70>>], row_typeid: 0, row_format: :COERCE_IMPLICIT_CAST, colnames: [], location: 46>>, colno: 3, ncolumns: 3>>, location: 38>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "city">>], location: 87>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 94, sval: <PgQuery::String: sval: "San Francisco">>>, location: 92>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "date">>], location: 114>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 121, sval: <PgQuery::String: sval: "2003-07-03">>>, location: 119>>], location: 110>>, from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 133>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
Fingerprint: 78242c80e975d7fa
Fingerprint Deparse: 78242c80e975d7fa
Deparse SQL: UPDATE employees SET sales_count = sales_count + 1 FROM accounts WHERE accounts.name = 'Acme Corporation' AND employees.id = accounts.sales_person
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "sales_count", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "sales_count">>], location: 35>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 49, ival: <PgQuery::Integer: ival: 1>>>, location: 47>>, location: 21>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "accounts">>, <PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 73>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 89, sval: <PgQuery::String: sval: "Acme Corporation">>>, location: 87>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "employees">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 114>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "accounts">>, <PgQuery::Node: string: <PgQuery::String: sval: "sales_person">>], location: 129>>, location: 127>>], location: 110>>, from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 56>>], returning_list: []>>, stmt_location: 0, stmt_len: 150>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
Fingerprint: 935b58245af72855
Fingerprint Deparse: 935b58245af72855
Deparse SQL: UPDATE employees SET sales_count = sales_count + 1 WHERE id = (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "sales_count", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "sales_count">>], location: 35>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 49, ival: <PgQuery::Integer: ival: 1>>>, location: 47>>, location: 21>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 57>>, rexpr: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "sales_person">>], location: 72>>, location: 72>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 90>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "name">>], location: 105>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 112, sval: <PgQuery::String: sval: "Acme Corporation">>>, location: 110>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 64>>, location: 60>>, from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 131>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE accounts SET (contact_first_name, contact_last_name) =
    (SELECT first_name, last_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
Fingerprint: 95e9bc00835cfb16
Fingerprint Deparse: 95e9bc00835cfb16
Deparse SQL: UPDATE accounts SET (contact_first_name, contact_last_name) = (SELECT first_name, last_name FROM salesmen WHERE salesmen.id = accounts.sales_id)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "contact_first_name", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "first_name">>], location: 74>>, location: 74>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "last_name">>], location: 86>>, location: 86>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "salesmen", inh: true, relpersistence: "p", location: 101>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "salesmen">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 121>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "accounts">>, <PgQuery::Node: string: <PgQuery::String: sval: "sales_id">>], location: 135>>, location: 133>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 66>>, colno: 1, ncolumns: 2>>, location: 21>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "contact_last_name", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "first_name">>], location: 74>>, location: 74>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "last_name">>], location: 86>>, location: 86>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "salesmen", inh: true, relpersistence: "p", location: 101>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "salesmen">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 121>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "accounts">>, <PgQuery::Node: string: <PgQuery::String: sval: "sales_id">>], location: 135>>, location: 133>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 66>>, colno: 2, ncolumns: 2>>, location: 41>>], from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 153>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE accounts SET contact_first_name = first_name,
                    contact_last_name = last_name
  FROM salesmen WHERE salesmen.id = accounts.sales_id;
Fingerprint: 2cfab307a128ba05
Fingerprint Deparse: 2cfab307a128ba05
Deparse SQL: UPDATE accounts SET contact_first_name = first_name, contact_last_name = last_name FROM salesmen WHERE salesmen.id = accounts.sales_id
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "accounts", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "contact_first_name", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "first_name">>], location: 41>>, location: 20>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "contact_last_name", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "last_name">>], location: 93>>, location: 73>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "salesmen">>, <PgQuery::Node: string: <PgQuery::String: sval: "id">>], location: 125>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "accounts">>, <PgQuery::Node: string: <PgQuery::String: sval: "sales_id">>], location: 139>>, location: 137>>, from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "salesmen", inh: true, relpersistence: "p", location: 110>>], returning_list: []>>, stmt_location: 0, stmt_len: 156>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) =
    (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d
     WHERE d.group_id = s.group_id);
Fingerprint: c1899d66d8c898a3
Fingerprint Deparse: c1899d66d8c898a3
Deparse SQL: UPDATE summary s SET (sum_x, sum_y, avg_x, avg_y) = (SELECT sum(x), sum(y), avg(x), avg(y) FROM data d WHERE d.group_id = s.group_id)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "summary", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "s", colnames: []>, location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "sum_x", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 68>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 64>>, location: 64>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 76>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 72>>, location: 72>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 84>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 80>>, location: 80>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 92>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 88>>, location: 88>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "data", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "d", colnames: []>, location: 100>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "d">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 118>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "s">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 131>>, location: 129>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 56>>, colno: 1, ncolumns: 4>>, location: 22>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "sum_y", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 68>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 64>>, location: 64>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 76>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 72>>, location: 72>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 84>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 80>>, location: 80>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 92>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 88>>, location: 88>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "data", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "d", colnames: []>, location: 100>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "d">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 118>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "s">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 131>>, location: 129>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 56>>, colno: 2, ncolumns: 4>>, location: 29>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "avg_x", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 68>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 64>>, location: 64>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 76>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 72>>, location: 72>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 84>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 80>>, location: 80>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 92>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 88>>, location: 88>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "data", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "d", colnames: []>, location: 100>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "d">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 118>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "s">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 131>>, location: 129>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 56>>, colno: 3, ncolumns: 4>>, location: 36>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "avg_y", indirection: [], val: <PgQuery::Node: multi_assign_ref: <PgQuery::MultiAssignRef: source: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :EXPR_SUBLINK, sub_link_id: 0, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 68>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 64>>, location: 64>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "sum">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 76>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 72>>, location: 72>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "x">>], location: 84>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 80>>, location: 80>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: func_call: <PgQuery::FuncCall: funcname: [<PgQuery::Node: string: <PgQuery::String: sval: "avg">>], args: [<PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "y">>], location: 92>>], agg_order: [], agg_within_group: false, agg_star: false, agg_distinct: false, func_variadic: false, funcformat: :COERCE_EXPLICIT_CALL, location: 88>>, location: 88>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "data", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "d", colnames: []>, location: 100>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "d">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 118>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "s">>, <PgQuery::Node: string: <PgQuery::String: sval: "group_id">>], location: 131>>, location: 129>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 56>>, colno: 4, ncolumns: 4>>, location: 43>>], from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 142>]>
--------END-------

-------BEGIN-------
Method: update
SQL: BEGIN;
-- other operations
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
-- Assume the above fails because of a unique key violation,
-- so now we issue these commands:
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
-- continue with other operations, and eventually
COMMIT;
Fingerprint: c79a60e833908bb0
Fingerprint Deparse: c79a60e833908bb0
Deparse SQL: BEGIN; SAVEPOINT sp1; INSERT INTO wines VALUES ('Chateau Lafite 2003', '24'); ROLLBACK TO SAVEPOINT sp1; UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003'; COMMIT
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_BEGIN, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 0, stmt_len: 5>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_SAVEPOINT, options: [], savepoint_name: "sp1", gid: "", chain: false>>, stmt_location: 6, stmt_len: 34>, <PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "wines", inh: true, relpersistence: "p", location: 54>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 67, sval: <PgQuery::String: sval: "Chateau Lafite 2003">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 90, sval: <PgQuery::String: sval: "24">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 41, stmt_len: 54>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_ROLLBACK_TO, options: [], savepoint_name: "sp1", gid: "", chain: false>>, stmt_location: 96, stmt_len: 112>, <PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "wines", inh: true, relpersistence: "p", location: 217>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "stock", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "+">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "stock">>], location: 235>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 243, ival: <PgQuery::Integer: ival: 24>>>, location: 241>>, location: 227>>], where_clause: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "winename">>], location: 252>>, rexpr: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 263, sval: <PgQuery::String: sval: "Chateau Lafite 2003">>>, location: 261>>, from_clause: [], returning_list: []>>, stmt_location: 209, stmt_len: 75>, <PgQuery::RawStmt: stmt: <PgQuery::Node: transaction_stmt: <PgQuery::TransactionStmt: kind: :TRANS_STMT_COMMIT, options: [], savepoint_name: "", gid: "", chain: false>>, stmt_location: 285, stmt_len: 57>]>
--------END-------

-------BEGIN-------
Method: update
SQL: UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
Fingerprint: 58baba74b968b2bb
Fingerprint Deparse: 58baba74b968b2bb
Deparse SQL: UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 7>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "kind", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 24, sval: <PgQuery::String: sval: "Dramatic">>>, location: 17>>], where_clause: <PgQuery::Node: current_of_expr: <PgQuery::CurrentOfExpr: cvarno: 0, cursor_name: "c_films", cursor_param: 0>>, from_clause: [], returning_list: []>>, stmt_location: 0, stmt_len: 59>]>
--------END-------

-------BEGIN-------
Method: vacuum
SQL: VACUUM (VERBOSE, ANALYZE) onek;
Fingerprint: 6e21370958ae8ec4
Fingerprint Deparse: 6e21370958ae8ec4
Deparse SQL: VACUUM (VERBOSE, ANALYZE) onek
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: vacuum_stmt: <PgQuery::VacuumStmt: options: [<PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "verbose", defaction: :DEFELEM_UNSPEC, location: 8>>, <PgQuery::Node: def_elem: <PgQuery::DefElem: defnamespace: "", defname: "analyze", defaction: :DEFELEM_UNSPEC, location: 17>>], rels: [<PgQuery::Node: vacuum_relation: <PgQuery::VacuumRelation: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "onek", inh: true, relpersistence: "p", location: 26>, oid: 0, va_cols: []>>], is_vacuumcmd: true>>, stmt_location: 0, stmt_len: 30>]>
--------END-------

-------BEGIN-------
Method: values
SQL: VALUES (1, 'one'), (2, 'two'), (3, 'three');
Fingerprint: c4a415ece0b3cef5
Fingerprint Deparse: c4a415ece0b3cef5
Deparse SQL: VALUES (1, 'one'), (2, 'two'), (3, 'three')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 8, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 11, sval: <PgQuery::String: sval: "one">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 20, ival: <PgQuery::Integer: ival: 2>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 23, sval: <PgQuery::String: sval: "two">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 32, ival: <PgQuery::Integer: ival: 3>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 35, sval: <PgQuery::String: sval: "three">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 43>]>
--------END-------

-------BEGIN-------
Method: values
SQL: SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
Fingerprint: 805a04e2bccca108
Fingerprint Deparse: 805a04e2bccca108
Deparse SQL: (SELECT 1 AS column1, 'one' AS column2 UNION ALL SELECT 2, 'two') UNION ALL SELECT 3, 'three'
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_UNION, all: true, larg: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_UNION, all: true, larg: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "column1", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 7, ival: <PgQuery::Integer: ival: 1>>>, location: 7>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "column2", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 21, sval: <PgQuery::String: sval: "one">>>, location: 21>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>, rarg: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 55, ival: <PgQuery::Integer: ival: 2>>>, location: 55>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 58, sval: <PgQuery::String: sval: "two">>>, location: 58>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, rarg: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 81, ival: <PgQuery::Integer: ival: 3>>>, location: 81>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 84, sval: <PgQuery::String: sval: "three">>>, location: 84>>], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>>, stmt_location: 0, stmt_len: 91>]>
--------END-------

-------BEGIN-------
Method: values
SQL: INSERT INTO films (code, title, did, date_prod, kind)
    VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama');
Fingerprint: 00878caba4778f8e
Fingerprint Deparse: 00878caba4778f8e
Deparse SQL: INSERT INTO films (code, title, did, date_prod, kind) VALUES ('T_601', 'Yojimbo', 106, '1961-06-16', 'Drama')
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "code", indirection: [], location: 19>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "title", indirection: [], location: 25>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "did", indirection: [], location: 32>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "date_prod", indirection: [], location: 37>>, <PgQuery::Node: res_target: <PgQuery::ResTarget: name: "kind", indirection: [], location: 48>>], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 66, sval: <PgQuery::String: sval: "T_601">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 75, sval: <PgQuery::String: sval: "Yojimbo">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 86, ival: <PgQuery::Integer: ival: 106>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 91, sval: <PgQuery::String: sval: "1961-06-16">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 105, sval: <PgQuery::String: sval: "Drama">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 113>]>
--------END-------

-------BEGIN-------
Method: values
SQL: INSERT INTO films VALUES
    ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'),
    ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT);
Fingerprint: a72e44975e8312b8
Fingerprint Deparse: a72e44975e8312b8
Deparse SQL: INSERT INTO films VALUES ('UA502', 'Bananas', 105, DEFAULT, 'Comedy', '82 minutes'), ('T_601', 'Yojimbo', 106, DEFAULT, 'Drama', DEFAULT)
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: insert_stmt: <PgQuery::InsertStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", location: 12>, cols: [], select_stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 30, sval: <PgQuery::String: sval: "UA502">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 39, sval: <PgQuery::String: sval: "Bananas">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 50, ival: <PgQuery::Integer: ival: 105>>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 55>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 64, sval: <PgQuery::String: sval: "Comedy">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 74, sval: <PgQuery::String: sval: "82 minutes">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 94, sval: <PgQuery::String: sval: "T_601">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 103, sval: <PgQuery::String: sval: "Yojimbo">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 114, ival: <PgQuery::Integer: ival: 106>>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 119>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 128, sval: <PgQuery::String: sval: "Drama">>>, <PgQuery::Node: set_to_default: <PgQuery::SetToDefault: type_id: 0, type_mod: 0, collation: 0, location: 137>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, returning_list: [], override: :OVERRIDING_NOT_SET>>, stmt_location: 0, stmt_len: 145>]>
--------END-------

-------BEGIN-------
Method: values
SQL: SELECT f.*
  FROM films f, (VALUES('MGM', 'Horror'), ('UA', 'Sci-Fi')) AS t (studio, kind)
  WHERE f.studio = t.studio AND f.kind = t.kind;

UPDATE employees SET salary = salary * v.increase
  FROM (VALUES(1, 200000, 1.2), (2, 400000, 1.4)) AS v (depno, target, increase)
  WHERE employees.depno = v.depno AND employees.sales >= v.target;
Fingerprint: c49bc13a6f2e21bf
Fingerprint Deparse: c49bc13a6f2e21bf
Deparse SQL: SELECT f.* FROM films f, (VALUES ('MGM', 'Horror'), ('UA', 'Sci-Fi')) t(studio, kind) WHERE f.studio = t.studio AND f.kind = t.kind; UPDATE employees SET salary = salary * v.increase FROM (VALUES (1, 200000, 1.2), (2, 400000, 1.4)) v(depno, target, increase) WHERE employees.depno = v.depno AND employees.sales >= v.target
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "films", inh: true, relpersistence: "p", alias: <PgQuery::Alias: aliasname: "f", colnames: []>, location: 18>>, <PgQuery::Node: range_subselect: <PgQuery::RangeSubselect: lateral: false, subquery: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 35, sval: <PgQuery::String: sval: "MGM">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 42, sval: <PgQuery::String: sval: "Horror">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 54, sval: <PgQuery::String: sval: "UA">>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 60, sval: <PgQuery::String: sval: "Sci-Fi">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, alias: <PgQuery::Alias: aliasname: "t", colnames: [<PgQuery::Node: string: <PgQuery::String: sval: "studio">>, <PgQuery::Node: string: <PgQuery::String: sval: "kind">>]>>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: string: <PgQuery::String: sval: "studio">>], location: 99>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "t">>, <PgQuery::Node: string: <PgQuery::String: sval: "studio">>], location: 110>>, location: 108>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "f">>, <PgQuery::Node: string: <PgQuery::String: sval: "kind">>], location: 123>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "t">>, <PgQuery::Node: string: <PgQuery::String: sval: "kind">>], location: 132>>, location: 130>>], location: 119>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 138>, <PgQuery::RawStmt: stmt: <PgQuery::Node: update_stmt: <PgQuery::UpdateStmt: relation: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "employees", inh: true, relpersistence: "p", location: 148>, target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "salary", indirection: [], val: <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "*">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "salary">>], location: 171>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "v">>, <PgQuery::Node: string: <PgQuery::String: sval: "increase">>], location: 180>>, location: 178>>, location: 162>>], where_clause: <PgQuery::Node: bool_expr: <PgQuery::BoolExpr: boolop: :AND_EXPR, args: [<PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: "=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "employees">>, <PgQuery::Node: string: <PgQuery::String: sval: "depno">>], location: 280>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "v">>, <PgQuery::Node: string: <PgQuery::String: sval: "depno">>], location: 298>>, location: 296>>, <PgQuery::Node: a_expr: <PgQuery::A_Expr: kind: :AEXPR_OP, name: [<PgQuery::Node: string: <PgQuery::String: sval: ">=">>], lexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "employees">>, <PgQuery::Node: string: <PgQuery::String: sval: "sales">>], location: 310>>, rexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "v">>, <PgQuery::Node: string: <PgQuery::String: sval: "target">>], location: 329>>, location: 326>>], location: 306>>, from_clause: [<PgQuery::Node: range_subselect: <PgQuery::RangeSubselect: lateral: false, subquery: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 206, ival: <PgQuery::Integer: ival: 1>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 209, ival: <PgQuery::Integer: ival: 200000>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 217, fval: <PgQuery::Float: fval: "1.2">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 224, ival: <PgQuery::Integer: ival: 2>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 227, ival: <PgQuery::Integer: ival: 400000>>>, <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 235, fval: <PgQuery::Float: fval: "1.4">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, alias: <PgQuery::Alias: aliasname: "v", colnames: [<PgQuery::Node: string: <PgQuery::String: sval: "depno">>, <PgQuery::Node: string: <PgQuery::String: sval: "target">>, <PgQuery::Node: string: <PgQuery::String: sval: "increase">>]>>>], returning_list: []>>, stmt_location: 139, stmt_len: 198>]>
--------END-------

-------BEGIN-------
Method: values
SQL: SELECT * FROM machines
WHERE ip_address IN (VALUES('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'));
Fingerprint: 3393642ea831436e
Fingerprint Deparse: 3393642ea831436e
Deparse SQL: SELECT * FROM machines WHERE ip_address IN (VALUES ('192.168.0.1'::inet), ('192.168.0.10'), ('192.168.1.43'))
Tree: <PgQuery::ParseResult: version: 150001, stmts: [<PgQuery::RawStmt: stmt: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [<PgQuery::Node: res_target: <PgQuery::ResTarget: name: "", indirection: [], val: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: a_star: <PgQuery::A_Star: >>], location: 7>>, location: 7>>], from_clause: [<PgQuery::Node: range_var: <PgQuery::RangeVar: catalogname: "", schemaname: "", relname: "machines", inh: true, relpersistence: "p", location: 14>>], where_clause: <PgQuery::Node: sub_link: <PgQuery::SubLink: sub_link_type: :ANY_SUBLINK, sub_link_id: 0, testexpr: <PgQuery::Node: column_ref: <PgQuery::ColumnRef: fields: [<PgQuery::Node: string: <PgQuery::String: sval: "ip_address">>], location: 29>>, oper_name: [], subselect: <PgQuery::Node: select_stmt: <PgQuery::SelectStmt: distinct_clause: [], target_list: [], from_clause: [], group_clause: [], group_distinct: false, window_clause: [], values_lists: [<PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: type_cast: <PgQuery::TypeCast: arg: <PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 51, sval: <PgQuery::String: sval: "192.168.0.1">>>, type_name: <PgQuery::TypeName: names: [<PgQuery::Node: string: <PgQuery::String: sval: "inet">>], type_oid: 0, setof: false, pct_type: false, typmods: [], typemod: -1, array_bounds: [], location: 66>, location: 64>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 74, sval: <PgQuery::String: sval: "192.168.0.10">>>]>>, <PgQuery::Node: list: <PgQuery::List: items: [<PgQuery::Node: a_const: <PgQuery::A_Const: isnull: false, location: 92, sval: <PgQuery::String: sval: "192.168.1.43">>>]>>], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, location: 40>>, group_clause: [], group_distinct: false, window_clause: [], values_lists: [], sort_clause: [], limit_option: :LIMIT_OPTION_DEFAULT, locking_clause: [], op: :SETOP_NONE, all: false>>, stmt_location: 0, stmt_len: 108>]>
--------END-------
